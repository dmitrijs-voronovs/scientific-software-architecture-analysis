id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/15474:543,availability,Error,Error,543,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:571,availability,ERROR,ERROR,571,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:635,availability,ERROR,ERROR,635,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:895,availability,Fault,Faulty,895,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:1379,availability,Operat,Operating,1379,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:19,deployability,fail,failures,19,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:578,deployability,Fail,Failed,578,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:1315,deployability,version,version,1315,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:1345,deployability,Instal,Installation,1345,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:309,energy efficiency,load,loaded,309,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:369,energy efficiency,load,loaded,369,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:816,energy efficiency,CPU,CPU,816,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:895,energy efficiency,Fault,Faulty,895,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:940,energy efficiency,load,loaded,940,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:1263,energy efficiency,Draw,Draw,1263,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:465,integrability,messag,message,465,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:1315,integrability,version,version,1315,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:465,interoperability,messag,message,465,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:593,modifiability,extens,extensions,593,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:681,modifiability,extens,extension,681,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:1315,modifiability,version,version,1315,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:19,performance,failur,failures,19,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:309,performance,load,loaded,309,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:369,performance,load,loaded,369,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:459,performance,error,error,459,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:512,performance,ERROR,ERROR,512,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:543,performance,Error,Error,543,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:571,performance,ERROR,ERROR,571,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:635,performance,ERROR,ERROR,635,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:816,performance,CPU,CPU,816,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:895,performance,Fault,Faulty,895,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:940,performance,load,loaded,940,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:19,reliability,fail,failures,19,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:578,reliability,Fail,Failed,578,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:895,reliability,Fault,Faulty,895,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:416,safety,input,input,416,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:459,safety,error,error,459,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:512,safety,ERROR,ERROR,512,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:543,safety,Error,Error,543,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:571,safety,ERROR,ERROR,571,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:635,safety,ERROR,ERROR,635,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:895,safety,Fault,Faulty,895,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:1271,safety,input,input,1271,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:557,security,certif,certificate,557,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:37,testability,simpl,simple,37,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:212,testability,simpl,simple,212,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:1422,testability,context,context,1422,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:37,usability,simpl,simple,37,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:212,usability,simpl,simple,212,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:416,usability,input,input,416,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:439,usability,stop,stop,439,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:459,usability,error,error,459,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:512,usability,ERROR,ERROR,512,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:543,usability,Error,Error,543,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:571,usability,ERROR,ERROR,571,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:635,usability,ERROR,ERROR,635,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:902,usability,behavi,behaviour,902,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:991,usability,stop,stop,991,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:1077,usability,responsiv,responsive,1077,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/issues/15474:1271,usability,input,input,1271,"[Web Graphics] Two failures with one simple PyROOT plotter; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:. 1. A crash, upon first execution. 2. A system freeze, once the browser is loaded. ## Crash. Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:. ```. [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:. ERROR: Failed parsing extensions. [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ . -> Created TensorFlow Lite XNNPACK delegate for CPU. ```. The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze. Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py. import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474
https://github.com/root-project/root/pull/15475:425,deployability,updat,updated,425,"RField: add vector.reserve() wherever we know the number of elements...; …to push. ## Changes or fixes:. Adding a call to vector.reserve() to RField.cxx in (almost) all cases where we know the exact number of elements pushed. Saves a bunch of reallocation especially when the number of pushed elements is not strictly bounded (e.g. number of columns, number of subfields). ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15475
https://github.com/root-project/root/pull/15475:361,integrability,sub,subfields,361,"RField: add vector.reserve() wherever we know the number of elements...; …to push. ## Changes or fixes:. Adding a call to vector.reserve() to RField.cxx in (almost) all cases where we know the exact number of elements pushed. Saves a bunch of reallocation especially when the number of pushed elements is not strictly bounded (e.g. number of columns, number of subfields). ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15475
https://github.com/root-project/root/pull/15475:395,safety,test,tested,395,"RField: add vector.reserve() wherever we know the number of elements...; …to push. ## Changes or fixes:. Adding a call to vector.reserve() to RField.cxx in (almost) all cases where we know the exact number of elements pushed. Saves a bunch of reallocation especially when the number of pushed elements is not strictly bounded (e.g. number of columns, number of subfields). ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15475
https://github.com/root-project/root/pull/15475:425,safety,updat,updated,425,"RField: add vector.reserve() wherever we know the number of elements...; …to push. ## Changes or fixes:. Adding a call to vector.reserve() to RField.cxx in (almost) all cases where we know the exact number of elements pushed. Saves a bunch of reallocation especially when the number of pushed elements is not strictly bounded (e.g. number of columns, number of subfields). ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15475
https://github.com/root-project/root/pull/15475:425,security,updat,updated,425,"RField: add vector.reserve() wherever we know the number of elements...; …to push. ## Changes or fixes:. Adding a call to vector.reserve() to RField.cxx in (almost) all cases where we know the exact number of elements pushed. Saves a bunch of reallocation especially when the number of pushed elements is not strictly bounded (e.g. number of columns, number of subfields). ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15475
https://github.com/root-project/root/pull/15475:395,testability,test,tested,395,"RField: add vector.reserve() wherever we know the number of elements...; …to push. ## Changes or fixes:. Adding a call to vector.reserve() to RField.cxx in (almost) all cases where we know the exact number of elements pushed. Saves a bunch of reallocation especially when the number of pushed elements is not strictly bounded (e.g. number of columns, number of subfields). ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15475
https://github.com/root-project/root/pull/15476:180,availability,operat,operations,180,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:393,availability,operat,operations,393,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:89,deployability,Updat,Update,89,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:529,deployability,updat,updated,529,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:170,integrability,transform,transform,170,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:383,integrability,transform,transform,383,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:0,interoperability,Distribut,Distributed,0,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:100,interoperability,distribut,distributed,100,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:170,interoperability,transform,transform,170,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:383,interoperability,transform,transform,383,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:89,safety,Updat,Update,89,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:499,safety,test,tested,499,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:529,safety,updat,updated,529,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:89,security,Updat,Update,89,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:529,security,updat,updated,529,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:499,testability,test,tested,499,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:28,usability,support,support,28,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15476:455,usability,user,user-defined,455,"Distributed RDataFrame: add support for NodeProxy.GetColumnNames ; # This Pull request:. Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:. - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method. - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #15442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15476
https://github.com/root-project/root/pull/15477:43,availability,error,error,43,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:159,availability,down,down,159,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:372,availability,error,error,372,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:785,availability,operat,operator,785,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:64,deployability,version,version,64,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:844,deployability,Build,BuildId,844,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:2021,deployability,updat,updated,2021," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:12,energy efficiency,alloc,allocated,12,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:111,energy efficiency,alloc,allocated,111,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:245,energy efficiency,alloc,allocated,245,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:747,energy efficiency,alloc,allocated,747,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1364,energy efficiency,alloc,allocator,1364," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1388,energy efficiency,alloc,allocator,1388," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1460,energy efficiency,alloc,allocator,1460," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1619,energy efficiency,alloc,allocator,1619," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1643,energy efficiency,alloc,allocator,1643," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1715,energy efficiency,alloc,allocator,1715," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:64,integrability,version,version,64,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:86,integrability,transform,transformation,86,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1174,integrability,Interfac,InterfaceUtils,1174," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:86,interoperability,transform,transformation,86,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:273,interoperability,mismatch,mismatch,273,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1174,interoperability,Interfac,InterfaceUtils,1174," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:64,modifiability,version,version,64,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1174,modifiability,Interfac,InterfaceUtils,1174," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:43,performance,error,error,43,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:255,performance,memor,memory,255,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:372,performance,error,error,372,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:528,performance,memor,memory,528,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:502,reliability,doe,does,502,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:43,safety,error,error,43,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:350,safety,detect,detected,350,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:372,safety,error,error,372,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:656,safety,except,exception,656,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:689,safety,sanit,sanitizer,689,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1144,safety,test,testing-asan,1144," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1870,safety,test,testing-asan,1870," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1991,safety,test,tested,1991," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:2021,safety,updat,updated,2021," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:350,security,detect,detected,350,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:689,security,sanit,sanitizer,689,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:2021,security,updat,updated,2021," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1144,testability,test,testing-asan,1144," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1870,testability,test,testing-asan,1870," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:1991,testability,test,tested,1991," of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:43,usability,error,error,43,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:255,usability,memor,memory,255,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:372,usability,error,error,372,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:392,usability,user,user,392,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:528,usability,memor,memory,528,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15477:593,usability,behavi,behaviour,593,"[df] Delete allocated node before throwing error; In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:. ```. Direct leak of 16 byte(s) in 1 object(s) allocated from:. #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599). #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370. #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15477
https://github.com/root-project/root/pull/15478:145,deployability,build,build,145,"[v632] Backports of recent fixes and improvments; In particular, backport the deprecation of the old `TList` constructor and improvements in the build system for better packaging of the release. Corresponding PR in roottest:. https://github.com/root-project/roottest/pull/1124.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15478
https://github.com/root-project/root/pull/15478:186,deployability,releas,release,186,"[v632] Backports of recent fixes and improvments; In particular, backport the deprecation of the old `TList` constructor and improvements in the build system for better packaging of the release. Corresponding PR in roottest:. https://github.com/root-project/roottest/pull/1124.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15478
https://github.com/root-project/root/pull/15478:169,modifiability,pac,packaging,169,"[v632] Backports of recent fixes and improvments; In particular, backport the deprecation of the old `TList` constructor and improvements in the build system for better packaging of the release. Corresponding PR in roottest:. https://github.com/root-project/roottest/pull/1124.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15478
https://github.com/root-project/root/issues/15479:369,availability,error,error-cannot-allocate-memory,369,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1532,availability,Operat,Operating,1532,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:63,deployability,version,version,63,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:257,deployability,version,version,257,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:452,deployability,version,version,452,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:605,deployability,version,version,605,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:916,deployability,automat,automatically,916,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1002,deployability,automat,automatically,1002,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1099,deployability,version,version,1099,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1465,deployability,version,version,1465,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1488,deployability,Instal,Installation,1488,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1509,deployability,build,build,1509,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:382,energy efficiency,alloc,allocate-memory,382,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:63,integrability,version,version,63,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:257,integrability,version,version,257,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:452,integrability,version,version,452,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:605,integrability,version,version,605,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1099,integrability,version,version,1099,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1320,integrability,pub,public,1320,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1465,integrability,version,version,1465,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:63,modifiability,version,version,63,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:257,modifiability,version,version,257,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:452,modifiability,version,version,452,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:605,modifiability,version,version,605,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1099,modifiability,version,version,1099,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1465,modifiability,version,version,1465,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:369,performance,error,error-cannot-allocate-memory,369,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1060,performance,time,time,1060,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1226,performance,time,time,1226,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:223,safety,test,testing,223,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:369,safety,error,error-cannot-allocate-memory,369,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1327,safety,test,test,1327,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:167,security,team,team,167,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:207,security,team,team,207,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:361,security,session,session-error-cannot-allocate-memory,361,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:552,security,access,access,552,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:223,testability,test,testing,223,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:916,testability,automat,automatically,916,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1002,testability,automat,automatically,1002,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1327,testability,test,test,1327,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1576,testability,context,context,1576,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:369,usability,error,error-cannot-allocate-memory,369,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:435,usability,behavi,behavior,435,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:849,usability,document,document,849,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/issues/15479:1176,usability,hint,hint,1176,"[RF] RooFit workspace work differently with pyROOT in 6.32-rc1 version and 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? . 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically? 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause? Thanks a lot for your time. Yuhao. ### Reproducer. ```. import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""). ws=g.combined. simpdf=ws.pdf(""simPdf""). channelCat = simpdf.indexCat(). print(type(channelCat.begin().first)). ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15479
https://github.com/root-project/root/pull/15480:53,modifiability,Exten,Extended,53,[RF] Add back accidentally removed docs for `RooFit::Extended()`; Thanks to this forum post:. https://root-forum.cern.ch/t/extended-option-removed-from-fitto-and-createnll/59283. Needs to be backported to 6.32 and 6.30.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15480
https://github.com/root-project/root/pull/15480:123,modifiability,exten,extended-option-removed-from-fitto-and-createnll,123,[RF] Add back accidentally removed docs for `RooFit::Extended()`; Thanks to this forum post:. https://root-forum.cern.ch/t/extended-option-removed-from-fitto-and-createnll/59283. Needs to be backported to 6.32 and 6.30.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15480
https://github.com/root-project/root/pull/15480:14,safety,accid,accidentally,14,[RF] Add back accidentally removed docs for `RooFit::Extended()`; Thanks to this forum post:. https://root-forum.cern.ch/t/extended-option-removed-from-fitto-and-createnll/59283. Needs to be backported to 6.32 and 6.30.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15480
https://github.com/root-project/root/issues/15481:64,availability,state,state,64,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:665,availability,error,error,665,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1499,availability,error,error,1499,"xed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1790,availability,error,error,1790,"root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2633,availability,error,error,2633," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2985,availability,error,error,2985," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:538,deployability,fail,fails,538,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:934,deployability,version,version,934,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1222,deployability,version,version,1222," and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1385,deployability,fail,fails,1385,"e test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails wi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1657,deployability,build,builds,1657,"7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2052,deployability,fail,fails,2052," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2101,deployability,fail,failed,2101," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2380,deployability,fail,fails,2380," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:64,integrability,state,state,64,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:934,integrability,version,version,934,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1222,integrability,version,version,1222," and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:934,modifiability,version,version,934,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1222,modifiability,version,version,1222," and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:665,performance,error,error,665,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1499,performance,error,error,1499,"xed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1790,performance,error,error,1790,"root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2633,performance,error,error,2633," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2985,performance,error,error,2985," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:257,reliability,doe,does,257,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:351,reliability,doe,does,351,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:538,reliability,fail,fails,538,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1385,reliability,fail,fails,1385,"e test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails wi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2052,reliability,fail,fails,2052," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2101,reliability,fail,failed,2101," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2380,reliability,fail,fails,2380," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:390,safety,test,test,390,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:665,safety,error,error,665,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1499,safety,error,error,1499,"xed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1790,safety,error,error,1790,"root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2633,safety,error,error,2633," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2985,safety,error,error,2985," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:390,testability,test,test,390,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2091,testability,Assert,Assertion,2091," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:592,usability,User,Users,592,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:665,usability,error,error,665,"Calling ProcessLine in an unnamed macro leave Cling in a broken state .. sometimes; ### Description. In an unnamed macro having:. ```. {. gROOT->ProcessLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1146,usability,command,command,1146,"ssLine(statement_1);. statement_2;. }. ```. is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1425,usability,User,Users,1425,"nTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1499,usability,error,error,1499,"xed by moving to `Cling`) but still fails (unexpectedly) with:. ```. Processing run.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1631,usability,User,Users,1631,"test/cling/return/./run.C:7:1: error: unknown type name 't02'. t02 t;. ^. ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1790,usability,error,error,1790,"root/files/15279954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:1805,usability,indicat,indicate,1805,"954/trun.tar.gz). we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2399,usability,User,Users,2399," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2633,usability,error,error,2633," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2684,usability,User,Users,2684," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2819,usability,User,Users,2819," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/issues/15481:2985,usability,error,error,2985," i123 = t_1;. int j123 = t_2;. }. ```. works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. gROOT->SetDirLevel(t_1);. }. ```. mysteriously fails with:. ```. Processing trun.C... /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'. gROOT->SetDirLevel(t_1);. ^~~~~. /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'. #define gROOT (ROOT::GetROOT()). ^~~~~~~~~~~~~. ```. The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. i123 = t_2;. }. ```. fails with:. ```. Processing trun.C... Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628. Abort trap: 6. ```. And weirdly:. ```. {. gROOT->ProcessLine("".L t1.C"");. gROOT->ProcessLine("".L t2.C"");. int i123 = t_1;. int j123 = t_2;. t_1 = 3;. }. ```. fails with:. ```. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]. t_1 = 3;. ^~~. auto . input_line_11:2:3: error: reference to 't_1' is ambiguous. (t_1). ^. /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'. int t_1 = 3;. ^. /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'. t_1 = 3;. ^. input_line_11:2:3: error: unknown type name 't_1'. (t_1). ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15481
https://github.com/root-project/root/pull/15483:283,availability,error,errors,283,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:30,deployability,build,building,30,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:224,deployability,build,build,224,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:230,deployability,log,logs,230,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:123,modifiability,maintain,maintained,123,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:283,performance,error,errors,283,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:123,safety,maintain,maintained,123,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:230,safety,log,logs,230,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:246,safety,prevent,prevent,246,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:283,safety,error,errors,283,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:230,security,log,logs,230,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:246,security,preven,prevent,246,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:230,testability,log,logs,230,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15483:283,usability,error,errors,283,"[CMake] Silence warnings when building LLVM and clang ; Suppress warnings compiling the builtin LLVM and clang. It is not. maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also. prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15483
https://github.com/root-project/root/pull/15484:69,usability,Close,Closes,69,"[relnotes] Mention different `std::string` representation in PyROOT; Closes #15153, as confirmed in this comment:. https://github.com/root-project/root/issues/15153#issuecomment-2042301817",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15484
https://github.com/root-project/root/pull/15484:87,usability,confirm,confirmed,87,"[relnotes] Mention different `std::string` representation in PyROOT; Closes #15153, as confirmed in this comment:. https://github.com/root-project/root/issues/15153#issuecomment-2042301817",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15484
https://github.com/root-project/root/pull/15485:20,safety,except,exception,20,[PyROOT] Report the exception type (instead of TypeError) is multiple overloads raise C++ exceptions of the same type; Closes #15375 by backporting a commit from upstream: https://github.com/wlav/CPyCppyy/commit/02072bbd818501364b37c133364e02976af4cc10. Needs to be backported to the 6.32 branch.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15485
https://github.com/root-project/root/pull/15485:90,safety,except,exceptions,90,[PyROOT] Report the exception type (instead of TypeError) is multiple overloads raise C++ exceptions of the same type; Closes #15375 by backporting a commit from upstream: https://github.com/wlav/CPyCppyy/commit/02072bbd818501364b37c133364e02976af4cc10. Needs to be backported to the 6.32 branch.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15485
https://github.com/root-project/root/pull/15485:119,usability,Close,Closes,119,[PyROOT] Report the exception type (instead of TypeError) is multiple overloads raise C++ exceptions of the same type; Closes #15375 by backporting a commit from upstream: https://github.com/wlav/CPyCppyy/commit/02072bbd818501364b37c133364e02976af4cc10. Needs to be backported to the 6.32 branch.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15485
https://github.com/root-project/root/pull/15486:115,testability,regress,regression,115,[v632] Backport of recent fixes and improvements; Backport of recent fixes and improvements. The fix for the cppyy regression is important in particular.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15486
https://github.com/root-project/root/pull/15488:383,availability,error,error,383,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15488:377,deployability,log,logic,377,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15488:443,deployability,releas,release,443,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15488:383,performance,error,error,383,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15488:173,reliability,doe,doesn,173,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15488:377,safety,log,logic,377,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15488:383,safety,error,error,383,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15488:377,security,log,logic,377,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15488:377,testability,log,logic,377,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15488:320,usability,user,user,320,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15488:383,usability,error,error,383,"[CMake] Move connection check for `clad` after RootBuildOptions; There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15488
https://github.com/root-project/root/pull/15489:121,safety,avoid,avoid,121,"[proof] Remove call to deprecated `TList` constructor; This is a follow-up on c97ec173ee589ab2. In particular, this will avoid a flood of warnings on Jenkins, i.e. for roottest, where proof is still enabled, like here:. https://github.com/root-project/roottest/pull/1125. To be backported to 6.32, where this `TList` constructor is already deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15489
https://github.com/root-project/root/pull/15490:119,deployability,configurat,configuration,119,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:219,deployability,configurat,configuration,219,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:119,integrability,configur,configuration,119,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:219,integrability,configur,configuration,219,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:204,interoperability,share,share,204,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:413,interoperability,format,format,413,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:119,modifiability,configur,configuration,119,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:219,modifiability,configur,configuration,219,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:233,modifiability,variab,variables,233,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:545,performance,time,time,545,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:196,reliability,doe,doesn,196,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:516,reliability,doe,doesn,516,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:27,safety,test,tests,27,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:37,safety,test,test,37,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:67,safety,test,tests,67,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:81,safety,test,test,81,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:287,safety,test,tests,287,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:361,safety,test,tests,361,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:499,safety,test,tests,499,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:119,security,configur,configuration,119,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:219,security,configur,configuration,219,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:27,testability,test,tests,27,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:37,testability,test,test,37,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:67,testability,test,tests,67,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:81,testability,test,test,81,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:287,testability,test,tests,287,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:361,testability,test,tests,361,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15490:499,testability,test,tests,499,"[RF] Move remaining RooFit tests in `test/` into `roofit/`; Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15490
https://github.com/root-project/root/pull/15491:160,integrability,discover,discovery,160,[RF] Support RooBernstein in code generation for AD; Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15491
https://github.com/root-project/root/pull/15491:160,interoperability,discover,discovery,160,[RF] Support RooBernstein in code generation for AD; Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15491
https://github.com/root-project/root/pull/15491:220,modifiability,variab,variable,220,[RF] Support RooBernstein in code generation for AD; Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15491
https://github.com/root-project/root/pull/15491:337,safety,test,test,337,[RF] Support RooBernstein in code generation for AD; Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15491
https://github.com/root-project/root/pull/15491:337,testability,test,test,337,[RF] Support RooBernstein in code generation for AD; Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15491
https://github.com/root-project/root/pull/15491:5,usability,Support,Support,5,[RF] Support RooBernstein in code generation for AD; Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15491
https://github.com/root-project/root/pull/15491:83,usability,support,support,83,[RF] Support RooBernstein in code generation for AD; Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15491
https://github.com/root-project/root/pull/15491:160,usability,discov,discovery,160,[RF] Support RooBernstein in code generation for AD; Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15491
https://github.com/root-project/root/pull/15491:267,usability,support,support,267,[RF] Support RooBernstein in code generation for AD; Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15491
https://github.com/root-project/root/pull/15493:11,deployability,depend,dependency,11,[tmva] Fix dependency of tutorials; Import some of the changes applied in 6.28 from commit https://github.com/root-project/root/commit/c2cacce4ca9e2e8368932f9678e8979fecd065d3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15493
https://github.com/root-project/root/pull/15493:11,integrability,depend,dependency,11,[tmva] Fix dependency of tutorials; Import some of the changes applied in 6.28 from commit https://github.com/root-project/root/commit/c2cacce4ca9e2e8368932f9678e8979fecd065d3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15493
https://github.com/root-project/root/pull/15493:11,modifiability,depend,dependency,11,[tmva] Fix dependency of tutorials; Import some of the changes applied in 6.28 from commit https://github.com/root-project/root/commit/c2cacce4ca9e2e8368932f9678e8979fecd065d3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15493
https://github.com/root-project/root/pull/15493:11,safety,depend,dependency,11,[tmva] Fix dependency of tutorials; Import some of the changes applied in 6.28 from commit https://github.com/root-project/root/commit/c2cacce4ca9e2e8368932f9678e8979fecd065d3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15493
https://github.com/root-project/root/pull/15493:11,testability,depend,dependency,11,[tmva] Fix dependency of tutorials; Import some of the changes applied in 6.28 from commit https://github.com/root-project/root/commit/c2cacce4ca9e2e8368932f9678e8979fecd065d3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15493
https://github.com/root-project/root/issues/15494:984,availability,Operat,Operating,984,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:211,deployability,build,build,211,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:505,deployability,build,build,505,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:866,deployability,version,version,866,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:940,deployability,Instal,Installation,940,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:961,deployability,build,build,961,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:39,integrability,Queue,Queue,39,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:242,integrability,Queue,Queue,242,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:417,integrability,Queue,Queue,417,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:866,integrability,version,version,866,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:866,modifiability,version,version,866,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:39,performance,Queue,Queue,39,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:50,performance,time,timeout,50,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:227,performance,time,timeout,227,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:242,performance,Queue,Queue,242,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:417,performance,Queue,Queue,417,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:463,performance,Time,Timeout,463,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:45,safety,test,test,45,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:50,safety,timeout,timeout,50,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:227,safety,timeout,timeout,227,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:248,safety,test,test,248,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:277,safety,test,test,277,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:350,safety,Test,Test,350,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:387,safety,test,test-test-RooFit-MultiProcess-Queue,387,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:463,safety,Timeout,Timeout,463,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:600,safety,test,tests,600,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:613,safety,test,test,613,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:646,safety,test,test,646,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:686,safety,test,test,686,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:45,testability,test,test,45,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:248,testability,test,test,248,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:277,testability,test,test,277,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:350,testability,Test,Test,350,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:387,testability,test,test-test-RooFit-MultiProcess-Queue,387,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:600,testability,test,tests,600,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:613,testability,test,test,613,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:646,testability,test,test,646,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:686,testability,test,test,686,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/issues/15494:1027,testability,context,context,1027,"[RF] investigate and fix MultiProcess::Queue test timeout; ### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```. 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec. Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc. [==========] Running 5 tests from 3 test suites. [----------] Global test environment set-up. [----------] 1 test from FIFOQueue. [ RUN ] FIFOQueue.TaskOrder. ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15494
https://github.com/root-project/root/pull/15497:0,safety,Compl,Comply,0,Comply with CMP0148; See https://cmake.org/cmake/help/latest/policy/CMP0148.html.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15497
https://github.com/root-project/root/pull/15497:0,security,Compl,Comply,0,Comply with CMP0148; See https://cmake.org/cmake/help/latest/policy/CMP0148.html.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15497
https://github.com/root-project/root/pull/15497:61,security,polic,policy,61,Comply with CMP0148; See https://cmake.org/cmake/help/latest/policy/CMP0148.html.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15497
https://github.com/root-project/root/pull/15497:49,usability,help,help,49,Comply with CMP0148; See https://cmake.org/cmake/help/latest/policy/CMP0148.html.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15497
https://github.com/root-project/root/issues/15498:12,availability,consist,consistent,12,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:793,availability,Operat,Operating,793,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:706,deployability,version,version,706,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:749,deployability,Instal,Installation,749,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:770,deployability,build,build,770,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:199,energy efficiency,Draw,Draw,199,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:654,energy efficiency,Draw,Draw,654,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:128,integrability,configur,configuring,128,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:706,integrability,version,version,706,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:128,modifiability,configur,configuring,128,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:706,modifiability,version,version,706,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:662,safety,input,input,662,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:128,security,configur,configuring,128,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:842,testability,context,context,842,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:12,usability,consist,consistent,12,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/issues/15498:662,usability,input,input,662,"gPad is not consistent in pyROOT with web canvas; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If configuring any web display, gPad is not properly set. As a result, `h.Draw` creates new canvas. Code works properly when gROOT.SetWebDisplay(""off"") invoked. ### Reproducer. Here is reproducer:. ```. import ROOT. ROOT.gROOT.SetWebDisplay(""""). c = ROOT.TCanvas(). if ROOT.gPad:. print(""gPad name"", ROOT.gPad.GetName(), ""editable"", ROOT.gPad.IsEditable()). else:. print(""gPad is not there - why?""). h = ROOT.TH1D("""","""",64, -4,4). h.FillRandom(""gaus""). # this is a problem - histogram do not ""see"" gPad and creates new canvas. h.Draw(). input(""Press Enter to exit""). ```. ### ROOT version. master branch. Python 3.11.9. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15498
https://github.com/root-project/root/pull/15499:178,availability,error,error,178,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:343,availability,sli,slightly,343,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:97,deployability,contain,contains,97,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:857,deployability,updat,updated,857,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:322,integrability,messag,messages,322,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:322,interoperability,messag,messages,322,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:594,modifiability,Exten,Extend,594,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:718,modifiability,Exten,Extend,718,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:178,performance,error,error,178,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:343,reliability,sli,slightly,343,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:178,safety,error,error,178,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:390,safety,Test,TestStatistics,390,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:609,safety,test,test,609,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:735,safety,test,test,735,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:791,safety,sanit,sanity,791,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:827,safety,test,tested,827,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:857,safety,updat,updated,857,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:791,security,sanit,sanity,791,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:857,security,updat,updated,857,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:390,testability,Test,TestStatistics,390,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:609,testability,test,test,609,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:735,testability,test,test,735,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:756,testability,simpl,simple,756,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:827,testability,test,tested,827,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:178,usability,error,error,178,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:357,usability,efficien,efficiently,357,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15499:756,usability,simpl,simple,756,"[RF] assorted improvements; # This Pull request:. ## Changes or fixes:. Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently. 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity. 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement. 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15499
https://github.com/root-project/root/pull/15501:171,deployability,automat,automatically,171,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15501:278,deployability,updat,updated,278,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15501:72,safety,avoid,avoid,72,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15501:278,safety,updat,updated,278,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15501:292,safety,test,tests,292,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15501:278,security,updat,updated,278,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15501:171,testability,automat,automatically,171,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15501:232,testability,simpl,simplified,232,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15501:286,testability,unit,unit,286,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15501:292,testability,test,tests,292,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15501:232,usability,simpl,simplified,232,"[math][RF] Define pullback of `ROOT::Math::landau` functions for AD; To avoid fallback to numeric differentiation because the function is not. inlined. The pullbacks were automatically generated with Clad master, and then. manually simplified. It was carefully checked that the updated unit. tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501
https://github.com/root-project/root/pull/15502:117,availability,error,errors,117,"[RF] Small fixup for using RooFit with new Clad 1.5; Using template functions in the generated code can cause linker errors,. which is avoided with this suggested commit. To be backported to the 6.32 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15502
https://github.com/root-project/root/pull/15502:117,performance,error,errors,117,"[RF] Small fixup for using RooFit with new Clad 1.5; Using template functions in the generated code can cause linker errors,. which is avoided with this suggested commit. To be backported to the 6.32 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15502
https://github.com/root-project/root/pull/15502:117,safety,error,errors,117,"[RF] Small fixup for using RooFit with new Clad 1.5; Using template functions in the generated code can cause linker errors,. which is avoided with this suggested commit. To be backported to the 6.32 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15502
https://github.com/root-project/root/pull/15502:135,safety,avoid,avoided,135,"[RF] Small fixup for using RooFit with new Clad 1.5; Using template functions in the generated code can cause linker errors,. which is avoided with this suggested commit. To be backported to the 6.32 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15502
https://github.com/root-project/root/pull/15502:117,usability,error,errors,117,"[RF] Small fixup for using RooFit with new Clad 1.5; Using template functions in the generated code can cause linker errors,. which is avoided with this suggested commit. To be backported to the 6.32 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15502
https://github.com/root-project/root/issues/15503:344,availability,Operat,Operating,344,Allow users to change default Snapshot behaviour of collections; ### Explain what you would like to see improved and how. As proposed in the following forum post:. https://root-forum.cern.ch/t/how-to-stop-rdataframe-from-changing-column-type-from-std-vector-double-to-root-rvec/58971/3. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15503
https://github.com/root-project/root/issues/15503:296,deployability,version,version,296,Allow users to change default Snapshot behaviour of collections; ### Explain what you would like to see improved and how. As proposed in the following forum post:. https://root-forum.cern.ch/t/how-to-stop-rdataframe-from-changing-column-type-from-std-vector-double-to-root-rvec/58971/3. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15503
https://github.com/root-project/root/issues/15503:314,deployability,Instal,Installation,314,Allow users to change default Snapshot behaviour of collections; ### Explain what you would like to see improved and how. As proposed in the following forum post:. https://root-forum.cern.ch/t/how-to-stop-rdataframe-from-changing-column-type-from-std-vector-double-to-root-rvec/58971/3. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15503
https://github.com/root-project/root/issues/15503:296,integrability,version,version,296,Allow users to change default Snapshot behaviour of collections; ### Explain what you would like to see improved and how. As proposed in the following forum post:. https://root-forum.cern.ch/t/how-to-stop-rdataframe-from-changing-column-type-from-std-vector-double-to-root-rvec/58971/3. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15503
https://github.com/root-project/root/issues/15503:296,modifiability,version,version,296,Allow users to change default Snapshot behaviour of collections; ### Explain what you would like to see improved and how. As proposed in the following forum post:. https://root-forum.cern.ch/t/how-to-stop-rdataframe-from-changing-column-type-from-std-vector-double-to-root-rvec/58971/3. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15503
https://github.com/root-project/root/issues/15503:382,testability,context,context,382,Allow users to change default Snapshot behaviour of collections; ### Explain what you would like to see improved and how. As proposed in the following forum post:. https://root-forum.cern.ch/t/how-to-stop-rdataframe-from-changing-column-type-from-std-vector-double-to-root-rvec/58971/3. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15503
https://github.com/root-project/root/issues/15503:6,usability,user,users,6,Allow users to change default Snapshot behaviour of collections; ### Explain what you would like to see improved and how. As proposed in the following forum post:. https://root-forum.cern.ch/t/how-to-stop-rdataframe-from-changing-column-type-from-std-vector-double-to-root-rvec/58971/3. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15503
https://github.com/root-project/root/issues/15503:39,usability,behavi,behaviour,39,Allow users to change default Snapshot behaviour of collections; ### Explain what you would like to see improved and how. As proposed in the following forum post:. https://root-forum.cern.ch/t/how-to-stop-rdataframe-from-changing-column-type-from-std-vector-double-to-root-rvec/58971/3. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15503
https://github.com/root-project/root/issues/15503:200,usability,stop,stop-rdataframe-from-changing-column-type-from-std-vector-double-to-root-rvec,200,Allow users to change default Snapshot behaviour of collections; ### Explain what you would like to see improved and how. As proposed in the following forum post:. https://root-forum.cern.ch/t/how-to-stop-rdataframe-from-changing-column-type-from-std-vector-double-to-root-rvec/58971/3. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15503
https://github.com/root-project/root/pull/15504:240,deployability,version,version,240,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:272,deployability,Updat,Update,272,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:425,deployability,version,version,425,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:448,deployability,version,version,448,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:534,deployability,fail,fails,534,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:599,deployability,updat,updated,599,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:524,energy efficiency,current,currently,524,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:240,integrability,version,version,240,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:425,integrability,version,version,425,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:448,integrability,version,version,448,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:400,interoperability,compatib,compatibility,400,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:240,modifiability,version,version,240,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:425,modifiability,version,version,425,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:448,modifiability,version,version,448,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:438,performance,disk,disk,438,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:461,performance,memor,memory,461,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:534,reliability,fail,fails,534,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:272,safety,Updat,Update,272,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:414,safety,test,test,414,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:491,safety,test,tested,491,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:519,safety,test,test,519,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:551,safety,test,tested,551,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:599,safety,updat,updated,599,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:272,security,Updat,Update,272,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:599,security,updat,updated,599,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:414,testability,test,test,414,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:491,testability,test,tested,491,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:519,testability,test,test,519,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:551,testability,test,tested,551,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:279,usability,document,documentation,279,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15504:461,usability,memor,memory,461,[ntuple] add fMaxKeySize field to RNTuple anchor; # This Pull request:. * Adds a `std::uint64_t fMaxKeySize` field to the RNTuple struct. * Adds the necessary machinery to serialize that field to the StreamerInfo. * Bumps the RNTuple class version from 4 to 5. ## TODO. * Update documentation. * Actually use the new field to do header chaining when size exceeds maxKeySize . * Consider adding a fwd compatibility test (read version 5 on disk from version 4 in memory). ## Checklist:. - [x] tested changes locally (one test currently fails due to the tested file missing proper StreamerInfo). - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15504
https://github.com/root-project/root/pull/15505:19,interoperability,format,format,19,[ntuple] run clang-format on RMiniFile.cxx; # This Pull request:. properly formats RMiniFile.cxx with clang-format.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15505
https://github.com/root-project/root/pull/15505:75,interoperability,format,formats,75,[ntuple] run clang-format on RMiniFile.cxx; # This Pull request:. properly formats RMiniFile.cxx with clang-format.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15505
https://github.com/root-project/root/pull/15505:108,interoperability,format,format,108,[ntuple] run clang-format on RMiniFile.cxx; # This Pull request:. properly formats RMiniFile.cxx with clang-format.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15505
https://github.com/root-project/root/pull/15506:117,availability,operat,operator,117,"[skip-ci][windows][cling] Export missing symbols; Export the following missing symbols:. ```. void * __ptr64 __cdecl operator new(unsigned __int64,struct std::nothrow_t const & __ptr64). void * __ptr64 __cdecl operator new[](unsigned __int64,struct std::nothrow_t const & __ptr64). ```. and. ```. void * __cdecl operator new[](unsigned int,struct std::nothrow_t const &). void * __cdecl operator new(unsigned int,struct std::nothrow_t const &). ```. Fixes root-project/cling#442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15506
https://github.com/root-project/root/pull/15506:210,availability,operat,operator,210,"[skip-ci][windows][cling] Export missing symbols; Export the following missing symbols:. ```. void * __ptr64 __cdecl operator new(unsigned __int64,struct std::nothrow_t const & __ptr64). void * __ptr64 __cdecl operator new[](unsigned __int64,struct std::nothrow_t const & __ptr64). ```. and. ```. void * __cdecl operator new[](unsigned int,struct std::nothrow_t const &). void * __cdecl operator new(unsigned int,struct std::nothrow_t const &). ```. Fixes root-project/cling#442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15506
https://github.com/root-project/root/pull/15506:312,availability,operat,operator,312,"[skip-ci][windows][cling] Export missing symbols; Export the following missing symbols:. ```. void * __ptr64 __cdecl operator new(unsigned __int64,struct std::nothrow_t const & __ptr64). void * __ptr64 __cdecl operator new[](unsigned __int64,struct std::nothrow_t const & __ptr64). ```. and. ```. void * __cdecl operator new[](unsigned int,struct std::nothrow_t const &). void * __cdecl operator new(unsigned int,struct std::nothrow_t const &). ```. Fixes root-project/cling#442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15506
https://github.com/root-project/root/pull/15506:387,availability,operat,operator,387,"[skip-ci][windows][cling] Export missing symbols; Export the following missing symbols:. ```. void * __ptr64 __cdecl operator new(unsigned __int64,struct std::nothrow_t const & __ptr64). void * __ptr64 __cdecl operator new[](unsigned __int64,struct std::nothrow_t const & __ptr64). ```. and. ```. void * __cdecl operator new[](unsigned int,struct std::nothrow_t const &). void * __cdecl operator new(unsigned int,struct std::nothrow_t const &). ```. Fixes root-project/cling#442.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15506
https://github.com/root-project/root/pull/15507:72,availability,consist,consistent,72,[ntuple] Provide default RFieldBase::GenerateColumnsImpl; This makes it consistent with `GetColumnRepresentations()` where the default implementation does not attach any columns to the field.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15507
https://github.com/root-project/root/pull/15507:150,reliability,doe,does,150,[ntuple] Provide default RFieldBase::GenerateColumnsImpl; This makes it consistent with `GetColumnRepresentations()` where the default implementation does not attach any columns to the field.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15507
https://github.com/root-project/root/pull/15507:72,usability,consist,consistent,72,[ntuple] Provide default RFieldBase::GenerateColumnsImpl; This makes it consistent with `GetColumnRepresentations()` where the default implementation does not attach any columns to the field.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15507
https://github.com/root-project/root/pull/15508:54,deployability,depend,dependency,54,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:91,deployability,depend,dependence,91,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:136,deployability,depend,dependence,136,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:176,deployability,version,version,176,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:54,integrability,depend,dependency,54,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:91,integrability,depend,dependence,91,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:136,integrability,depend,dependence,136,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:176,integrability,version,version,176,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:418,integrability,configur,configure,418,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:408,interoperability,platform,platforms,408,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:54,modifiability,depend,dependency,54,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:91,modifiability,depend,dependence,91,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:136,modifiability,depend,dependence,136,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:176,modifiability,version,version,176,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:418,modifiability,configur,configure,418,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:34,safety,avoid,avoid,34,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:54,safety,depend,dependency,54,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:71,safety,avoid,avoids,71,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:91,safety,depend,dependence,91,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:136,safety,depend,dependence,136,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:302,safety,test,tested,302,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:418,security,configur,configure,418,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:54,testability,depend,dependency,54,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:91,testability,depend,dependence,91,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:136,testability,depend,dependence,136,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15508:302,testability,test,tested,302,"Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency; This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508
https://github.com/root-project/root/pull/15509:27,energy efficiency,estimat,estimate,27,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15509:52,energy efficiency,model,model,52,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15509:67,energy efficiency,model,model,67,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15509:116,energy efficiency,estimat,estimate,116,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15509:175,integrability,buffer,buffers,175,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15509:36,performance,memor,memory,36,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15509:129,performance,memor,memory,129,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15509:52,security,model,model,52,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15509:67,security,model,model,67,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15509:36,usability,memor,memory,36,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15509:129,usability,memor,memory,129,"[ntuple] Provide method to estimate memory usage of model; Given a model and options for writing, we can reasonably estimate the memory requirements for write pages and other buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15509
https://github.com/root-project/root/pull/15510:7,deployability,Updat,Update,7,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:93,energy efficiency,load,loading,93,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:106,integrability,filter,filters,106,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:93,performance,load,loading,93,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:7,safety,Updat,Update,7,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:35,safety,test,tests,35,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:46,safety,detect,detected,46,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:119,safety,test,tests,119,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:7,security,Updat,Update,7,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:46,security,detect,detected,46,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:35,testability,test,tests,35,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/pull/15510:119,testability,test,tests,119,"[tmva] Update RBatchGenerator, add tests; Fix detected bugs, add separate function for chunk loading with filters, add tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15510
https://github.com/root-project/root/issues/15511:10164,availability,error,error,10164,"fs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::Re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10654,availability,error,error,10654,"7 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeli",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:17508,availability,Operat,Operating,17508,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:1274,deployability,releas,releases,1274,"pecific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::Incr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:1504,deployability,releas,releases,1504,"pear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::Point",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:1784,deployability,releas,releases,1784,"n ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:1987,deployability,releas,releases,1987,"(). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:2175,deployability,releas,releases,2175,"al_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:2594,deployability,releas,releases,2594," (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Valu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:2807,deployability,releas,releases,2807,"/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:3121,deployability,releas,releases,3121,"Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ================================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:3408,deployability,releas,releases,3408,"keTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. ```. ### Reproducer. With the `test_env.sh` included in [test_env.zip](https://github.com/root-project/root/files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx test_env.sh. -bash: hx: command not found. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ vim test_env.sh. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:3644,deployability,releas,releases,3644,"ibCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. ```. ### Reproducer. With the `test_env.sh` included in [test_env.zip](https://github.com/root-project/root/files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx test_env.sh. -bash: hx: command not found. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ vim test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue took 2m35s. ❯ bash. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ . test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ root. ---------------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:3951,deployability,build,build,3951,"_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. ```. ### Reproducer. With the `test_env.sh` included in [test_env.zip](https://github.com/root-project/root/files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx test_env.sh. -bash: hx: command not found. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ vim test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue took 2m35s. ❯ bash. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ . test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:3996,deployability,build,build,3996,"locator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. ```. ### Reproducer. With the `test_env.sh` included in [test_env.zip](https://github.com/root-project/root/files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx test_env.sh. -bash: hx: command not found. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ vim test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue took 2m35s. ❯ bash. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ . test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:5237,deployability,stack,stack,5237,"/root/files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx test_env.sh. -bash: hx: command not found. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ vim test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue took 2m35s. ❯ bash. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ . test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/project",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:5553,deployability,releas,releases,5553,"s913 in ~/tmp/root-issue. ❯ root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:5641,deployability,build,build,5641,"-------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:5720,deployability,Stack,StackTrace,5720,"e ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:5752,deployability,build,build,5752,"un, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:5797,deployability,build,build,5797,"c on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:5984,deployability,build,build,5984,"------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6029,deployability,build,build,6029,"oot [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6182,deployability,build,build,6182,"ash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6227,deployability,build,build,6227,"entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6356,deployability,build,build,6356,") from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6401,deployability,build,build,6401,"3 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6630,deployability,build,build,6630,"2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6675,deployability,build,build,6675,"ip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6815,deployability,build,build,6815,".30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6860,deployability,build,build,6860,"stem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:7525,deployability,releas,releases,7525,"figUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::Incr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:7755,deployability,releas,releases,7755,"pace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling. #33 0x00007f0603128d98 in cli",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:8035,deployability,releas,releases,8035,"n ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:8238,deployability,releas,releases,8238,"(). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:8426,deployability,releas,releases,8426,"al_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:8877,deployability,releas,releases,8877,"? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:9402,deployability,releas,releases,9402,"hcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:9589,deployability,releas,releases,9589,"nsaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:9899,deployability,build,build,9899,"db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/cor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:9944,deployability,build,build,9944,"0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b147",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10190,deployability,build,build,10190,"0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10235,deployability,build,build,10235,"::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipel",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10444,deployability,build,build,10444,"ing::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/pro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10489,deployability,build,build,10489,"cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10680,deployability,build,build,10680,"ndleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10725,deployability,build,build,10725,"b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSyst",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10809,deployability,build,build,10809,">"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10854,deployability,build,build,10854,"ter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11001,deployability,build,build,11001,"src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11046,deployability,build,build,11046,"n TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11197,deployability,build,build,11197,"ins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11242,deployability,build,build,11242,"ects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/project",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11393,deployability,build,build,11393,"leCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenki",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11438,deployability,build,build,11438,"t /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/proje",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11615,deployability,build,build,11615,"0 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11660,deployability,build,build,11660,"ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11807,deployability,build,build,11807,"uild/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see qu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11852,deployability,build,build,11852,"uild/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11988,deployability,build,build,11988,"b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by aski",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12033,deployability,build,build,12033,"_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12187,deployability,build,build,12187,"0) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12232,deployability,build,build,12232,"peline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12385,deployability,build,build,12385," at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fix",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12430,deployability,build,build,12430,"line/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. =============================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12569,deployability,build,build,12569,"nt (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12614,deployability,build,build,12614,"ild/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa7459",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12839,deployability,stack,stack,12839,"_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:13295,deployability,stack,stack,13295,"ation.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libClin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:14008,deployability,releas,releases,14008,"https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::Incr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:14238,deployability,releas,releases,14238,".gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::Point",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:14518,deployability,releas,releases,14518,"n ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:14721,deployability,releas,releases,14721,"(). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:14909,deployability,releas,releases,14909,"al_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:15328,deployability,releas,releases,15328," (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Valu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:15541,deployability,releas,releases,15541,"/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:15855,deployability,releas,releases,15855,"Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ================================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:16142,deployability,releas,releases,16142,"keTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 199",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:16378,deployability,releas,releases,16378,"ibCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.qu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:16685,deployability,build,build,16685,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:16730,deployability,build,build,16730,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:16897,deployability,version,version,16897,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:16953,deployability,releas,releases,16953,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:17471,deployability,Instal,Installation,17471,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:17496,deployability,build,builds,17496,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:2997,energy efficiency,alloc,allocator,2997,".30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:3303,energy efficiency,alloc,allocator,3303,"on(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. ```. ### Reproducer. With the `test_env.sh` included in [test_env.zip](https://github.com/root-project/root/files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:4041,energy efficiency,core,core,4041,"tions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. ```. ### Reproducer. With the `test_env.sh` included in [test_env.zip](https://github.com/root-project/root/files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx test_env.sh. -bash: hx: command not found. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ vim test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue took 2m35s. ❯ bash. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ . test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:5842,energy efficiency,core,core,5842,"aster@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6074,energy efficiency,core,core,6074,"Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ??",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6272,energy efficiency,core,core,6272,"===================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ??",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6446,energy efficiency,core,core,6446,"0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6905,energy efficiency,core,core,6905,"xSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:9067,energy efficiency,alloc,allocator,9067,"9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:9297,energy efficiency,alloc,allocator,9297,". #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:9989,energy efficiency,core,core,9989,"clareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10899,energy efficiency,core,core,10899,"ild/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11091,energy efficiency,core,core,11091,"0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11287,energy efficiency,core,core,11287,"TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11483,energy efficiency,core,core,11483,"ine/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11705,energy efficiency,core,core,11705,"_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. =========================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:11897,energy efficiency,core,core,11897,"core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. en",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12078,energy efficiency,core,core,12078,"OT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12277,energy efficiency,core,core,12277,"6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12475,energy efficiency,core,core,12475,"30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1077. #46 0x00007f060ab4290f in TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:15731,energy efficiency,alloc,allocator,15731,".30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #31 0x00007f0603092698 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #32 0x00007f0603125b4a in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:16037,energy efficiency,alloc,allocator,16037,"on(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #33 0x00007f0603128d98 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. --------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:16775,energy efficiency,core,core,16775,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:458,integrability,sub,subset,458,"Possible memory corruption in cling; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since the switch to ROOT 6.30/02 (LCG 105) we started to experience segfaults related to dictionaries. The most straightforward reproducer is just a `#include` of a specific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:13164,integrability,sub,submit,13164,"0, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:16897,integrability,version,version,16897,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:277,interoperability,specif,specific,277,"Possible memory corruption in cling; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since the switch to ROOT 6.30/02 (LCG 105) we started to experience segfaults related to dictionaries. The most straightforward reproducer is just a `#include` of a specific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12942,modifiability,variab,variable,12942,"26a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), vo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:16897,modifiability,version,version,16897,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:9,performance,memor,memory,9,"Possible memory corruption in cling; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since the switch to ROOT 6.30/02 (LCG 105) we started to experience segfaults related to dictionaries. The most straightforward reproducer is just a `#include` of a specific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:334,performance,memor,memory,334,"Possible memory corruption in cling; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since the switch to ROOT 6.30/02 (LCG 105) we started to experience segfaults related to dictionaries. The most straightforward reproducer is just a `#include` of a specific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10164,performance,error,error,10164,"fs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::Re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10654,performance,error,error,10654,"7 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeli",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:371,safety,isol,isolate,371,"Possible memory corruption in cling; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since the switch to ROOT 6.30/02 (LCG 105) we started to experience segfaults related to dictionaries. The most straightforward reproducer is just a `#include` of a specific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10164,safety,error,error,10164,"fs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::Re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10654,safety,error,error,10654,"7 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeli",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:371,security,iso,isolate,371,"Possible memory corruption in cling; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since the switch to ROOT 6.30/02 (LCG 105) we started to experience segfaults related to dictionaries. The most straightforward reproducer is just a `#include` of a specific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:4732,security,Team,Team,4732,"n HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. ```. ### Reproducer. With the `test_env.sh` included in [test_env.zip](https://github.com/root-project/root/files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx test_env.sh. -bash: hx: command not found. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ vim test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue took 2m35s. ❯ bash. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ . test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6615,security,sign,signum,6615,"e.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6800,security,sign,signum,6800,"projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:6958,security,sign,signal,6958,"entationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:402. #6 0x00007f060ac5e06f in sighandler (sig=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3602. #7 0x00007f060ac47a32 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f060af75d80 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30. #8 0x00007f060ac47736 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/textinput/src/textinput/TerminalConfigUnix. #9 <signal handler called>. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:17163,security,Team,Team,17163,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:371,testability,isol,isolate,371,"Possible memory corruption in cling; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since the switch to ROOT 6.30/02 (LCG 105) we started to experience segfaults related to dictionaries. The most straightforward reproducer is just a `#include` of a specific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:5243,testability,trace,trace,5243,"files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx test_env.sh. -bash: hx: command not found. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ vim test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue took 2m35s. ❯ bash. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ . test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in TUnixSystem::DispatchSignals (this=0x1fbd500, sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:3631. #5 0x00007f060ac560e0 in SigHandler (sig=kSigSegmentationViolation) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12845,testability,trace,trace,12845,"ine/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:13301,testability,trace,trace,13301,"cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:17554,testability,context,context,17554,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:9,usability,memor,memory,9,"Possible memory corruption in cling; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since the switch to ROOT 6.30/02 (LCG 105) we started to experience segfaults related to dictionaries. The most straightforward reproducer is just a `#include` of a specific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:169,usability,experien,experience,169,"Possible memory corruption in cling; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since the switch to ROOT 6.30/02 (LCG 105) we started to experience segfaults related to dictionaries. The most straightforward reproducer is just a `#include` of a specific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:334,usability,memor,memory,334,"Possible memory corruption in cling; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since the switch to ROOT 6.30/02 (LCG 105) we started to experience segfaults related to dictionaries. The most straightforward reproducer is just a `#include` of a specific header. What makes me think that there may be a memory corruption is that I tried to isolate which part of that header was triggering the segfault and I noticed that (on a subset of the header) I could make the segfault appear and disappear just shuffling some class definitions. I also find weird that the segfault seems to be related to an `atexit` function in `libCling.so`:. ```. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x00007f060471d882 in (anonymous namespace)::GenericLLVMIRPlatformSupport::initialize(llvm::orc::JITDylib&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #30 0x00007f06031155f3 in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:4329,usability,command,command,4329,"g::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. ```. ### Reproducer. With the `test_env.sh` included in [test_env.zip](https://github.com/root-project/root/files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx test_env.sh. -bash: hx: command not found. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ vim test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue took 2m35s. ❯ bash. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ . test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:4902,usability,help,help,4902,"erpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. ```. ### Reproducer. With the `test_env.sh` included in [test_env.zip](https://github.com/root-project/root/files/15310428/test_env.zip) on lxplus.cern.ch:. ```. ❯ hx test_env.sh. -bash: hx: command not found. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ vim test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue took 2m35s. ❯ bash. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ . test_env.sh. marcocle in 🌐 lxplus913 in ~/tmp/root-issue. ❯ root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <LoKi/ParticleCuts.h>. *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f060a0d89fa in wait4 () from /lib64/libc.so.6. #1 0x00007f060a04b243 in do_system () from /lib64/libc.so.6. #2 0x00007f060ac59eb2 in TUnixSystem::Exec (this=0x1fbd500, shellcmd=0x9457020 ""/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/gdb-backtrace.sh 212891 1>&2"") at /build/jenkins/workspace/lcg_release_pip. #3 0x00007f060ac5a753 in TUnixSystem::StackTrace (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f060ac5e16c in T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10164,usability,error,error,10164,"fs/lhcb.cern. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::Re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:10654,usability,error,error,10654,"7 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. #38 0x00007f0602e683c4 in TCling::ProcessLine (this=0x20461a0, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.0. #39 0x00007f060aab78bf in TApplication::ProcessLine (this=0x200fe60, line=0x412ae70 ""#line 1 \""ROOT_prompt_0\""\n#include <LoKi/ParticleCuts.h>"", sync=false, err=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/proj. #40 0x00007f060b14a763 in TRint::ProcessLineNr (this=0x200fe60, filestem=0x7f060b15c757 ""ROOT_prompt_"", line=0x419af40 ""#include <LoKi/ParticleCuts.h>"", error=0x7ffd45beeedc) at /build/jenkins/workspace/lcg_release_pipeline/build/projec. #41 0x00007f060b149fa1 in TRint::HandleTermInput (this=0x200fe60) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:648. #42 0x00007f060b1477cd in TTermInputHandler::Notify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:133. #43 0x00007f060b14c187 in TTermInputHandler::ReadNotify (this=0x413b570) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:125. #44 0x00007f060ac58367 in TUnixSystem::CheckDescriptors (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/unix/src/TUnixSystem.cxx:1322. #45 0x00007f060ac577bc in TUnixSystem::DispatchOneEvent (this=0x1fbd500, pendingOnly=false) at /build/jenkins/workspace/lcg_release_pipeli",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12765,usability,hint,hint,12765,"TSystem::InnerLoop (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:390. #47 0x00007f060ab426a4 in TSystem::Run (this=0x1fbd500) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:12979,usability,help,help,12979,"0) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:13037,usability,prefer,preferably,13037,"jects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:13058,usability,command,command,13058,"rc/ROOT/6.30.04/core/base/src/TSystem.cxx:340. #48 0x00007f060aab8367 in TApplication::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:13211,usability,prefer,preferably,13211,"elease_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:13233,usability,command,command,13233,"/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/base/src/TApplication.cxx:1890. #49 0x00007f060b1492e2 in TRint::Run (this=0x200fe60, retrn=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:13377,usability,help,help,13377,") at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/rint/src/TRint.cxx:501. #50 0x0000000000401447 in main (argc=1, argv=0x7ffd45bf1438) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. preferably using the command (.forum bug) in the ROOT prompt. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs or (preferably) using the command (.gh bug) in. the ROOT prompt. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #10 0x00007f05fa744a7e in ?? (). #11 0x00007ffd45bee240 in ?? (). #12 0x00007f060b10d028 in ?? (). #13 0x00007ffd45bee270 in ?? (). #14 0x00007f05fa745920 in ?? (). #15 0x00007f060b10c1a0 in ?? (). #16 0x00007ffd45bee260 in ?? (). #17 0x00007ffd45bee2c0 in ?? (). #18 0x00007f05fa745b0d in ?? (). #19 0x000000000204fc10 in ?? (). #20 0x00000000133b2cc8 in ?? (). #21 0x00000000133b2cc0 in ?? (). #22 0x00007f060309016c in (anonymous namespace)::local_cxa_atexit(void (*)(void*), void*, cling::Interpreter*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #23 0x00007ffd45bee260 in ?? (). #24 0x00007f060b10d110 in ?? (). #25 0x00007f060b10d020 in ?? (). #26 0x00007f0607fe2e7a in ?? () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #27 0x00007f05fa741095 in ?? (). #28 0x00007f05fa740f20 in ?? (). #29 0x000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/issues/15511:17333,usability,help,help,17333,"el9-gcc13-dbg/lib/libCling.so. #34 0x00007f06030933dc in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #35 0x00007f0603095986 in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #36 0x00007f06031781a7 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so. #37 0x00007f0602e677f7 in HandleInterpreterException (metaProcessor=0x308b020, input_line=0x4194ba0 ""#line 1 ""ROOT_prompt_0""n#include <LoKi/ParticleCuts.h>"", compRes=. 0x7ffd45beeafc: cling::Interpreter::kSuccess, result=0x7ffd45beeb00) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/core/metacling/src/TCling.cxx:2436. ===========================================================. Root > .q. ```. ### ROOT version. ```. ❯ which root. /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/bin/root. ```. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |. | From heads/master@tags/v6-30-04 |. | With g++ (GCC) 13.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. LCG builds. ### Operating system. Linux (EL9). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15511
https://github.com/root-project/root/pull/15512:31,deployability,depend,dependencies,31,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:140,deployability,depend,dependencies,140,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:491,deployability,depend,dependency,491,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:727,deployability,depend,dependencies,727,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:851,energy efficiency,current,currently,851,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:31,integrability,depend,dependencies,31,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:140,integrability,depend,dependencies,140,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:491,integrability,depend,dependency,491,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:727,integrability,depend,dependencies,727,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:31,modifiability,depend,dependencies,31,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:140,modifiability,depend,dependencies,140,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:394,modifiability,pac,packages,394,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:491,modifiability,depend,dependency,491,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:727,modifiability,depend,dependencies,727,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:31,safety,depend,dependencies,31,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:140,safety,depend,dependencies,140,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:175,safety,test,tests,175,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:330,safety,valid,validate,330,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:356,safety,test,tests,356,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:491,safety,depend,dependency,491,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:552,safety,test,tests,552,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:727,safety,depend,dependencies,727,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:330,security,validat,validate,330,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:31,testability,depend,dependencies,31,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:140,testability,depend,dependencies,140,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:170,testability,unit,unit,170,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:175,testability,test,tests,175,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:356,testability,test,tests,356,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:491,testability,depend,dependency,491,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:552,testability,test,tests,552,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:727,testability,depend,dependencies,727,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15512:65,usability,Close,Closes,65,"[TMVA] Add missing TMVA python dependencies to requirements.txt; Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the. docker images via the `requirements.txt`. However, this will only have a. delayed effect until the images are re-built. Therefore, we can't. validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be. opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything. The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:. https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15512
https://github.com/root-project/root/pull/15513:48,availability,state,statements,48,[core] Replace CINT with CLING; in preprocessor statements. Fixes #10058.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15513
https://github.com/root-project/root/pull/15513:1,energy efficiency,core,core,1,[core] Replace CINT with CLING; in preprocessor statements. Fixes #10058.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15513
https://github.com/root-project/root/pull/15513:48,integrability,state,statements,48,[core] Replace CINT with CLING; in preprocessor statements. Fixes #10058.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15513
https://github.com/root-project/root/pull/15514:70,deployability,updat,updated,70,[reve] Fix tone mapping for transaparent objects; This PR is shipping updated minimized version of RenderCore (v14). It has minor changes in the projected geo shape outlines and minor changes in geo_cms.C demo. Here is the reference to the change in RenderCore: . https://github.com/UL-FRI-LGM/RenderCore/pull/19,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15514
https://github.com/root-project/root/pull/15514:88,deployability,version,version,88,[reve] Fix tone mapping for transaparent objects; This PR is shipping updated minimized version of RenderCore (v14). It has minor changes in the projected geo shape outlines and minor changes in geo_cms.C demo. Here is the reference to the change in RenderCore: . https://github.com/UL-FRI-LGM/RenderCore/pull/19,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15514
https://github.com/root-project/root/pull/15514:88,integrability,version,version,88,[reve] Fix tone mapping for transaparent objects; This PR is shipping updated minimized version of RenderCore (v14). It has minor changes in the projected geo shape outlines and minor changes in geo_cms.C demo. Here is the reference to the change in RenderCore: . https://github.com/UL-FRI-LGM/RenderCore/pull/19,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15514
https://github.com/root-project/root/pull/15514:88,modifiability,version,version,88,[reve] Fix tone mapping for transaparent objects; This PR is shipping updated minimized version of RenderCore (v14). It has minor changes in the projected geo shape outlines and minor changes in geo_cms.C demo. Here is the reference to the change in RenderCore: . https://github.com/UL-FRI-LGM/RenderCore/pull/19,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15514
https://github.com/root-project/root/pull/15514:70,safety,updat,updated,70,[reve] Fix tone mapping for transaparent objects; This PR is shipping updated minimized version of RenderCore (v14). It has minor changes in the projected geo shape outlines and minor changes in geo_cms.C demo. Here is the reference to the change in RenderCore: . https://github.com/UL-FRI-LGM/RenderCore/pull/19,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15514
https://github.com/root-project/root/pull/15514:70,security,updat,updated,70,[reve] Fix tone mapping for transaparent objects; This PR is shipping updated minimized version of RenderCore (v14). It has minor changes in the projected geo shape outlines and minor changes in geo_cms.C demo. Here is the reference to the change in RenderCore: . https://github.com/UL-FRI-LGM/RenderCore/pull/19,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15514
https://github.com/root-project/root/pull/15514:78,usability,minim,minimized,78,[reve] Fix tone mapping for transaparent objects; This PR is shipping updated minimized version of RenderCore (v14). It has minor changes in the projected geo shape outlines and minor changes in geo_cms.C demo. Here is the reference to the change in RenderCore: . https://github.com/UL-FRI-LGM/RenderCore/pull/19,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15514
https://github.com/root-project/root/pull/15516:377,deployability,depend,depending,377,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:400,deployability,version,version,400,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:460,deployability,updat,updated,460,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:119,integrability,schema,schema,119,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:297,integrability,schema,schema,297,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:377,integrability,depend,depending,377,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:400,integrability,version,version,400,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:377,modifiability,depend,depending,377,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:400,modifiability,version,version,400,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:266,reliability,doe,doesn,266,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:377,safety,depend,depending,377,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:430,safety,test,tested,430,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:460,safety,updat,updated,460,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:460,security,updat,updated,460,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:377,testability,depend,depending,377,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:430,testability,test,tested,430,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/pull/15516:151,usability,custom,custom,151,"[ntuple] Manually read RNTuple fields in Streamer(); ...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:. Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - not necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15516
https://github.com/root-project/root/issues/15517:194,availability,error,error,194,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:451,availability,error,errors,451,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:983,availability,Error,Error,983,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1045,availability,Error,Error,1045,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1616,availability,Operat,Operating,1616,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:111,deployability,upgrad,upgraded,111,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:309,deployability,updat,update,309,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:339,deployability,version,version,339,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:770,deployability,version,version,770,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1519,deployability,version,version,1519,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1572,deployability,Instal,Installation,1572,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1593,deployability,build,build,1593,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:0,energy efficiency,Draw,Draw,0,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:339,integrability,version,version,339,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:770,integrability,version,version,770,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1519,integrability,version,version,1519,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:111,modifiability,upgrad,upgraded,111,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:339,modifiability,version,version,339,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:770,modifiability,version,version,770,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1519,modifiability,version,version,1519,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:194,performance,error,error,194,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:216,performance,time,time,216,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:392,performance,time,time,392,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:451,performance,error,errors,451,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:983,performance,Error,Error,983,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1045,performance,Error,Error,1045,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:194,safety,error,error,194,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:309,safety,updat,update,309,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:451,safety,error,errors,451,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:983,safety,Error,Error,983,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1045,safety,Error,Error,1045,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:309,security,updat,update,309,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:606,security,Team,Team,606,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1656,testability,context,context,1656,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:194,usability,error,error,194,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:451,usability,error,errors,451,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:815,usability,help,help,815,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:983,usability,Error,Error,983,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1045,usability,Error,Error,1045,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1217,usability,User,Users,1217,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1238,usability,Tool,Tools,1238,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1317,usability,User,Users,1317,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/issues/15517:1338,usability,Tool,Tools,1338,"Draw TCanvas on Macos 14.5; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. After I upgraded my M1 pro MacBook (2021) to MacOS 14.5 last night, I found there are many error printings every time I open the ROOT prompt or execute a program with ROOT libraries linked. Then I tried to update the ROOT to the master version last night and rebuild it. Now I found every time I create a TCanvas in the ROOT program, it prints the errors:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.33/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosxarm64 on May 15 2024, 03:36:37 |. | From heads/master@v6-31-01-1952-gfb9ba02037 |. | With Apple clang version 15.0.0 (clang-1500.3.9.4) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TCanvas *tc1 = new TCanvas(). Error in <TGHScrollBar::TGHScrollBar>: arrow_*.xpm not found. Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found. *** Break *** segmentation violation. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info). [/Users/josiahlee/WORK/Tools/root_install_master/lib/libGui.so] TGCanvas::Layout() (no debug info) . ```. ### Reproducer. 1. Open root prompt on MacOS 14.5. 2. type ""TCanvas *tc=new TCanvas();"". ### ROOT version. heads/master@v6-31-01-1952-gfb9ba02037. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15517
https://github.com/root-project/root/pull/15518:111,deployability,log,logical,111,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:332,deployability,log,logic,332,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:111,safety,log,logical,111,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:258,safety,avoid,avoids,258,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:332,safety,log,logic,332,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:55,security,Modif,Modified,55,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:111,security,log,logical,111,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:138,security,Modif,Modified,138,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:280,security,Modif,Modified,280,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:292,security,sign,signal,292,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:332,security,log,logic,332,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:111,testability,log,logical,111,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/pull/15518:332,testability,log,logic,332,[gpad] Change TCanvas::SetName() implementation; Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. . This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. . There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15518
https://github.com/root-project/root/issues/15520:635,availability,error,error-prone,635,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:902,availability,Operat,Operating,902,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:27,deployability,log,logic,27,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:136,deployability,log,logic,136,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:854,deployability,version,version,854,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:872,deployability,Instal,Installation,872,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:316,energy efficiency,optim,optimization,316,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:471,integrability,topic,topic,471,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:628,integrability,sub,subtly,628,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:854,integrability,version,version,854,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:854,modifiability,version,version,854,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:178,performance,memor,memory,178,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:316,performance,optimiz,optimization,316,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:635,performance,error,error-prone,635,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:811,reliability,doe,does,811,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:27,safety,log,logic,27,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:36,safety,avoid,avoid,36,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:136,safety,log,logic,136,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:635,safety,error,error-prone,635,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:27,security,log,logic,27,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:42,security,control,controlled,42,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:136,security,log,logic,136,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:167,security,control,controlled,167,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:27,testability,log,logic,27,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:42,testability,control,controlled,42,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:136,testability,log,logic,136,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:167,testability,control,controlled,167,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:940,testability,context,context,940,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:178,usability,memor,memory,178,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/issues/15520:635,usability,error,error-prone,635,"Rewrite the RDataFrame JIT logic to avoid controlled leaks; ### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15520
https://github.com/root-project/root/pull/15521:26,energy efficiency,reduc,reduce,26,"[webgui] Fix CEF handler, reduce debug output; 1. Do not use `gSystem->AccessPath` from CEF handler, may block because of mutex usage. 2. Remove debug output from THttpServer and TWebCanvas. 3. Properly handle `local` connection in auth check",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15521
https://github.com/root-project/root/pull/15521:71,security,Access,AccessPath,71,"[webgui] Fix CEF handler, reduce debug output; 1. Do not use `gSystem->AccessPath` from CEF handler, may block because of mutex usage. 2. Remove debug output from THttpServer and TWebCanvas. 3. Properly handle `local` connection in auth check",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15521
https://github.com/root-project/root/pull/15521:232,security,auth,auth,232,"[webgui] Fix CEF handler, reduce debug output; 1. Do not use `gSystem->AccessPath` from CEF handler, may block because of mutex usage. 2. Remove debug output from THttpServer and TWebCanvas. 3. Properly handle `local` connection in auth check",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15521
https://github.com/root-project/root/pull/15522:26,energy efficiency,reduc,reduce,26,"[webgui] Fix CEF handler, reduce debug output[6.32]; Backport of https://github.com/root-project/root/pull/15521",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15522
https://github.com/root-project/root/pull/15523:39,deployability,build,builds,39,"[skip-ci][ci] New schedule for nightly builds; Schedule nightly builds from 1 am onwards, spaced by 15 minutes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15523
https://github.com/root-project/root/pull/15523:64,deployability,build,builds,64,"[skip-ci][ci] New schedule for nightly builds; Schedule nightly builds from 1 am onwards, spaced by 15 minutes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15523
https://github.com/root-project/root/pull/15523:18,energy efficiency,schedul,schedule,18,"[skip-ci][ci] New schedule for nightly builds; Schedule nightly builds from 1 am onwards, spaced by 15 minutes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15523
https://github.com/root-project/root/pull/15523:47,energy efficiency,Schedul,Schedule,47,"[skip-ci][ci] New schedule for nightly builds; Schedule nightly builds from 1 am onwards, spaced by 15 minutes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15523
https://github.com/root-project/root/pull/15523:18,performance,schedul,schedule,18,"[skip-ci][ci] New schedule for nightly builds; Schedule nightly builds from 1 am onwards, spaced by 15 minutes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15523
https://github.com/root-project/root/pull/15523:47,performance,Schedul,Schedule,47,"[skip-ci][ci] New schedule for nightly builds; Schedule nightly builds from 1 am onwards, spaced by 15 minutes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15523
https://github.com/root-project/root/pull/15524:88,reliability,doe,does,88,"[skip ci][ci] New string to skip CI; if ""[skip ci]"" is detected in the PR title, the CI does not start. This is done to have at least one string in common with the ones the GH CI uses for commits. The test of this PR is that the CI does not start given its title.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15524
https://github.com/root-project/root/pull/15524:232,reliability,doe,does,232,"[skip ci][ci] New string to skip CI; if ""[skip ci]"" is detected in the PR title, the CI does not start. This is done to have at least one string in common with the ones the GH CI uses for commits. The test of this PR is that the CI does not start given its title.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15524
https://github.com/root-project/root/pull/15524:55,safety,detect,detected,55,"[skip ci][ci] New string to skip CI; if ""[skip ci]"" is detected in the PR title, the CI does not start. This is done to have at least one string in common with the ones the GH CI uses for commits. The test of this PR is that the CI does not start given its title.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15524
https://github.com/root-project/root/pull/15524:201,safety,test,test,201,"[skip ci][ci] New string to skip CI; if ""[skip ci]"" is detected in the PR title, the CI does not start. This is done to have at least one string in common with the ones the GH CI uses for commits. The test of this PR is that the CI does not start given its title.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15524
https://github.com/root-project/root/pull/15524:55,security,detect,detected,55,"[skip ci][ci] New string to skip CI; if ""[skip ci]"" is detected in the PR title, the CI does not start. This is done to have at least one string in common with the ones the GH CI uses for commits. The test of this PR is that the CI does not start given its title.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15524
https://github.com/root-project/root/pull/15524:201,testability,test,test,201,"[skip ci][ci] New string to skip CI; if ""[skip ci]"" is detected in the PR title, the CI does not start. This is done to have at least one string in common with the ones the GH CI uses for commits. The test of this PR is that the CI does not start given its title.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15524
https://github.com/root-project/root/pull/15526:583,energy efficiency,alloc,allocator,583,"[rntuple] Default initialize data member of RNTupleLocator; This avoids the following type of warning (obtained when compiling ROOT with -fsanitize=thread). ```. inlined from ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’ at /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:417:28:. /usr/include/c++/13/bits/basic_string.h:1079:16: warning: ‘*(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)((char*)&locator + offsetof(ROOT::Experimental::RNTupleLocator, ROOT::Experimental::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15526
https://github.com/root-project/root/pull/15526:806,energy efficiency,alloc,allocator,806,"[rntuple] Default initialize data member of RNTupleLocator; This avoids the following type of warning (obtained when compiling ROOT with -fsanitize=thread). ```. inlined from ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’ at /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:417:28:. /usr/include/c++/13/bits/basic_string.h:1079:16: warning: ‘*(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)((char*)&locator + offsetof(ROOT::Experimental::RNTupleLocator, ROOT::Experimental::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15526
https://github.com/root-project/root/pull/15526:1001,energy efficiency,alloc,allocator,1001,"le] Default initialize data member of RNTupleLocator; This avoids the following type of warning (obtained when compiling ROOT with -fsanitize=thread). ```. inlined from ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’ at /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:417:28:. /usr/include/c++/13/bits/basic_string.h:1079:16: warning: ‘*(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)((char*)&locator + offsetof(ROOT::Experimental::RNTupleLocator, ROOT::Experimental::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std::char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15526
https://github.com/root-project/root/pull/15526:1207,energy efficiency,alloc,allocator,1207,"al::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’ at /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:417:28:. /usr/include/c++/13/bits/basic_string.h:1079:16: warning: ‘*(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)((char*)&locator + offsetof(ROOT::Experimental::RNTupleLocator, ROOT::Experimental::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::_M_u)).std::__cxx11::basic_string<char>::_M_string_length’ may be used uninitialized [-Wmaybe-uninitialized]. 1079 | { ret",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15526
https://github.com/root-project/root/pull/15526:1413,energy efficiency,alloc,allocator,1413,"7/src/RPageStorageDaos.cxx:417:28:. /usr/include/c++/13/bits/basic_string.h:1079:16: warning: ‘*(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)((char*)&locator + offsetof(ROOT::Experimental::RNTupleLocator, ROOT::Experimental::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::_M_u)).std::__cxx11::basic_string<char>::_M_string_length’ may be used uninitialized [-Wmaybe-uninitialized]. 1079 | { return _M_string_length; }. | ^~~~~~~~~~~~~~~~. /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx: In member function ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15526
https://github.com/root-project/root/pull/15526:1617,energy efficiency,alloc,allocator,1617,"ffsetof(ROOT::Experimental::RNTupleLocator, ROOT::Experimental::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::_M_u)).std::__cxx11::basic_string<char>::_M_string_length’ may be used uninitialized [-Wmaybe-uninitialized]. 1079 | { return _M_string_length; }. | ^~~~~~~~~~~~~~~~. /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx: In member function ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’:. /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:412:25: note: ‘",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15526
https://github.com/root-project/root/pull/15526:1821,energy efficiency,alloc,allocator,1821,"tal::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::_M_u)).std::__cxx11::basic_string<char>::_M_string_length’ may be used uninitialized [-Wmaybe-uninitialized]. 1079 | { return _M_string_length; }. | ^~~~~~~~~~~~~~~~. /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx: In member function ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’:. /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:412:25: note: ‘locator’ declared here. 412 | RNTupleLocator locator;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15526
https://github.com/root-project/root/pull/15526:2026,energy efficiency,alloc,allocator,2026,"tal::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::_M_u)).std::__cxx11::basic_string<char>::_M_string_length’ may be used uninitialized [-Wmaybe-uninitialized]. 1079 | { return _M_string_length; }. | ^~~~~~~~~~~~~~~~. /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx: In member function ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’:. /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:412:25: note: ‘locator’ declared here. 412 | RNTupleLocator locator;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15526
https://github.com/root-project/root/pull/15526:65,safety,avoid,avoids,65,"[rntuple] Default initialize data member of RNTupleLocator; This avoids the following type of warning (obtained when compiling ROOT with -fsanitize=thread). ```. inlined from ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’ at /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:417:28:. /usr/include/c++/13/bits/basic_string.h:1079:16: warning: ‘*(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)((char*)&locator + offsetof(ROOT::Experimental::RNTupleLocator, ROOT::Experimental::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15526
https://github.com/root-project/root/pull/15528:97,deployability,version,version,97,[glew] Remove broken end of string checks in _glewStrSame; This avoid compiler warnings with GCC version 12 and later. See also the reasoning in upstream commit: https://github.com/nigels-com/glew/commit/37e614480216ff1485366d97794cd1354ac07337,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15528
https://github.com/root-project/root/pull/15528:97,integrability,version,version,97,[glew] Remove broken end of string checks in _glewStrSame; This avoid compiler warnings with GCC version 12 and later. See also the reasoning in upstream commit: https://github.com/nigels-com/glew/commit/37e614480216ff1485366d97794cd1354ac07337,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15528
https://github.com/root-project/root/pull/15528:97,modifiability,version,version,97,[glew] Remove broken end of string checks in _glewStrSame; This avoid compiler warnings with GCC version 12 and later. See also the reasoning in upstream commit: https://github.com/nigels-com/glew/commit/37e614480216ff1485366d97794cd1354ac07337,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15528
https://github.com/root-project/root/pull/15528:64,safety,avoid,avoid,64,[glew] Remove broken end of string checks in _glewStrSame; This avoid compiler warnings with GCC version 12 and later. See also the reasoning in upstream commit: https://github.com/nigels-com/glew/commit/37e614480216ff1485366d97794cd1354ac07337,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15528
https://github.com/root-project/root/pull/15530:17,deployability,Upgrad,Upgrade,17,[BP][6.32][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15466,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15530
https://github.com/root-project/root/pull/15530:51,deployability,version,versions,51,[BP][6.32][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15466,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15530
https://github.com/root-project/root/pull/15530:11,energy efficiency,core,core,11,[BP][6.32][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15466,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15530
https://github.com/root-project/root/pull/15530:51,integrability,version,versions,51,[BP][6.32][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15466,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15530
https://github.com/root-project/root/pull/15530:17,modifiability,Upgrad,Upgrade,17,[BP][6.32][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15466,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15530
https://github.com/root-project/root/pull/15530:51,modifiability,version,versions,51,[BP][6.32][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15466,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15530
https://github.com/root-project/root/pull/15531:189,availability,robust,robust,189,"[v632] Backports of recent fixes and improvements; Backports of recent fixes and improvements for the release. In particular, fixes unused variable warnings and makes the build system more robust.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15531
https://github.com/root-project/root/pull/15531:102,deployability,releas,release,102,"[v632] Backports of recent fixes and improvements; Backports of recent fixes and improvements for the release. In particular, fixes unused variable warnings and makes the build system more robust.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15531
https://github.com/root-project/root/pull/15531:171,deployability,build,build,171,"[v632] Backports of recent fixes and improvements; Backports of recent fixes and improvements for the release. In particular, fixes unused variable warnings and makes the build system more robust.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15531
https://github.com/root-project/root/pull/15531:139,modifiability,variab,variable,139,"[v632] Backports of recent fixes and improvements; Backports of recent fixes and improvements for the release. In particular, fixes unused variable warnings and makes the build system more robust.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15531
https://github.com/root-project/root/pull/15531:189,reliability,robust,robust,189,"[v632] Backports of recent fixes and improvements; Backports of recent fixes and improvements for the release. In particular, fixes unused variable warnings and makes the build system more robust.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15531
https://github.com/root-project/root/pull/15531:189,safety,robust,robust,189,"[v632] Backports of recent fixes and improvements; Backports of recent fixes and improvements for the release. In particular, fixes unused variable warnings and makes the build system more robust.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15531
https://github.com/root-project/root/pull/15532:26,modifiability,Pac,PackedNaNPreservedAfterArithmetic,26,"[RF] Disable RooNaNPacker.PackedNaNPreservedAfterArithmetic on Windows; This is a new test that got introduced with eb7d8190ba3. Unfortunately, it didn't pass in the nightlies on Windows 10 x86 Debug, so it needs to be disabled on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15532
https://github.com/root-project/root/pull/15532:86,safety,test,test,86,"[RF] Disable RooNaNPacker.PackedNaNPreservedAfterArithmetic on Windows; This is a new test that got introduced with eb7d8190ba3. Unfortunately, it didn't pass in the nightlies on Windows 10 x86 Debug, so it needs to be disabled on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15532
https://github.com/root-project/root/pull/15532:86,testability,test,test,86,"[RF] Disable RooNaNPacker.PackedNaNPreservedAfterArithmetic on Windows; This is a new test that got introduced with eb7d8190ba3. Unfortunately, it didn't pass in the nightlies on Windows 10 x86 Debug, so it needs to be disabled on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15532
https://github.com/root-project/root/pull/15533:17,deployability,Upgrad,Upgrade,17,[BP][6.30][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15530.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15533
https://github.com/root-project/root/pull/15533:51,deployability,version,versions,51,[BP][6.30][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15530.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15533
https://github.com/root-project/root/pull/15533:11,energy efficiency,core,core,11,[BP][6.30][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15530.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15533
https://github.com/root-project/root/pull/15533:51,integrability,version,versions,51,[BP][6.30][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15530.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15533
https://github.com/root-project/root/pull/15533:17,modifiability,Upgrad,Upgrade,17,[BP][6.30][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15530.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15533
https://github.com/root-project/root/pull/15533:51,modifiability,version,versions,51,[BP][6.30][core] Upgrade openssl and davix builtin versions; to 0.8.6 and 3.0.13 respectively. BP of https://github.com/root-project/root/pull/15530.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15533
https://github.com/root-project/root/issues/15534:1069,availability,error,error,1069,"eck duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it cr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1416,availability,Operat,Operating,1416,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1544,availability,state,state,1544,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1600,availability,operat,operator,1600,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1767,availability,state,states,1767,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:2008,availability,state,state,2008,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:47,deployability,fail,fail,47,"RNTuple: fields with mixed STL types sometimes fail to be filled; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1254,deployability,fail,fail,1254,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1333,deployability,version,version,1333,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1372,deployability,Instal,Installation,1372,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:641,energy efficiency,model,model,641,"RNTuple: fields with mixed STL types sometimes fail to be filled; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:691,energy efficiency,model,model,691,"RNTuple: fields with mixed STL types sometimes fail to be filled; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:821,energy efficiency,model,model,821,"RNTuple: fields with mixed STL types sometimes fail to be filled; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1333,integrability,version,version,1333,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1544,integrability,state,state,1544,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1767,integrability,state,states,1767,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:2008,integrability,state,state,2008,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:2181,interoperability,specif,specifications,2181,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1333,modifiability,version,version,1333,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1069,performance,error,error,1069,"eck duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it cr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:47,reliability,fail,fail,47,"RNTuple: fields with mixed STL types sometimes fail to be filled; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1254,reliability,fail,fail,1254,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1069,safety,error,error,1069,"eck duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it cr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:641,security,model,model,641,"RNTuple: fields with mixed STL types sometimes fail to be filled; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:691,security,model,model,691,"RNTuple: fields with mixed STL types sometimes fail to be filled; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:821,security,model,model,821,"RNTuple: fields with mixed STL types sometimes fail to be filled; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1456,testability,context,context,1456,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:295,usability,minim,minimal,295,"RNTuple: fields with mixed STL types sometimes fail to be filled; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:898,usability,clear,clear,898,"RNTuple: fields with mixed STL types sometimes fail to be filled; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1069,usability,error,error,1069,"eck duplicate issues. - [X] Checked for duplicates. ### Description. When having fields with mixed STL types sometimes you run into issues when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it cr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1744,usability,indicat,indicates,1744,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1778,usability,support,supported,1778,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15534:1866,usability,support,supported,1866,"when trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp. #include <ROOT/RNTupleModel.hxx>. #include <ROOT/RNTupleWriter.hxx>. . #include <TSystem.h>. . #include <vector>. #include <variant>. #include <optional>. . using RNTupleModel = ROOT::Experimental::RNTupleModel;. using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. . void ntpl_issue(). {. auto model = RNTupleModel::Create();. . auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");. . auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");. . for (int i = 0; i < 10; i++) {. fldVvar->clear();. . for (int j = 0; j < 5; ++j) {. std::variant<std::optional<int>,float> var(1.0);. fldVvar->emplace_back(var);. }. . ntuple->Fill();. }. }. ```. And this is the error that it produces. ```. Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp. struct S {. operator int() { throw 42; }. };. std::variant<int,float> var;. try {. var = S();. } catch (int) {}. fldVvar->emplace_back(var);. ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534
https://github.com/root-project/root/issues/15537:2483,availability,error,error,2483,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:2720,availability,state,statement,2720,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:2947,availability,state,statement,2947,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:3343,availability,Operat,Operating,3343,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:717,deployability,build,build,717,"[cling] Crash when non-void function does not return a value; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. If you forget a return value in a non-void function, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:723,deployability,build,build-root-Desktop-Debug,723,"[cling] Crash when non-void function does not return a value; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. If you forget a return value in a non-void function, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:885,deployability,build,build,885,"[cling] Crash when non-void function does not return a value; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. If you forget a return value in a non-void function, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:891,deployability,build,build-root-Desktop-Debug,891,"[cling] Crash when non-void function does not return a value; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. If you forget a return value in a non-void function, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1182,deployability,build,build,1182,"ion, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1188,deployability,build,build-root-Desktop-Debug,1188,"g) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1355,deployability,build,build,1355,"=================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSys",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1361,deployability,build,build-root-Desktop-Debug,1361,"==================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: cr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1525,deployability,build,build,1525," 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a va",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1531,deployability,build,build-root-Desktop-Debug,1531,"b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-W",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1694,deployability,build,build,1694," () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1700,deployability,build,build-root-Desktop-Debug,1700,"user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1895,deployability,build,build,1895,"oot-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1901,deployability,build,build-root-Desktop-Debug,1901,"ug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./ba",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:3060,deployability,version,version,3060,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:3260,deployability,build,build,3260,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:3266,deployability,build,build-root-Desktop-Debug,3266,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:3305,deployability,Instal,Installation,3305,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1058,energy efficiency,alloc,allocator,1058,"## Check duplicate issues. - [ ] Checked for duplicates. ### Description. If you forget a return value in a non-void function, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:2174,energy efficiency,core,core,2174,"/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:2720,integrability,state,statement,2720,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:2947,integrability,state,statement,2947,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:3060,integrability,version,version,3060,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:2380,interoperability,share,shared,2380,"ug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Addi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:3060,modifiability,version,version,3060,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:2483,performance,error,error,2483,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:37,reliability,doe,does,37,"[cling] Crash when non-void function does not return a value; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. If you forget a return value in a non-void function, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:217,reliability,doe,does,217,"[cling] Crash when non-void function does not return a value; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. If you forget a return value in a non-void function, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:2508,reliability,doe,does,2508,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:2483,safety,error,error,2483,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:3390,testability,context,context,3390,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:712,usability,user,user,712,"[cling] Crash when non-void function does not return a value; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. If you forget a return value in a non-void function, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:880,usability,user,user,880,"[cling] Crash when non-void function does not return a value; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. If you forget a return value in a non-void function, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1177,usability,user,user,1177," function, ROOT (cling) crashes. This does not happen if you compile via AcLIC. ### Reproducer. ```. int badcast(). {. }. ```. root -l badcast.cpp. ```. ===========================================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1350,usability,user,user,1350,"=======================================. #11 0x00007d4323de7008 in ?? (). #12 0x00007fffe3dd2010 in ?? (). #13 0x00007d4323dea02d in ?? (). #14 0x00007fffe3dd26a0 in ?? (). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1520,usability,user,user,1520,"). #15 0x00005ab8d4e3b860 in ?? (). #16 0x00007fffe3dd26a0 in ?? (). #17 0x00007d431babdda8 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not retur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1689,usability,user,user,1689," const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #18 0x00007d431ba40ddc in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:1890,usability,user,user,1890,"uild-root-Desktop-Debug/lib/libCling.so. #19 0x00007d431ba41527 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #20 0x00007d431bb2eeef in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #21 0x00007d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:2483,usability,error,error,2483,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15537:3255,usability,user,user,3255,"07d431bb3c767 in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #22 0x00007d431bb3e1d9 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #23 0x00007d431bb27790 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so. #24 0x00007d431b7e903e in HandleInterpreterException (metaProcessor=0x5ab8d59e1470, input_line=0x5ab8d6536800 "".X /tmp/./badcast.cpp"", compRes=. 0x7fffe3dd2650: cling::Interpreter::kSuccess, result=0x7fffe3dd26a0) at /opt/root_src/core/metacling/src/TCling.cxx:2438. ===========================================================. ```. root -l badcast.cpp+. ```. root [0] . Processing badcast.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./badcast_cpp.so. In file included from input_line_9:6:. ././badcast.cpp:3:1: error: non-void function does not return a value [-Werror,-Wreturn-type]. }. ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. In file included from /tmp//tmp/badcast_cpp_ACLiC_dict.cxx:41:. /tmp/./badcast.cpp: In function ‘int badcast()’:. /tmp/./badcast.cpp:3:1: warning: no return statement in function returning non-void [-Wreturn-type]. 3 | }. | ^. (int) 1116738714. root [1] . ```. ### ROOT version. ```. ROOT v6.33/01. Built for linuxx8664gcc on May 10 2024, 07:02:39. From heads/cdoxy@v6-31-01-1881-g0b545d9b06. With g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /home/user/build/build-root-Desktop-Debug/bin. ```. ### Installation method. From source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15537
https://github.com/root-project/root/issues/15538:199,deployability,build,build,199,"Enable additional LLVM checks; Fix issues uncovered by enabling `LLVM_ENABLE_ABI_BREAKING_CHECKS`, see https://github.com/root-project/root/pull/15536. I only investigated the one that prevented the build from completing: https://github.com/vgvassilev/clad/pull/893",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15538
https://github.com/root-project/root/issues/15538:185,safety,prevent,prevented,185,"Enable additional LLVM checks; Fix issues uncovered by enabling `LLVM_ENABLE_ABI_BREAKING_CHECKS`, see https://github.com/root-project/root/pull/15536. I only investigated the one that prevented the build from completing: https://github.com/vgvassilev/clad/pull/893",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15538
https://github.com/root-project/root/issues/15538:210,safety,compl,completing,210,"Enable additional LLVM checks; Fix issues uncovered by enabling `LLVM_ENABLE_ABI_BREAKING_CHECKS`, see https://github.com/root-project/root/pull/15536. I only investigated the one that prevented the build from completing: https://github.com/vgvassilev/clad/pull/893",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15538
https://github.com/root-project/root/issues/15538:185,security,preven,prevented,185,"Enable additional LLVM checks; Fix issues uncovered by enabling `LLVM_ENABLE_ABI_BREAKING_CHECKS`, see https://github.com/root-project/root/pull/15536. I only investigated the one that prevented the build from completing: https://github.com/vgvassilev/clad/pull/893",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15538
https://github.com/root-project/root/issues/15538:210,security,compl,completing,210,"Enable additional LLVM checks; Fix issues uncovered by enabling `LLVM_ENABLE_ABI_BREAKING_CHECKS`, see https://github.com/root-project/root/pull/15536. I only investigated the one that prevented the build from completing: https://github.com/vgvassilev/clad/pull/893",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15538
https://github.com/root-project/root/pull/15539:24,deployability,version,version,24,[BP][6.32][core] Change version string to X.Y.Z; BP of https://github.com/root-project/root/pull/15164.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15539
https://github.com/root-project/root/pull/15539:11,energy efficiency,core,core,11,[BP][6.32][core] Change version string to X.Y.Z; BP of https://github.com/root-project/root/pull/15164.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15539
https://github.com/root-project/root/pull/15539:24,integrability,version,version,24,[BP][6.32][core] Change version string to X.Y.Z; BP of https://github.com/root-project/root/pull/15164.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15539
https://github.com/root-project/root/pull/15539:24,modifiability,version,version,24,[BP][6.32][core] Change version string to X.Y.Z; BP of https://github.com/root-project/root/pull/15164.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15539
https://github.com/root-project/root/pull/15542:22,deployability,build,builds,22,[ci] Add Ubuntu 24.04 builds (read before merging!); This PR can be merged only when Ubu24 tests are all passing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15542
https://github.com/root-project/root/pull/15542:91,safety,test,tests,91,[ci] Add Ubuntu 24.04 builds (read before merging!); This PR can be merged only when Ubu24 tests are all passing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15542
https://github.com/root-project/root/pull/15542:91,testability,test,tests,91,[ci] Add Ubuntu 24.04 builds (read before merging!); This PR can be merged only when Ubu24 tests are all passing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15542
https://github.com/root-project/root/pull/15543:958,deployability,depend,depend,958,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:1019,deployability,upgrad,upgrading,1019,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:5,energy efficiency,Optim,Optimize,5,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:145,energy efficiency,model,models,145,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:321,energy efficiency,optim,optimization,321,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:868,energy efficiency,Reduc,Reduce,868,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:927,energy efficiency,optim,optimization,927,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:958,integrability,depend,depend,958,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:958,modifiability,depend,depend,958,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:1019,modifiability,upgrad,upgrading,1019,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:5,performance,Optimiz,Optimize,5,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:321,performance,optimiz,optimization,321,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:883,performance,time,time,883,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:927,performance,optimiz,optimization,927,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:950,reliability,doe,doesn,950,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:662,safety,test,testHistFactory,662,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:684,safety,test,test,684,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:958,safety,depend,depend,958,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:145,security,model,models,145,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:122,testability,context,context,122,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:662,testability,test,testHistFactory,662,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:679,testability,unit,unit,679,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:684,testability,test,test,684,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:849,testability,plan,plan,849,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15543:958,testability,depend,depend,958,"[RF] Optimize code generated from `PiecewiseInterpolation` for use in AD; The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15543
https://github.com/root-project/root/pull/15544:50,deployability,scale,scale,50,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:240,deployability,build,build,240,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:378,deployability,Upgrad,Upgrade,378,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:498,deployability,build,build,498,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:802,deployability,log,log,802,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:806,deployability,scale,scales,806,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:50,energy efficiency,scale,scale,50,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:312,energy efficiency,Draw,Draw,312,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:541,energy efficiency,draw,draw,541,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:567,energy efficiency,draw,draw,567,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:648,energy efficiency,draw,drawing,648,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:745,energy efficiency,draw,draw,745,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:806,energy efficiency,scale,scales,806,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:820,energy efficiency,draw,drawings,820,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:914,energy efficiency,draw,draw,914,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:937,energy efficiency,draw,drawingJSON,937,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:1012,energy efficiency,draw,draw,1012,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:50,modifiability,scal,scale,50,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:378,modifiability,Upgrad,Upgrade,378,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:806,modifiability,scal,scales,806,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:50,performance,scale,scale,50,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:806,performance,scale,scales,806,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:802,safety,log,log,802,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:802,security,log,log,802,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:802,testability,log,log,802,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:218,usability,user,userData,218,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:426,usability,support,support,426,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15544:660,usability,custom,custom,660,"[jsroot] newer three.js, many fixes; 1. Correctly scale size of axis ticks - take into account NDC axis length. 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296. 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303. 4. Draw histogram title afterwards - place in front of stats box. 5. Upgrade three.js r158 -> r162, last with WebGL1 support. 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js. 7. Fix - correctly draw only grids with AXIG draw option. 8. Fix - let read object from TFile with empty name. 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297. 10. Fix - draw at least line for TGraphErrors ROOT-8131. 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306. 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307. 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15544
https://github.com/root-project/root/pull/15545:23,energy efficiency,current,current,23,[skip ci][doc] Clarify current limitation of TMethodCall; fixes #8148.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15545
https://github.com/root-project/root/pull/15546:33,energy efficiency,current,current,33,[skip ci][BP][6.32][doc] Clarify current limitation of TMethodCall; BP of https://github.com/root-project/root/pull/15545.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15546
https://github.com/root-project/root/issues/15549:324,availability,Error,Error,324,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:616,availability,Operat,Operating,616,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:135,deployability,version,version,135,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:187,deployability,build,build,187,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:223,deployability,version,version,223,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:415,deployability,INSTAL,INSTALL,415,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:472,deployability,build,build,472,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:503,deployability,version,version,503,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:572,deployability,Instal,Installation,572,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:593,deployability,build,build,593,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:135,integrability,version,version,135,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:223,integrability,version,version,223,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:352,integrability,messag,message,352,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:503,integrability,version,version,503,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:352,interoperability,messag,message,352,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:135,modifiability,version,version,135,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:223,modifiability,version,version,223,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:251,modifiability,maintain,maintained,251,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:503,modifiability,version,version,503,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:324,performance,Error,Error,324,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:251,safety,maintain,maintained,251,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:324,safety,Error,Error,324,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:661,testability,context,context,661,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:266,usability,support,supported,266,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/issues/15549:324,usability,Error,Error,324,CMakeLists.txt CMAKE_BINARY_DIR not working correctly; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. build on macos . cmake . ```. cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake). ```. ```. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. ```. ### Reproducer. mkdir build. cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15549
https://github.com/root-project/root/pull/15550:118,energy efficiency,load,loads,118,"[webgui] fix handling of local displays like qt5 or cef; When reloading web widget in QT5/QT6/CEF widget,. new widget loads faster than old connection is closed. Therefore allow new key checks when loading HTML page. Remove debug output from firefox start script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15550
https://github.com/root-project/root/pull/15550:198,energy efficiency,load,loading,198,"[webgui] fix handling of local displays like qt5 or cef; When reloading web widget in QT5/QT6/CEF widget,. new widget loads faster than old connection is closed. Therefore allow new key checks when loading HTML page. Remove debug output from firefox start script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15550
https://github.com/root-project/root/pull/15550:118,performance,load,loads,118,"[webgui] fix handling of local displays like qt5 or cef; When reloading web widget in QT5/QT6/CEF widget,. new widget loads faster than old connection is closed. Therefore allow new key checks when loading HTML page. Remove debug output from firefox start script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15550
https://github.com/root-project/root/pull/15550:198,performance,load,loading,198,"[webgui] fix handling of local displays like qt5 or cef; When reloading web widget in QT5/QT6/CEF widget,. new widget loads faster than old connection is closed. Therefore allow new key checks when loading HTML page. Remove debug output from firefox start script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15550
https://github.com/root-project/root/pull/15550:76,usability,widget,widget,76,"[webgui] fix handling of local displays like qt5 or cef; When reloading web widget in QT5/QT6/CEF widget,. new widget loads faster than old connection is closed. Therefore allow new key checks when loading HTML page. Remove debug output from firefox start script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15550
https://github.com/root-project/root/pull/15550:98,usability,widget,widget,98,"[webgui] fix handling of local displays like qt5 or cef; When reloading web widget in QT5/QT6/CEF widget,. new widget loads faster than old connection is closed. Therefore allow new key checks when loading HTML page. Remove debug output from firefox start script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15550
https://github.com/root-project/root/pull/15550:111,usability,widget,widget,111,"[webgui] fix handling of local displays like qt5 or cef; When reloading web widget in QT5/QT6/CEF widget,. new widget loads faster than old connection is closed. Therefore allow new key checks when loading HTML page. Remove debug output from firefox start script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15550
https://github.com/root-project/root/pull/15550:154,usability,close,closed,154,"[webgui] fix handling of local displays like qt5 or cef; When reloading web widget in QT5/QT6/CEF widget,. new widget loads faster than old connection is closed. Therefore allow new key checks when loading HTML page. Remove debug output from firefox start script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15550
https://github.com/root-project/root/pull/15552:31,deployability,version,version,31,[BP][6.32] [cmd] add recursive version of rootls; BP of https://github.com/root-project/root/issues/13659,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15552
https://github.com/root-project/root/pull/15552:31,integrability,version,version,31,[BP][6.32] [cmd] add recursive version of rootls; BP of https://github.com/root-project/root/issues/13659,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15552
https://github.com/root-project/root/pull/15552:31,modifiability,version,version,31,[BP][6.32] [cmd] add recursive version of rootls; BP of https://github.com/root-project/root/issues/13659,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15552
https://github.com/root-project/root/pull/15553:300,deployability,version,version,300,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:393,deployability,version,version,393,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:474,deployability,version,version,474,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:573,deployability,updat,updated,573,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:189,integrability,schema,schema,189,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:300,integrability,version,version,300,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:393,integrability,version,version,393,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:474,integrability,version,version,474,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:374,interoperability,compatib,compatibility,374,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:300,modifiability,version,version,300,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:393,modifiability,version,version,393,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:474,modifiability,version,version,474,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:81,performance,disk,disk,81,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:170,performance,I/O,I/O,170,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:507,reliability,stabil,stabilization,507,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:543,safety,test,tested,543,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:573,safety,updat,updated,573,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:16,security,checksum,checksum,16,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:44,security,Checksum,Checksum,44,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:573,security,updat,updated,573,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:543,testability,test,tested,543,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:245,usability,custom,custom,245,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15553:461,usability,Support,Support,461,"[ntuple] remove checksum field from anchor; Checksum is now excluded from the on-disk representation and it's not. stored in the anchor. This allows to leverage the ROOT I/O machinery for. schema evolution rather than having to rely entirely on custom code in. RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4. will be preserved for a while for easing the transition. Support for. version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15553
https://github.com/root-project/root/pull/15554:469,deployability,infrastructur,infrastructure,469,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15554:122,energy efficiency,current,current,122,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15554:25,interoperability,distribut,distributed,25,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15554:514,interoperability,distribut,distributed,514,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15554:603,safety,avoid,avoids,603,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15554:681,safety,input,input,681,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15554:742,safety,input,input,742,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15554:767,safety,input,input,767,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15554:681,usability,input,input,681,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15554:742,usability,input,input,742,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15554:767,usability,input,input,767,"Use data source label in distributed HeadNode factory; Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:. * The dataframe will process a TTree dataset. * The dataframe will process an empty dataset. * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15554
https://github.com/root-project/root/pull/15555:29,deployability,version,version,29,[jsroot] adopt latest jsroot version [6.32]; Backport of #15544 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15555
https://github.com/root-project/root/pull/15555:29,integrability,version,version,29,[jsroot] adopt latest jsroot version [6.32]; Backport of #15544 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15555
https://github.com/root-project/root/pull/15555:29,modifiability,version,version,29,[jsroot] adopt latest jsroot version [6.32]; Backport of #15544 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15555
https://github.com/root-project/root/pull/15556:183,modifiability,extens,extension,183,"[ntuple] store streamer info of unsplit fields; Follow-up of #14728. Stores the streamer info records seen during serialization of unsplit fields in the extra type information of the extension header. To this end, proper serialization and deserialization of the extra type information frame in the header / extension header is implemented. This will be accompanied by a roottest PR (TODO)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15556
https://github.com/root-project/root/pull/15556:307,modifiability,extens,extension,307,"[ntuple] store streamer info of unsplit fields; Follow-up of #14728. Stores the streamer info records seen during serialization of unsplit fields in the extra type information of the extension header. To this end, proper serialization and deserialization of the extra type information frame in the header / extension header is implemented. This will be accompanied by a roottest PR (TODO)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15556
https://github.com/root-project/root/pull/15557:464,availability,sli,slightly,464,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:686,deployability,updat,update,686,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:104,modifiability,reu,reusability,104,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:473,modifiability,refact,refactor,473,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:473,performance,refactor,refactor,473,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:464,reliability,sli,slightly,464,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:544,safety,test,tests,544,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:686,safety,updat,update,686,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:686,security,updat,update,686,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:84,testability,simpl,simplicity,84,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:544,testability,test,tests,544,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:580,testability,coverag,coverage,580,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:84,usability,simpl,simplicity,84,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15557:387,usability,custom,custom,387,"[RF] Put all free RooFit math functions for code generation in a single header; For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15557
https://github.com/root-project/root/pull/15558:236,deployability,updat,updated,236,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS; …avoid clash with classes that CMS Combine will eventually provide. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15558
https://github.com/root-project/root/pull/15558:121,integrability,event,eventually,121,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS; …avoid clash with classes that CMS Combine will eventually provide. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15558
https://github.com/root-project/root/pull/15558:39,safety,avoid,avoid,39,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS; …avoid clash with classes that CMS Combine will eventually provide. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15558
https://github.com/root-project/root/pull/15558:74,safety,avoid,avoid,74,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS; …avoid clash with classes that CMS Combine will eventually provide. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15558
https://github.com/root-project/root/pull/15558:206,safety,test,tested,206,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS; …avoid clash with classes that CMS Combine will eventually provide. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15558
https://github.com/root-project/root/pull/15558:236,safety,updat,updated,236,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS; …avoid clash with classes that CMS Combine will eventually provide. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15558
https://github.com/root-project/root/pull/15558:236,security,updat,updated,236,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS; …avoid clash with classes that CMS Combine will eventually provide. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15558
https://github.com/root-project/root/pull/15558:206,testability,test,tested,206,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS; …avoid clash with classes that CMS Combine will eventually provide. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15558
https://github.com/root-project/root/pull/15559:159,deployability,releas,release,159,"Add doc comments to R__ASSERT/CHECK ; # This Pull request:. Adds brief documentation to `R__ASSERT` and `R__CHECK` underlining how they do not get stripped in release mode (which might be unexpected for some users). Additionally, it uses `R__likely` for the check itself, since the condition is expected to be true. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15559
https://github.com/root-project/root/pull/15559:367,deployability,updat,updated,367,"Add doc comments to R__ASSERT/CHECK ; # This Pull request:. Adds brief documentation to `R__ASSERT` and `R__CHECK` underlining how they do not get stripped in release mode (which might be unexpected for some users). Additionally, it uses `R__likely` for the check itself, since the condition is expected to be true. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15559
https://github.com/root-project/root/pull/15559:337,safety,test,tested,337,"Add doc comments to R__ASSERT/CHECK ; # This Pull request:. Adds brief documentation to `R__ASSERT` and `R__CHECK` underlining how they do not get stripped in release mode (which might be unexpected for some users). Additionally, it uses `R__likely` for the check itself, since the condition is expected to be true. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15559
https://github.com/root-project/root/pull/15559:367,safety,updat,updated,367,"Add doc comments to R__ASSERT/CHECK ; # This Pull request:. Adds brief documentation to `R__ASSERT` and `R__CHECK` underlining how they do not get stripped in release mode (which might be unexpected for some users). Additionally, it uses `R__likely` for the check itself, since the condition is expected to be true. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15559
https://github.com/root-project/root/pull/15559:367,security,updat,updated,367,"Add doc comments to R__ASSERT/CHECK ; # This Pull request:. Adds brief documentation to `R__ASSERT` and `R__CHECK` underlining how they do not get stripped in release mode (which might be unexpected for some users). Additionally, it uses `R__likely` for the check itself, since the condition is expected to be true. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15559
https://github.com/root-project/root/pull/15559:337,testability,test,tested,337,"Add doc comments to R__ASSERT/CHECK ; # This Pull request:. Adds brief documentation to `R__ASSERT` and `R__CHECK` underlining how they do not get stripped in release mode (which might be unexpected for some users). Additionally, it uses `R__likely` for the check itself, since the condition is expected to be true. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15559
https://github.com/root-project/root/pull/15559:71,usability,document,documentation,71,"Add doc comments to R__ASSERT/CHECK ; # This Pull request:. Adds brief documentation to `R__ASSERT` and `R__CHECK` underlining how they do not get stripped in release mode (which might be unexpected for some users). Additionally, it uses `R__likely` for the check itself, since the condition is expected to be true. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15559
https://github.com/root-project/root/pull/15559:208,usability,user,users,208,"Add doc comments to R__ASSERT/CHECK ; # This Pull request:. Adds brief documentation to `R__ASSERT` and `R__CHECK` underlining how they do not get stripped in release mode (which might be unexpected for some users). Additionally, it uses `R__likely` for the check itself, since the condition is expected to be true. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15559
https://github.com/root-project/root/pull/15560:118,deployability,version,version,118,[reve] v6-32-00 backport: Fix tone mapping for transaparent objects; This is a backport of #15514. It uses the newest version of RenderCore packed in RenderCore-1.4.tar.gz. Related render core issue https://github.com/UL-FRI-LGM/RenderCore/pull/19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15560
https://github.com/root-project/root/pull/15560:188,energy efficiency,core,core,188,[reve] v6-32-00 backport: Fix tone mapping for transaparent objects; This is a backport of #15514. It uses the newest version of RenderCore packed in RenderCore-1.4.tar.gz. Related render core issue https://github.com/UL-FRI-LGM/RenderCore/pull/19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15560
https://github.com/root-project/root/pull/15560:118,integrability,version,version,118,[reve] v6-32-00 backport: Fix tone mapping for transaparent objects; This is a backport of #15514. It uses the newest version of RenderCore packed in RenderCore-1.4.tar.gz. Related render core issue https://github.com/UL-FRI-LGM/RenderCore/pull/19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15560
https://github.com/root-project/root/pull/15560:118,modifiability,version,version,118,[reve] v6-32-00 backport: Fix tone mapping for transaparent objects; This is a backport of #15514. It uses the newest version of RenderCore packed in RenderCore-1.4.tar.gz. Related render core issue https://github.com/UL-FRI-LGM/RenderCore/pull/19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15560
https://github.com/root-project/root/pull/15560:140,modifiability,pac,packed,140,[reve] v6-32-00 backport: Fix tone mapping for transaparent objects; This is a backport of #15514. It uses the newest version of RenderCore packed in RenderCore-1.4.tar.gz. Related render core issue https://github.com/UL-FRI-LGM/RenderCore/pull/19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15560
https://github.com/root-project/root/pull/15561:159,deployability,version,version,159,[reve] v6-30-00 backport: Fix tone mapping for transaparent objects; This is a backport of https://github.com/root-project/root/pull/15514. It uses the newest version of RenderCore packed in RenderCore-1.4.tar.gz. Related render core issue https://github.com/UL-FRI-LGM/RenderCore/pull/19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15561
https://github.com/root-project/root/pull/15561:229,energy efficiency,core,core,229,[reve] v6-30-00 backport: Fix tone mapping for transaparent objects; This is a backport of https://github.com/root-project/root/pull/15514. It uses the newest version of RenderCore packed in RenderCore-1.4.tar.gz. Related render core issue https://github.com/UL-FRI-LGM/RenderCore/pull/19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15561
https://github.com/root-project/root/pull/15561:159,integrability,version,version,159,[reve] v6-30-00 backport: Fix tone mapping for transaparent objects; This is a backport of https://github.com/root-project/root/pull/15514. It uses the newest version of RenderCore packed in RenderCore-1.4.tar.gz. Related render core issue https://github.com/UL-FRI-LGM/RenderCore/pull/19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15561
https://github.com/root-project/root/pull/15561:159,modifiability,version,version,159,[reve] v6-30-00 backport: Fix tone mapping for transaparent objects; This is a backport of https://github.com/root-project/root/pull/15514. It uses the newest version of RenderCore packed in RenderCore-1.4.tar.gz. Related render core issue https://github.com/UL-FRI-LGM/RenderCore/pull/19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15561
https://github.com/root-project/root/pull/15561:181,modifiability,pac,packed,181,[reve] v6-30-00 backport: Fix tone mapping for transaparent objects; This is a backport of https://github.com/root-project/root/pull/15514. It uses the newest version of RenderCore packed in RenderCore-1.4.tar.gz. Related render core issue https://github.com/UL-FRI-LGM/RenderCore/pull/19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15561
https://github.com/root-project/root/pull/15562:27,safety,test,testing,27,Spurrious change to enable testing CI; Nothing to see.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15562
https://github.com/root-project/root/pull/15562:27,testability,test,testing,27,Spurrious change to enable testing CI; Nothing to see.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15562
https://github.com/root-project/root/pull/15563:0,deployability,build,build,0,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:13,deployability,build,building,13,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:93,deployability,build,build,93,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:230,deployability,Build,BuildingADistribution,230,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:299,deployability,API,API,299,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:1023,deployability,build,building,1023,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:299,integrability,API,API,299,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:519,integrability,PUB,PUBLIC,519,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:526,integrability,interfac,interface,526,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:662,integrability,compon,components,662,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:44,interoperability,share,shared,44,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:115,interoperability,share,shared,115,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:299,interoperability,API,API,299,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:319,interoperability,share,shared,319,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:389,interoperability,share,shared,389,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:526,interoperability,interfac,interface,526,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:548,interoperability,share,shared,548,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:662,interoperability,compon,components,662,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:526,modifiability,interfac,interface,526,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:662,modifiability,compon,components,662,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:1010,modifiability,pac,packages,1010,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:963,safety,test,tested,963,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:306,security,expos,exposed,306,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:963,testability,test,tested,963,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:76,usability,support,supported,76,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:773,usability,tool,tools,773,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:815,usability,tool,tools,815,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15563:856,usability,tool,tools,856,"build: Allow building Cling using the Clang shared library.; The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED. [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library. * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp. * lib/MetaProcessor/CMakeLists.txt: Likewise. * lib/Utils/CMakeLists.txt: Likewise. * tools/Jupyter/CMakeLists.txt: Likewise. * tools/driver/CMakeLists.txt: Likewise. * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally. -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563
https://github.com/root-project/root/pull/15564:533,deployability,updat,updated,533,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:65,integrability,translat,translation,65,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:65,interoperability,translat,translation,65,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:675,modifiability,Pac,Package,675,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:205,performance,memor,memory,205,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:363,performance,memor,memory,363,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:587,reliability,doe,doesn,587,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:56,safety,Compl,Complete,56,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:488,safety,test,tested,488,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:533,safety,updat,updated,533,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:56,security,Compl,Complete,56,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:533,security,updat,updated,533,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:488,testability,test,tested,488,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:205,usability,memor,memory,205,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:305,usability,help,helps,305,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15564:363,usability,memor,memory,363,"Geometry Python Tutorials; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by `pyroot`, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the `pygeom` tutorials, if so. ## Checklist:. - [ yes] tested changes locally # Very much. - [ yes] updated the docs (if necessary). This PR fixes # . It doesn't fix anything but adds alternatives approach to use `pyroot` with . the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15564
https://github.com/root-project/root/pull/15565:141,deployability,updat,updated,141,FOAM python tutorials; # This Pull request:. Translated FOAM tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15565
https://github.com/root-project/root/pull/15565:45,integrability,Translat,Translated,45,FOAM python tutorials; # This Pull request:. Translated FOAM tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15565
https://github.com/root-project/root/pull/15565:45,interoperability,Translat,Translated,45,FOAM python tutorials; # This Pull request:. Translated FOAM tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15565
https://github.com/root-project/root/pull/15565:108,safety,test,tested,108,FOAM python tutorials; # This Pull request:. Translated FOAM tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15565
https://github.com/root-project/root/pull/15565:141,safety,updat,updated,141,FOAM python tutorials; # This Pull request:. Translated FOAM tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15565
https://github.com/root-project/root/pull/15565:141,security,updat,updated,141,FOAM python tutorials; # This Pull request:. Translated FOAM tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15565
https://github.com/root-project/root/pull/15565:108,testability,test,tested,108,FOAM python tutorials; # This Pull request:. Translated FOAM tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15565
https://github.com/root-project/root/pull/15566:154,deployability,updat,updated,154,Matrix Python Tutorials; # This Pull request:. Adds translation of Matrix Tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [yes ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15566
https://github.com/root-project/root/pull/15566:52,integrability,translat,translation,52,Matrix Python Tutorials; # This Pull request:. Adds translation of Matrix Tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [yes ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15566
https://github.com/root-project/root/pull/15566:52,interoperability,translat,translation,52,Matrix Python Tutorials; # This Pull request:. Adds translation of Matrix Tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [yes ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15566
https://github.com/root-project/root/pull/15566:121,safety,test,tested,121,Matrix Python Tutorials; # This Pull request:. Adds translation of Matrix Tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [yes ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15566
https://github.com/root-project/root/pull/15566:154,safety,updat,updated,154,Matrix Python Tutorials; # This Pull request:. Adds translation of Matrix Tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [yes ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15566
https://github.com/root-project/root/pull/15566:154,security,updat,updated,154,Matrix Python Tutorials; # This Pull request:. Adds translation of Matrix Tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [yes ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15566
https://github.com/root-project/root/pull/15566:121,testability,test,tested,121,Matrix Python Tutorials; # This Pull request:. Adds translation of Matrix Tutorials into Python. ## Checklist:. - [ yes] tested changes locally. - [yes ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15566
https://github.com/root-project/root/pull/15567:153,deployability,updat,updated,153,Physics python tutorials; # This Pull request:. Adds a Physics Tutorials translation into Python. ## Checklist:. - [yes] tested changes locally. - [yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15567
https://github.com/root-project/root/pull/15567:73,integrability,translat,translation,73,Physics python tutorials; # This Pull request:. Adds a Physics Tutorials translation into Python. ## Checklist:. - [yes] tested changes locally. - [yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15567
https://github.com/root-project/root/pull/15567:73,interoperability,translat,translation,73,Physics python tutorials; # This Pull request:. Adds a Physics Tutorials translation into Python. ## Checklist:. - [yes] tested changes locally. - [yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15567
https://github.com/root-project/root/pull/15567:121,safety,test,tested,121,Physics python tutorials; # This Pull request:. Adds a Physics Tutorials translation into Python. ## Checklist:. - [yes] tested changes locally. - [yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15567
https://github.com/root-project/root/pull/15567:153,safety,updat,updated,153,Physics python tutorials; # This Pull request:. Adds a Physics Tutorials translation into Python. ## Checklist:. - [yes] tested changes locally. - [yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15567
https://github.com/root-project/root/pull/15567:153,security,updat,updated,153,Physics python tutorials; # This Pull request:. Adds a Physics Tutorials translation into Python. ## Checklist:. - [yes] tested changes locally. - [yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15567
https://github.com/root-project/root/pull/15567:121,testability,test,tested,121,Physics python tutorials; # This Pull request:. Adds a Physics Tutorials translation into Python. ## Checklist:. - [yes] tested changes locally. - [yes] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15567
https://github.com/root-project/root/pull/15570:204,deployability,automat,automatic,204,[v632] Backport some recent fixes and improvements; Backports of:. * https://github.com/root-project/root/pull/10303. * https://github.com/root-project/root/pull/14112. Plus some other commits related to automatic differentiation in RooFit.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15570
https://github.com/root-project/root/pull/15570:204,testability,automat,automatic,204,[v632] Backport some recent fixes and improvements; Backports of:. * https://github.com/root-project/root/pull/10303. * https://github.com/root-project/root/pull/14112. Plus some other commits related to automatic differentiation in RooFit.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15570
https://github.com/root-project/root/pull/15573:534,deployability,updat,updated,534,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:19,integrability,translat,translated,19,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:82,integrability,translat,translation,82,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:19,interoperability,translat,translated,19,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:82,interoperability,translat,translation,82,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:730,modifiability,Pac,Package,730,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:222,performance,memor,memory,222,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:378,performance,memor,memory,378,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:576,performance,synch,synchronized,576,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:645,reliability,doe,doesn,645,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:73,safety,Compl,Complete,73,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:501,safety,test,tested,501,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:534,safety,updat,updated,534,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:73,security,Compl,Complete,73,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:534,security,updat,updated,534,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:501,testability,test,tested,501,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:222,usability,memor,memory,222,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:320,usability,help,helps,320,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15573:378,usability,memor,memory,378,"Geometry tutorials translated into Python.; # This Pull request:. Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:. It runs, it re-reruns, and it gets out of IPython without crashing memory. The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore. Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally. - [ yes] updated the docs (if necessary). - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with. the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15573
https://github.com/root-project/root/pull/15574:144,deployability,updat,updated,144,Foam python tutorials; # This Pull request:. Addition of FOAM tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15574
https://github.com/root-project/root/pull/15574:187,performance,synch,synchronized,187,Foam python tutorials; # This Pull request:. Addition of FOAM tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15574
https://github.com/root-project/root/pull/15574:110,safety,test,tested,110,Foam python tutorials; # This Pull request:. Addition of FOAM tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15574
https://github.com/root-project/root/pull/15574:144,safety,updat,updated,144,Foam python tutorials; # This Pull request:. Addition of FOAM tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15574
https://github.com/root-project/root/pull/15574:144,security,updat,updated,144,Foam python tutorials; # This Pull request:. Addition of FOAM tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15574
https://github.com/root-project/root/pull/15574:110,testability,test,tested,110,Foam python tutorials; # This Pull request:. Addition of FOAM tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15574
https://github.com/root-project/root/pull/15575:147,deployability,updat,updated,147,Matrix python tutorials; # This Pull request:. Translated Matrix-Tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15575
https://github.com/root-project/root/pull/15575:47,integrability,Translat,Translated,47,Matrix python tutorials; # This Pull request:. Translated Matrix-Tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15575
https://github.com/root-project/root/pull/15575:47,interoperability,Translat,Translated,47,Matrix python tutorials; # This Pull request:. Translated Matrix-Tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15575
https://github.com/root-project/root/pull/15575:190,performance,synch,synchronized,190,Matrix python tutorials; # This Pull request:. Translated Matrix-Tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15575
https://github.com/root-project/root/pull/15575:113,safety,test,tested,113,Matrix python tutorials; # This Pull request:. Translated Matrix-Tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15575
https://github.com/root-project/root/pull/15575:147,safety,updat,updated,147,Matrix python tutorials; # This Pull request:. Translated Matrix-Tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15575
https://github.com/root-project/root/pull/15575:147,security,updat,updated,147,Matrix python tutorials; # This Pull request:. Translated Matrix-Tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15575
https://github.com/root-project/root/pull/15575:113,testability,test,tested,113,Matrix python tutorials; # This Pull request:. Translated Matrix-Tutorials into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15575
https://github.com/root-project/root/pull/15576:146,deployability,updat,updated,146,Physics python tutorials; # This Pull request:. Adds the Physics Tutorial into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15576
https://github.com/root-project/root/pull/15576:189,performance,synch,synchronized,189,Physics python tutorials; # This Pull request:. Adds the Physics Tutorial into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15576
https://github.com/root-project/root/pull/15576:112,safety,test,tested,112,Physics python tutorials; # This Pull request:. Adds the Physics Tutorial into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15576
https://github.com/root-project/root/pull/15576:146,safety,updat,updated,146,Physics python tutorials; # This Pull request:. Adds the Physics Tutorial into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15576
https://github.com/root-project/root/pull/15576:146,security,updat,updated,146,Physics python tutorials; # This Pull request:. Adds the Physics Tutorial into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15576
https://github.com/root-project/root/pull/15576:112,testability,test,tested,112,Physics python tutorials; # This Pull request:. Adds the Physics Tutorial into Python. ## Checklist:. - [ yes ] tested changes locally. - [ yes ] updated the docs (if necessary). - [ yes ] synchronized forked with master(latest-stable).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15576
https://github.com/root-project/root/pull/15578:1094,availability,down,down,1094,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1148,availability,error,errorCode,1148,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1217,availability,error,errorCode,1217,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1239,availability,error,errorCode,1239,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:175,deployability,fail,fail,175,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:223,deployability,log,log,223,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:282,deployability,log,log,282,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:352,deployability,log,log,352,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1463,deployability,fail,failing,1463,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:905,energy efficiency,CPU,CPU,905,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:145,integrability,messag,message,145,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:881,integrability,event,event,881,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:96,interoperability,specif,specific,96,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:145,interoperability,messag,message,145,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:188,interoperability,platform,platforms,188,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:8,modifiability,scenario,scenario,8,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:105,modifiability,scenario,scenario,105,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:905,performance,CPU,CPU,905,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1148,performance,error,errorCode,1148,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1217,performance,error,errorCode,1217,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1239,performance,error,errorCode,1239,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:175,reliability,fail,fail,175,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1463,reliability,fail,failing,1463,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:83,safety,test,test,83,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:158,safety,test,test,158,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:223,safety,log,log,223,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:282,safety,log,log,282,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:352,safety,log,log,352,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1071,safety,except,exception,1071,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1148,safety,error,errorCode,1148,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1217,safety,error,errorCode,1217,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1239,safety,error,errorCode,1239,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1471,safety,test,tests,1471,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:223,security,log,log,223,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:282,security,log,log,282,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:352,security,log,log,352,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:83,testability,test,test,83,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:158,testability,test,test,158,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:223,testability,log,log,223,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:282,testability,log,log,282,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:352,testability,log,log,352,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1471,testability,test,tests,1471,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:493,usability,User,Users,493,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:735,usability,User,Users,735,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1148,usability,error,errorCode,1148,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1217,usability,error,errorCode,1217,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/pull/15578:1239,usability,error,errorCode,1239,"Fix one scenario of RDataFrame JIT and explicit multithreading; For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like. ```. Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed). ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing. ```. root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);. root [1] gInterpreter->Calc("""", &errorCode);. root [2] errorCode. (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2. ```. And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15578
https://github.com/root-project/root/issues/15579:24,availability,slo,slowdown,24,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:146,availability,slo,slowdown,146,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:292,availability,Slo,Slowdown,292,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:389,availability,slo,slowdown,389,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:1228,availability,Operat,Operating,1228,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:301,deployability,observ,observed,301,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:700,deployability,version,version,700,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:795,deployability,version,version,795,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:1046,deployability,version,version,1046,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:1184,deployability,Instal,Installation,1184,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:1205,deployability,build,build,1205,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:43,integrability,event,event,43,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:185,integrability,event,event,185,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:700,integrability,version,version,700,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:795,integrability,version,version,795,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:908,integrability,event,eventgen,908,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:1046,integrability,version,version,1046,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:700,modifiability,version,version,700,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:795,modifiability,version,version,795,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:1046,modifiability,version,version,1046,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:0,performance,Perform,Performance,0,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:251,performance,time,time,251,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:603,performance,perform,performance,603,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:892,performance,time,time,892,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:24,reliability,slo,slowdown,24,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:146,reliability,slo,slowdown,146,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:292,reliability,Slo,Slowdown,292,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:389,reliability,slo,slowdown,389,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:12,testability,regress,regression,12,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:301,testability,observ,observed,301,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:1268,testability,context,context,1268,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:0,usability,Perform,Performance,0,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/issues/15579:603,usability,perform,performance,603,"Performance regression (slowdown) in ALICE event generation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. 10-20fold slowdown of running a particular ALICE event generation process, where the generator is compiled just-in-time from a ROOT macro (see reproducer). Slowdown observed when switching from ROOT tag 6.28.04 to 6.28.08. In particular, bisecting this slowdown shows that it is caused by this commit https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 (from #11631). Reverting this single commit brings back the original performance. ### Reproducer. On lxplus7.cern.ch, run:. ```. #!/usr/bin/env bash. # good software version. /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 > env.txt. # bad software version. #/cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1 > env.txt. source env.txt. time o2-sim-dpl-eventgen --nEvents 5 --generator external --configFile ${O2DPG_ROOT}/MC/config/PWGEM/ini/GeneratorEMCocktail.ini --seed 11. ```. ### ROOT version. Everything having https://github.com/root-project/root/pull/11631/commits/4e4545fcd4dcb80af05cefd9747f7f585fbe75d3 included. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579
https://github.com/root-project/root/pull/15580:386,deployability,updat,updated,386,"[ntuple] Make RNTupleFileWriter::Recreate/Append return unique_ptr; Also apply clang-format to the involved files in the process. ## Changes or fixes:. `RNTupleFileWriter::Recreate` and `RNTupleFileWriter::Append ` now return a `unique_ptr` rather than a raw pointer, to make it obvious that the caller gets ownership of that pointer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15580
https://github.com/root-project/root/pull/15580:85,interoperability,format,format,85,"[ntuple] Make RNTupleFileWriter::Recreate/Append return unique_ptr; Also apply clang-format to the involved files in the process. ## Changes or fixes:. `RNTupleFileWriter::Recreate` and `RNTupleFileWriter::Append ` now return a `unique_ptr` rather than a raw pointer, to make it obvious that the caller gets ownership of that pointer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15580
https://github.com/root-project/root/pull/15580:356,safety,test,tested,356,"[ntuple] Make RNTupleFileWriter::Recreate/Append return unique_ptr; Also apply clang-format to the involved files in the process. ## Changes or fixes:. `RNTupleFileWriter::Recreate` and `RNTupleFileWriter::Append ` now return a `unique_ptr` rather than a raw pointer, to make it obvious that the caller gets ownership of that pointer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15580
https://github.com/root-project/root/pull/15580:386,safety,updat,updated,386,"[ntuple] Make RNTupleFileWriter::Recreate/Append return unique_ptr; Also apply clang-format to the involved files in the process. ## Changes or fixes:. `RNTupleFileWriter::Recreate` and `RNTupleFileWriter::Append ` now return a `unique_ptr` rather than a raw pointer, to make it obvious that the caller gets ownership of that pointer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15580
https://github.com/root-project/root/pull/15580:386,security,updat,updated,386,"[ntuple] Make RNTupleFileWriter::Recreate/Append return unique_ptr; Also apply clang-format to the involved files in the process. ## Changes or fixes:. `RNTupleFileWriter::Recreate` and `RNTupleFileWriter::Append ` now return a `unique_ptr` rather than a raw pointer, to make it obvious that the caller gets ownership of that pointer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15580
https://github.com/root-project/root/pull/15580:356,testability,test,tested,356,"[ntuple] Make RNTupleFileWriter::Recreate/Append return unique_ptr; Also apply clang-format to the involved files in the process. ## Changes or fixes:. `RNTupleFileWriter::Recreate` and `RNTupleFileWriter::Append ` now return a `unique_ptr` rather than a raw pointer, to make it obvious that the caller gets ownership of that pointer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15580
https://github.com/root-project/root/pull/15581:0,deployability,Releas,Release,0,Release notes; update 6.32 release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15581
https://github.com/root-project/root/pull/15581:15,deployability,updat,update,15,Release notes; update 6.32 release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15581
https://github.com/root-project/root/pull/15581:27,deployability,releas,release,27,Release notes; update 6.32 release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15581
https://github.com/root-project/root/pull/15581:15,safety,updat,update,15,Release notes; update 6.32 release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15581
https://github.com/root-project/root/pull/15581:15,security,updat,update,15,Release notes; update 6.32 release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15581
https://github.com/root-project/root/pull/15582:24,safety,test,testing,24,[ntuple] fixes and more testing for std::variant; Fixes #15534,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15582
https://github.com/root-project/root/pull/15582:24,testability,test,testing,24,[ntuple] fixes and more testing for std::variant; Fixes #15534,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15582
https://github.com/root-project/root/pull/15583:37,deployability,depend,dependencies,37,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:96,deployability,depend,dependencies,96,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:37,integrability,depend,dependencies,37,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:96,integrability,depend,dependencies,96,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:37,modifiability,depend,dependencies,37,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:96,modifiability,depend,dependencies,96,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:347,modifiability,pac,packages,347,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:37,safety,depend,dependencies,37,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:96,safety,depend,dependencies,96,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:131,safety,test,tests,131,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:283,safety,valid,validate,283,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:309,safety,test,tests,309,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:283,security,validat,validate,283,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:37,testability,depend,dependencies,37,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:96,testability,depend,dependencies,96,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:126,testability,unit,unit,126,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:131,testability,test,tests,131,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15583:309,testability,test,tests,309,"[v632][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15583
https://github.com/root-project/root/pull/15584:37,deployability,depend,dependencies,37,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:96,deployability,depend,dependencies,96,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:37,integrability,depend,dependencies,37,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:96,integrability,depend,dependencies,96,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:37,modifiability,depend,dependencies,37,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:96,modifiability,depend,dependencies,96,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:347,modifiability,pac,packages,347,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:37,safety,depend,dependencies,37,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:96,safety,depend,dependencies,96,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:131,safety,test,tests,131,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:283,safety,valid,validate,283,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:309,safety,test,tests,309,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:283,security,validat,validate,283,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:37,testability,depend,dependencies,37,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:96,testability,depend,dependencies,96,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:126,testability,unit,unit,126,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:131,testability,test,tests,131,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/pull/15584:309,testability,test,tests,309,"[v630][TMVA] Add missing TMVA python dependencies to requirements.txt; The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15584
https://github.com/root-project/root/issues/15585:200,availability,error,errors,200,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:611,availability,error,error,611,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1291,availability,Operat,Operating,1291,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:139,deployability,updat,updating,139,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:237,deployability,build,building,237,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:246,deployability,modul,module,246,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:268,deployability,build,building,268,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:277,deployability,modul,module,277,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:344,deployability,modul,module-includes,344,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:862,deployability,log,log,862,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:872,deployability,instal,install,872,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:937,deployability,instal,install,937,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1067,deployability,build,build,1067,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1073,deployability,instal,install,1073,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1085,deployability,build,build,1085,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1124,deployability,instal,install,1124,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1169,deployability,build,build,1169,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1186,deployability,instal,install,1186,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1203,deployability,instal,install,1203,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1230,deployability,version,version,1230,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1253,deployability,Instal,Installation,1253,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:254,energy efficiency,Core,Core,254,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1230,integrability,version,version,1230,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:246,modifiability,modul,module,246,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:277,modifiability,modul,module,277,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:344,modifiability,modul,module-includes,344,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1230,modifiability,version,version,1230,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:200,performance,error,errors,200,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:611,performance,error,error,611,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:139,safety,updat,updating,139,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:200,safety,error,errors,200,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:246,safety,modul,module,246,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:277,safety,modul,module,277,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:344,safety,modul,module-includes,344,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:611,safety,error,error,611,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:862,safety,log,log,862,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:139,security,updat,updating,139,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:862,security,log,log,862,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:862,testability,log,log,862,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:1344,testability,context,context,1344,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:200,usability,error,errors,200,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/issues/15585:611,usability,error,error,611,"Compilation issues with gcc 14.1.1, C++20, ROOT v6.30.06; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:10:. In file included from /usr/include/c++/14.1.1/chrono:49:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:. In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:. /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous. static_assert(std::has_single_bit(_Align));. ^~~~~~~~~~~~~~~~~~~. /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]. has_single_bit(_Tp __x) noexcept. ^. ```. The full log is . [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash. git clone https://github.com/root-project/root.git. cd root/. git checkout v6-30-06. mkdir build install. cd build. cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../. cmake --build . --target install -j 12 &> install.txt. ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585
https://github.com/root-project/root/pull/15586:90,deployability,releas,release,90,"[v632] Support PCRE2; Backport of #13771, for more flexibility in packaging the ROOT 6.32 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15586
https://github.com/root-project/root/pull/15586:66,modifiability,pac,packaging,66,"[v632] Support PCRE2; Backport of #13771, for more flexibility in packaging the ROOT 6.32 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15586
https://github.com/root-project/root/pull/15586:7,usability,Support,Support,7,"[v632] Support PCRE2; Backport of #13771, for more flexibility in packaging the ROOT 6.32 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15586
https://github.com/root-project/root/pull/15587:123,availability,error,errors,123,"[v632][RF] Small fixup for using RooFit with new Clad 1.5; Using template functions in the generated code can cause linker errors, which is avoided with this suggested commit. Backport of https://github.com/root-project/root/pull/15502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15587
https://github.com/root-project/root/pull/15587:123,performance,error,errors,123,"[v632][RF] Small fixup for using RooFit with new Clad 1.5; Using template functions in the generated code can cause linker errors, which is avoided with this suggested commit. Backport of https://github.com/root-project/root/pull/15502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15587
https://github.com/root-project/root/pull/15587:123,safety,error,errors,123,"[v632][RF] Small fixup for using RooFit with new Clad 1.5; Using template functions in the generated code can cause linker errors, which is avoided with this suggested commit. Backport of https://github.com/root-project/root/pull/15502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15587
https://github.com/root-project/root/pull/15587:140,safety,avoid,avoided,140,"[v632][RF] Small fixup for using RooFit with new Clad 1.5; Using template functions in the generated code can cause linker errors, which is avoided with this suggested commit. Backport of https://github.com/root-project/root/pull/15502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15587
https://github.com/root-project/root/pull/15587:123,usability,error,errors,123,"[v632][RF] Small fixup for using RooFit with new Clad 1.5; Using template functions in the generated code can cause linker errors, which is avoided with this suggested commit. Backport of https://github.com/root-project/root/pull/15502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15587
https://github.com/root-project/root/pull/15588:156,availability,failur,failures,156,Fix two scenarios of RDataFrame JIT and explicit multithreading; Re-opening [this PR](https://github.com/root-project/root/pull/15578) to check if the clad failures were real.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15588
https://github.com/root-project/root/pull/15588:156,deployability,fail,failures,156,Fix two scenarios of RDataFrame JIT and explicit multithreading; Re-opening [this PR](https://github.com/root-project/root/pull/15578) to check if the clad failures were real.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15588
https://github.com/root-project/root/pull/15588:8,modifiability,scenario,scenarios,8,Fix two scenarios of RDataFrame JIT and explicit multithreading; Re-opening [this PR](https://github.com/root-project/root/pull/15578) to check if the clad failures were real.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15588
https://github.com/root-project/root/pull/15588:156,performance,failur,failures,156,Fix two scenarios of RDataFrame JIT and explicit multithreading; Re-opening [this PR](https://github.com/root-project/root/pull/15578) to check if the clad failures were real.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15588
https://github.com/root-project/root/pull/15588:156,reliability,fail,failures,156,Fix two scenarios of RDataFrame JIT and explicit multithreading; Re-opening [this PR](https://github.com/root-project/root/pull/15578) to check if the clad failures were real.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15588
https://github.com/root-project/root/pull/15591:4,safety,Avoid,Avoid,4,io: Avoid infinite recursion in TFile::Open; This fixes #15590.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15591
https://github.com/root-project/root/pull/15592:12,deployability,Releas,ReleaseNotes,12,[reve] v632 ReleaseNotes; REve release notes for v632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15592
https://github.com/root-project/root/pull/15592:31,deployability,releas,release,31,[reve] v632 ReleaseNotes; REve release notes for v632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15592
https://github.com/root-project/root/pull/15593:22,modifiability,paramet,parameter,22,[hist] Comment unused parameter in TFormula; Backport of #15589.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15593
https://github.com/root-project/root/pull/15594:68,availability,consist,consistent,68,"Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. Essentially, this reverts #15191 on macOS. This will fix the occasional build failures on macOS beta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15594
https://github.com/root-project/root/pull/15594:217,availability,failur,failures,217,"Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. Essentially, this reverts #15191 on macOS. This will fix the occasional build failures on macOS beta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15594
https://github.com/root-project/root/pull/15594:211,deployability,build,build,211,"Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. Essentially, this reverts #15191 on macOS. This will fix the occasional build failures on macOS beta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15594
https://github.com/root-project/root/pull/15594:217,deployability,fail,failures,217,"Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. Essentially, this reverts #15191 on macOS. This will fix the occasional build failures on macOS beta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15594
https://github.com/root-project/root/pull/15594:217,performance,failur,failures,217,"Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. Essentially, this reverts #15191 on macOS. This will fix the occasional build failures on macOS beta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15594
https://github.com/root-project/root/pull/15594:217,reliability,fail,failures,217,"Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. Essentially, this reverts #15191 on macOS. This will fix the occasional build failures on macOS beta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15594
https://github.com/root-project/root/pull/15594:68,usability,consist,consistent,68,"Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. Essentially, this reverts #15191 on macOS. This will fix the occasional build failures on macOS beta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15594
https://github.com/root-project/root/pull/15595:75,availability,consist,consistent,75,"[v632] Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. This will fix the occasional build failures on macOS beta. Backport of #15594.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15595
https://github.com/root-project/root/pull/15595:181,availability,failur,failures,181,"[v632] Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. This will fix the occasional build failures on macOS beta. Backport of #15594.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15595
https://github.com/root-project/root/pull/15595:175,deployability,build,build,175,"[v632] Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. This will fix the occasional build failures on macOS beta. Backport of #15594.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15595
https://github.com/root-project/root/pull/15595:181,deployability,fail,failures,181,"[v632] Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. This will fix the occasional build failures on macOS beta. Backport of #15594.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15595
https://github.com/root-project/root/pull/15595:181,performance,failur,failures,181,"[v632] Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. This will fix the occasional build failures on macOS beta. Backport of #15594.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15595
https://github.com/root-project/root/pull/15595:181,reliability,fail,failures,181,"[v632] Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. This will fix the occasional build failures on macOS beta. Backport of #15594.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15595
https://github.com/root-project/root/pull/15595:75,usability,consist,consistent,75,"[v632] Don't use system giflib on macOS; This is a follow-up on 98ca55239, consistent with what is already done in the code for `png` and `jpeg`. This will fix the occasional build failures on macOS beta. Backport of #15594.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15595
https://github.com/root-project/root/pull/15596:39,safety,test,tests,39,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""; This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15596
https://github.com/root-project/root/pull/15596:67,safety,test,tests,67,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""; This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15596
https://github.com/root-project/root/pull/15596:175,safety,test,tests,175,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""; This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15596
https://github.com/root-project/root/pull/15596:282,safety,test,tests,282,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""; This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15596
https://github.com/root-project/root/pull/15596:39,testability,test,tests,39,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""; This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15596
https://github.com/root-project/root/pull/15596:62,testability,unit,unit,62,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""; This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15596
https://github.com/root-project/root/pull/15596:67,testability,test,tests,67,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""; This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15596
https://github.com/root-project/root/pull/15596:175,testability,test,tests,175,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""; This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15596
https://github.com/root-project/root/pull/15596:282,testability,test,tests,282,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""; This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15596
https://github.com/root-project/root/pull/15596:209,usability,close,close,209,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""; This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15596
https://github.com/root-project/root/pull/15597:136,deployability,releas,release,136,"[v632][RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; Backport of #14751 to the 6.32 release branch. Thanks again, @langenbruch!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15597
https://github.com/root-project/root/pull/15597:62,modifiability,exten,extended,62,"[v632][RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; Backport of #14751 to the 6.32 release branch. Thanks again, @langenbruch!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15597
https://github.com/root-project/root/pull/15599:482,availability,consist,consistently,482,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:326,deployability,depend,depends,326,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:437,energy efficiency,load,loaded,437,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:326,integrability,depend,depends,326,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:326,modifiability,depend,depends,326,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:437,performance,load,loaded,437,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:326,safety,depend,depends,326,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:354,security,access,accessed,354,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:326,testability,depend,depends,326,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:15,usability,prefer,prefer,15,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:482,usability,consist,consistently,482,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15599:495,usability,prefer,preferring,495,"[meta] TClass: prefer typeid=>TClass map values with less Double32_t v2; Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid. Before this commit, TClass::GetClass(typeid(Foo)) would return. whatever was registered last. This is not ""stable""; it depends on which. branch is accessed first, or which TClass::GetClass call happens first, or. which library is loaded first. Make this more reporducible by consistently preferring types will less. Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it. really is the value for the typename. ---. This PR fixes #12509.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15599
https://github.com/root-project/root/pull/15601:112,deployability,version,version,112,[tmva] Fix tmva DL packages for new cudnn v9; This PR migrates the TMVA Deep Learning classes (RNN) for new cud version 9,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15601
https://github.com/root-project/root/pull/15601:112,integrability,version,version,112,[tmva] Fix tmva DL packages for new cudnn v9; This PR migrates the TMVA Deep Learning classes (RNN) for new cud version 9,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15601
https://github.com/root-project/root/pull/15601:19,modifiability,pac,packages,19,[tmva] Fix tmva DL packages for new cudnn v9; This PR migrates the TMVA Deep Learning classes (RNN) for new cud version 9,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15601
https://github.com/root-project/root/pull/15601:112,modifiability,version,version,112,[tmva] Fix tmva DL packages for new cudnn v9; This PR migrates the TMVA Deep Learning classes (RNN) for new cud version 9,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15601
https://github.com/root-project/root/pull/15601:77,usability,Learn,Learning,77,[tmva] Fix tmva DL packages for new cudnn v9; This PR migrates the TMVA Deep Learning classes (RNN) for new cud version 9,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15601
https://github.com/root-project/root/pull/15602:12,deployability,version,version,12,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15602:62,deployability,version,version,62,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15602:144,deployability,version,versions,144,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15602:12,integrability,version,version,12,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15602:62,integrability,version,version,62,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15602:144,integrability,version,versions,144,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15602:12,modifiability,version,version,12,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15602:62,modifiability,version,version,62,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15602:144,modifiability,version,versions,144,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15602:20,safety,detect,detection,20,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15602:20,security,detect,detection,20,[CMake] Fix version detection in `FindCUDNN.cmake`; The CUDNN version is defined in `cudnn_version.h` and not `cudnn.h` anymore for newer CUDNN versions. This is the same fix that is also done in PyTorch: https://github.com/pytorch/pytorch/blob/main/cmake/Modules_CUDA_fix/FindCUDNN.cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15602
https://github.com/root-project/root/pull/15603:122,deployability,fail,fails,122,"[webcanvas] improve TF1 saved points handling; By default saved points is fallback solution when evaluation on the client fails. But one can force usage of saved points with ""WebGui.TF1UseSave: 2"". Or one can disable saved points usage ""WebGui.TF1UseSave: 0"". Update JSROOT to v 7.7.0 which will be reference for 6.32 release",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15603
https://github.com/root-project/root/pull/15603:260,deployability,Updat,Update,260,"[webcanvas] improve TF1 saved points handling; By default saved points is fallback solution when evaluation on the client fails. But one can force usage of saved points with ""WebGui.TF1UseSave: 2"". Or one can disable saved points usage ""WebGui.TF1UseSave: 0"". Update JSROOT to v 7.7.0 which will be reference for 6.32 release",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15603
https://github.com/root-project/root/pull/15603:318,deployability,releas,release,318,"[webcanvas] improve TF1 saved points handling; By default saved points is fallback solution when evaluation on the client fails. But one can force usage of saved points with ""WebGui.TF1UseSave: 2"". Or one can disable saved points usage ""WebGui.TF1UseSave: 0"". Update JSROOT to v 7.7.0 which will be reference for 6.32 release",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15603
https://github.com/root-project/root/pull/15603:122,reliability,fail,fails,122,"[webcanvas] improve TF1 saved points handling; By default saved points is fallback solution when evaluation on the client fails. But one can force usage of saved points with ""WebGui.TF1UseSave: 2"". Or one can disable saved points usage ""WebGui.TF1UseSave: 0"". Update JSROOT to v 7.7.0 which will be reference for 6.32 release",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15603
https://github.com/root-project/root/pull/15603:260,safety,Updat,Update,260,"[webcanvas] improve TF1 saved points handling; By default saved points is fallback solution when evaluation on the client fails. But one can force usage of saved points with ""WebGui.TF1UseSave: 2"". Or one can disable saved points usage ""WebGui.TF1UseSave: 0"". Update JSROOT to v 7.7.0 which will be reference for 6.32 release",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15603
https://github.com/root-project/root/pull/15603:260,security,Updat,Update,260,"[webcanvas] improve TF1 saved points handling; By default saved points is fallback solution when evaluation on the client fails. But one can force usage of saved points with ""WebGui.TF1UseSave: 2"". Or one can disable saved points usage ""WebGui.TF1UseSave: 0"". Update JSROOT to v 7.7.0 which will be reference for 6.32 release",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15603
https://github.com/root-project/root/pull/15605:296,deployability,version,versions,296,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:400,deployability,updat,updated,400,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:296,integrability,version,versions,296,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:105,modifiability,pac,packge,105,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:296,modifiability,version,versions,296,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:354,safety,test,tested,354,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:382,safety,test,tests,382,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:400,safety,updat,updated,400,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:400,security,updat,updated,400,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:354,testability,test,tested,354,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:382,testability,test,tests,382,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:234,usability,support,supports,234,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15605:277,usability,support,support,277,"[PyROOT] Replace `sonnet` with `dm-sonnet` in requirements.txt; The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15605
https://github.com/root-project/root/pull/15606:204,deployability,updat,updated,204,[matrix] Fast element setter method; # This Pull request:. This PR defines a new method `SetElement()` that allows to efficiently set matrix elements. . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#15285](https://github.com/root-project/root/issues/15285).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15606
https://github.com/root-project/root/pull/15606:174,safety,test,tested,174,[matrix] Fast element setter method; # This Pull request:. This PR defines a new method `SetElement()` that allows to efficiently set matrix elements. . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#15285](https://github.com/root-project/root/issues/15285).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15606
https://github.com/root-project/root/pull/15606:204,safety,updat,updated,204,[matrix] Fast element setter method; # This Pull request:. This PR defines a new method `SetElement()` that allows to efficiently set matrix elements. . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#15285](https://github.com/root-project/root/issues/15285).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15606
https://github.com/root-project/root/pull/15606:204,security,updat,updated,204,[matrix] Fast element setter method; # This Pull request:. This PR defines a new method `SetElement()` that allows to efficiently set matrix elements. . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#15285](https://github.com/root-project/root/issues/15285).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15606
https://github.com/root-project/root/pull/15606:174,testability,test,tested,174,[matrix] Fast element setter method; # This Pull request:. This PR defines a new method `SetElement()` that allows to efficiently set matrix elements. . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#15285](https://github.com/root-project/root/issues/15285).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15606
https://github.com/root-project/root/pull/15606:118,usability,efficien,efficiently,118,[matrix] Fast element setter method; # This Pull request:. This PR defines a new method `SetElement()` that allows to efficiently set matrix elements. . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#15285](https://github.com/root-project/root/issues/15285).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15606
https://github.com/root-project/root/pull/15607:325,deployability,updat,updated,325,"[skip-ci] clarify TPolyMarker::GetN difference wrt TGraph::GetN; # This Pull request:. ## Changes or fixes:. Using `pm->SetPoint(pm->GetN(), x, y)` iteratively, as is usual with `TGraph`, leads to an exponentially growing result. Prevent it by clarifying the documentation. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15607
https://github.com/root-project/root/pull/15607:230,safety,Prevent,Prevent,230,"[skip-ci] clarify TPolyMarker::GetN difference wrt TGraph::GetN; # This Pull request:. ## Changes or fixes:. Using `pm->SetPoint(pm->GetN(), x, y)` iteratively, as is usual with `TGraph`, leads to an exponentially growing result. Prevent it by clarifying the documentation. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15607
https://github.com/root-project/root/pull/15607:295,safety,test,tested,295,"[skip-ci] clarify TPolyMarker::GetN difference wrt TGraph::GetN; # This Pull request:. ## Changes or fixes:. Using `pm->SetPoint(pm->GetN(), x, y)` iteratively, as is usual with `TGraph`, leads to an exponentially growing result. Prevent it by clarifying the documentation. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15607
https://github.com/root-project/root/pull/15607:325,safety,updat,updated,325,"[skip-ci] clarify TPolyMarker::GetN difference wrt TGraph::GetN; # This Pull request:. ## Changes or fixes:. Using `pm->SetPoint(pm->GetN(), x, y)` iteratively, as is usual with `TGraph`, leads to an exponentially growing result. Prevent it by clarifying the documentation. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15607
https://github.com/root-project/root/pull/15607:230,security,Preven,Prevent,230,"[skip-ci] clarify TPolyMarker::GetN difference wrt TGraph::GetN; # This Pull request:. ## Changes or fixes:. Using `pm->SetPoint(pm->GetN(), x, y)` iteratively, as is usual with `TGraph`, leads to an exponentially growing result. Prevent it by clarifying the documentation. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15607
https://github.com/root-project/root/pull/15607:325,security,updat,updated,325,"[skip-ci] clarify TPolyMarker::GetN difference wrt TGraph::GetN; # This Pull request:. ## Changes or fixes:. Using `pm->SetPoint(pm->GetN(), x, y)` iteratively, as is usual with `TGraph`, leads to an exponentially growing result. Prevent it by clarifying the documentation. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15607
https://github.com/root-project/root/pull/15607:295,testability,test,tested,295,"[skip-ci] clarify TPolyMarker::GetN difference wrt TGraph::GetN; # This Pull request:. ## Changes or fixes:. Using `pm->SetPoint(pm->GetN(), x, y)` iteratively, as is usual with `TGraph`, leads to an exponentially growing result. Prevent it by clarifying the documentation. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15607
https://github.com/root-project/root/pull/15607:259,usability,document,documentation,259,"[skip-ci] clarify TPolyMarker::GetN difference wrt TGraph::GetN; # This Pull request:. ## Changes or fixes:. Using `pm->SetPoint(pm->GetN(), x, y)` iteratively, as is usual with `TGraph`, leads to an exponentially growing result. Prevent it by clarifying the documentation. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15607
https://github.com/root-project/root/pull/15608:410,deployability,upgrad,upgrade,410,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:789,deployability,API,API,789,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:949,deployability,log,logic,949,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:5088,energy efficiency,measur,measurements,5088,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:789,integrability,API,API,789,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:789,interoperability,API,API,789,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:410,modifiability,upgrad,upgrade,410,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:538,modifiability,extens,extension,538,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:972,modifiability,layer,layer,972,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:13,performance,memor,memory,13,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:176,performance,memor,memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends,176,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:442,performance,memor,memory,442,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:684,performance,memor,memory,684,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:1578,performance,memor,memory,1578,"rts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep track of new branches and store values:. self.new_branches = {}. def add_branch(self, name, f, value_type=""float""):. self.new_branches[name] = {}. self.new_branches[name][""f""] = f. self.new_branches[name][""name""] = name. self.new_branches[name][""value_type""] = value_type. self.new_branches[name][""value""] = value = ROOT.std.vector(value_type)(). self.new_branches[name][""tbranch""] = self.new_tree.Branch(name, value). def run(self):. nentries = self.src_tree.GetEntries(). for i in range(nentries):. # Get entry and make sure src_tree and new_tree are synced. self.src_tree.GetEntr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:3983,performance,memor,memory,3983,"_memory(i). self.new_tree.Write(). self.new_file.Close(). self.src_file.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4018,performance,memor,memory,4018,"self.new_file.Close(). self.src_file.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4053,performance,memor,memory,4053,"e.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4088,performance,memor,memory,4088," file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time mea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4123,performance,memor,memory,4123,"""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4158,performance,memor,memory,4158,"ree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4193,performance,memor,memory,4193,"value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4228,performance,memor,memory,4228,"at"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4263,performance,memor,memory,4263,"(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4298,performance,memor,memory,4298," value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4426,performance,time,time,4426,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4470,performance,time,time,4470,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4547,performance,memor,memory,4547,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4582,performance,memor,memory,4582,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4617,performance,memor,memory,4617,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4652,performance,memor,memory,4652,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4687,performance,memor,memory,4687,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4722,performance,memor,memory,4722,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4757,performance,memor,memory,4757,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4792,performance,memor,memory,4792,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4827,performance,memor,memory,4827,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4862,performance,memor,memory,4862,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4990,performance,time,time,4990,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:5034,performance,time,time,5034,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:5083,performance,time,time,5083,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:949,safety,log,logic,949,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:949,security,log,logic,949,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:1901,security,access,access,1901,"t is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep track of new branches and store values:. self.new_branches = {}. def add_branch(self, name, f, value_type=""float""):. self.new_branches[name] = {}. self.new_branches[name][""f""] = f. self.new_branches[name][""name""] = name. self.new_branches[name][""value_type""] = value_type. self.new_branches[name][""value""] = value = ROOT.std.vector(value_type)(). self.new_branches[name][""tbranch""] = self.new_tree.Branch(name, value). def run(self):. nentries = self.src_tree.GetEntries(). for i in range(nentries):. # Get entry and make sure src_tree and new_tree are synced. self.src_tree.GetEntry(i). self.new_tree.GetEntry(i). # Now loop on all the branches that have been added:. for branch_name, branch_dict in self.new_branches.items():. branch_dict[""value""].clear(). # self.new_tree. branch_dict[""f""](self.new_tree). # [branch_dict['value'].push_back(result) for result in branch_dict['f'](self.new_tree)]. # Fill",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:949,testability,log,logic,949,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:13,usability,memor,memory,13,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:176,usability,memor,memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends,176,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:442,usability,memor,memory,442,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:684,usability,memor,memory,684,"[PyROOT] Fix memory leak in TTree `__getattr__` pythonization; Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:1578,usability,memor,memory,1578,"rts in Python and hoping that the problem is gone. Which it is! Note that the code also had no obvious memory leak before. where it was. using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy. API. If similar problems appear, this function might have to be. investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic. into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:. ```python. import ROOT. import numpy as np. ROOT.gInterpreter.Declare(. """""". template<class T>. void * MyGetAddress(T * b) {. return *(void**)b->GetAddress();. }. """""". ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually. v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))). # using the Pythonization. v2 = getattr(tree, ""value2""). return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):. ROOT.gSystem.GetProcInfo(pinfo). print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:. def __init__(self, tree_name, new_file, src_file):. self.src_file = ROOT.TFile.Open(src_file). self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep track of new branches and store values:. self.new_branches = {}. def add_branch(self, name, f, value_type=""float""):. self.new_branches[name] = {}. self.new_branches[name][""f""] = f. self.new_branches[name][""name""] = name. self.new_branches[name][""value_type""] = value_type. self.new_branches[name][""value""] = value = ROOT.std.vector(value_type)(). self.new_branches[name][""tbranch""] = self.new_tree.Branch(name, value). def run(self):. nentries = self.src_tree.GetEntries(). for i in range(nentries):. # Get entry and make sure src_tree and new_tree are synced. self.src_tree.GetEntr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:2749,usability,clear,clear,2749,"c_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""). self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':. self.new_tree.AddFriend(self.src_tree). # To keep track of new branches and store values:. self.new_branches = {}. def add_branch(self, name, f, value_type=""float""):. self.new_branches[name] = {}. self.new_branches[name][""f""] = f. self.new_branches[name][""name""] = name. self.new_branches[name][""value_type""] = value_type. self.new_branches[name][""value""] = value = ROOT.std.vector(value_type)(). self.new_branches[name][""tbranch""] = self.new_tree.Branch(name, value). def run(self):. nentries = self.src_tree.GetEntries(). for i in range(nentries):. # Get entry and make sure src_tree and new_tree are synced. self.src_tree.GetEntry(i). self.new_tree.GetEntry(i). # Now loop on all the branches that have been added:. for branch_name, branch_dict in self.new_branches.items():. branch_dict[""value""].clear(). # self.new_tree. branch_dict[""f""](self.new_tree). # [branch_dict['value'].push_back(result) for result in branch_dict['f'](self.new_tree)]. # Fill entry with all computed branches. self.new_tree.Fill(). if i % 10000 == 0:. print_memory(i). self.new_tree.Write(). self.new_file.Close(). self.src_file.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:3035,usability,Close,Close,3035,". self.new_branches = {}. def add_branch(self, name, f, value_type=""float""):. self.new_branches[name] = {}. self.new_branches[name][""f""] = f. self.new_branches[name][""name""] = name. self.new_branches[name][""value_type""] = value_type. self.new_branches[name][""value""] = value = ROOT.std.vector(value_type)(). self.new_branches[name][""tbranch""] = self.new_tree.Branch(name, value). def run(self):. nentries = self.src_tree.GetEntries(). for i in range(nentries):. # Get entry and make sure src_tree and new_tree are synced. self.src_tree.GetEntry(i). self.new_tree.GetEntry(i). # Now loop on all the branches that have been added:. for branch_name, branch_dict in self.new_branches.items():. branch_dict[""value""].clear(). # self.new_tree. branch_dict[""f""](self.new_tree). # [branch_dict['value'].push_back(result) for result in branch_dict['f'](self.new_tree)]. # Fill entry with all computed branches. self.new_tree.Fill(). if i % 10000 == 0:. print_memory(i). self.new_tree.Write(). self.new_file.Close(). self.src_file.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:3058,usability,Close,Close,3058,"}. def add_branch(self, name, f, value_type=""float""):. self.new_branches[name] = {}. self.new_branches[name][""f""] = f. self.new_branches[name][""name""] = name. self.new_branches[name][""value_type""] = value_type. self.new_branches[name][""value""] = value = ROOT.std.vector(value_type)(). self.new_branches[name][""tbranch""] = self.new_tree.Branch(name, value). def run(self):. nentries = self.src_tree.GetEntries(). for i in range(nentries):. # Get entry and make sure src_tree and new_tree are synced. self.src_tree.GetEntry(i). self.new_tree.GetEntry(i). # Now loop on all the branches that have been added:. for branch_name, branch_dict in self.new_branches.items():. branch_dict[""value""].clear(). # self.new_tree. branch_dict[""f""](self.new_tree). # [branch_dict['value'].push_back(result) for result in branch_dict['f'](self.new_tree)]. # Fill entry with all computed branches. self.new_tree.Fill(). if i % 10000 == 0:. print_memory(i). self.new_tree.Write(). self.new_file.Close(). self.src_file.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:3502,usability,clear,clear,3502," entry and make sure src_tree and new_tree are synced. self.src_tree.GetEntry(i). self.new_tree.GetEntry(i). # Now loop on all the branches that have been added:. for branch_name, branch_dict in self.new_branches.items():. branch_dict[""value""].clear(). # self.new_tree. branch_dict[""f""](self.new_tree). # [branch_dict['value'].push_back(result) for result in branch_dict['f'](self.new_tree)]. # Fill entry with all computed branches. self.new_tree.Fill(). if i % 10000 == 0:. print_memory(i). self.new_tree.Write(). self.new_file.Close(). self.src_file.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:3615,usability,clear,clear,3615,"w loop on all the branches that have been added:. for branch_name, branch_dict in self.new_branches.items():. branch_dict[""value""].clear(). # self.new_tree. branch_dict[""f""](self.new_tree). # [branch_dict['value'].push_back(result) for result in branch_dict['f'](self.new_tree)]. # Fill entry with all computed branches. self.new_tree.Fill(). if i % 10000 == 0:. print_memory(i). self.new_tree.Write(). self.new_file.Close(). self.src_file.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:3746,usability,Close,Close,3746,"clear(). # self.new_tree. branch_dict[""f""](self.new_tree). # [branch_dict['value'].push_back(result) for result in branch_dict['f'](self.new_tree)]. # Fill entry with all computed branches. self.new_tree.Fill(). if i % 10000 == 0:. print_memory(i). self.new_tree.Write(). self.new_file.Close(). self.src_file.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:3983,usability,memor,memory,3983,"_memory(i). self.new_tree.Write(). self.new_file.Close(). self.src_file.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4018,usability,memor,memory,4018,"self.new_file.Close(). self.src_file.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4053,usability,memor,memory,4053,"e.Close(). file_path = ""_src.root"". file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4088,usability,memor,memory,4088," file = ROOT.TFile.Open(file_path, ""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time mea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4123,usability,memor,memory,4123,"""recreate""). tree = ROOT.TTree(""DDTree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4158,usability,memor,memory,4158,"ree"", ""DDTree""). # Branch: value1. value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4193,usability,memor,memory,4193,"value1_value = ROOT.std.vector(""float"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4228,usability,memor,memory,4228,"at"")(). value1_branch = tree.Branch(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4263,usability,memor,memory,4263,"(""value1"", value1_value). # Branch: value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4298,usability,memor,memory,4298," value2. value2_value = ROOT.std.vector(""float"")(). value2_branch = tree.Branch(""value2"", value2_value). value_length = 20. nentries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4547,usability,memor,memory,4547,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4582,usability,memor,memory,4582,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4617,usability,memor,memory,4617,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4652,usability,memor,memory,4652,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4687,usability,memor,memory,4687,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4722,usability,memor,memory,4722,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4757,usability,memor,memory,4757,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4792,usability,memor,memory,4792,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4827,usability,memor,memory,4827,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15608:4862,usability,memor,memory,4862,"entries = 100000. for i in range(nentries):. tree.GetEntry(i). value1_value.clear(). [value1_value.push_back(result) for result in np.random.uniform(-999, 999, value_length)]. value2_value.clear(). [value2_value.push_back(result) for result in np.random.uniform(-99, 999, value_length)]. tree.Fill(). file.Write(). file.Close(). tree_name = ""DDTree"". src_path = ""_src.root"". new_path = ""_new.root"". retupler = reTupler(""DDTree"", new_path, src_path). retupler.add_branch(""new_branch"", macro, ""float""). retupler.run(). ```. Output without this PR:. ```txt. 0 memory usage 361424 1544100. 10000 memory usage 380580 1548912. 20000 memory usage 386148 1554504. 30000 memory usage 391332 1559540. 40000 memory usage 396324 1565324. 50000 memory usage 402084 1572740. 60000 memory usage 407652 1577572. 70000 memory usage 413028 1582796. 80000 memory usage 418596 1588976. 90000 memory usage 423780 1594012. ________________________________________________________. Executed in 3.40 secs fish external. usr time 3.33 secs 399.00 micros 3.33 secs. sys time 1.96 secs 106.00 micros 1.96 secs. ```. Output with this PR:. ```txt. 0 memory usage 361396 1544116. 10000 memory usage 375848 1544304. 20000 memory usage 375848 1544304. 30000 memory usage 375848 1544304. 40000 memory usage 375848 1544304. 50000 memory usage 375848 1544304. 60000 memory usage 375848 1544304. 70000 memory usage 375848 1544304. 80000 memory usage 375848 1544304. 90000 memory usage 375848 1544304. ________________________________________________________. Executed in 2.08 secs fish external. usr time 2.06 secs 471.00 micros 2.06 secs. sys time 1.99 secs 126.00 micros 1.99 secs. ```. The time measurements exclude the toy data generation. The new implementation is also almost twice as fast as the old one, so a win-win! ~~**Note:** I''m pretty sure there was also a JIRA issue about this problem, I can't find it anymore...~~. *Edit:* no, the issue I had in mind was not really the same: https://its.cern.ch/jira/browse/ROOT-9875.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15608
https://github.com/root-project/root/pull/15609:233,reliability,doe,does,233,"New Method TH1::SetColors; Implement the method requested here: https://root-forum.cern.ch/t/a-few-new-member-functions-for-various-classes/59434/3. By default: linecolor = markercolor = fillcolor = -1. If a color is < 0 this method does not change the corresponding color if positive or null it set the color. For instance:. ```. h->SetColor(kRed, kRed);. ```. will set the line color and the marker color to red.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15609
https://github.com/root-project/root/issues/15610:362,availability,Operat,Operating,362,Memory leak in TTree __getattr__ pythonization; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. ### Reproducer. Please see the forum post. ### ROOT version. at least 6.26 onwards. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15610
https://github.com/root-project/root/issues/15610:296,deployability,version,version,296,Memory leak in TTree __getattr__ pythonization; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. ### Reproducer. Please see the forum post. ### ROOT version. at least 6.26 onwards. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15610
https://github.com/root-project/root/issues/15610:332,deployability,Instal,Installation,332,Memory leak in TTree __getattr__ pythonization; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. ### Reproducer. Please see the forum post. ### ROOT version. at least 6.26 onwards. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15610
https://github.com/root-project/root/issues/15610:296,integrability,version,version,296,Memory leak in TTree __getattr__ pythonization; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. ### Reproducer. Please see the forum post. ### ROOT version. at least 6.26 onwards. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15610
https://github.com/root-project/root/issues/15610:296,modifiability,version,version,296,Memory leak in TTree __getattr__ pythonization; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. ### Reproducer. Please see the forum post. ### ROOT version. at least 6.26 onwards. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15610
https://github.com/root-project/root/issues/15610:0,performance,Memor,Memory,0,Memory leak in TTree __getattr__ pythonization; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. ### Reproducer. Please see the forum post. ### ROOT version. at least 6.26 onwards. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15610
https://github.com/root-project/root/issues/15610:152,performance,memor,memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends,152,Memory leak in TTree __getattr__ pythonization; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. ### Reproducer. Please see the forum post. ### ROOT version. at least 6.26 onwards. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15610
https://github.com/root-project/root/issues/15610:400,testability,context,context,400,Memory leak in TTree __getattr__ pythonization; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. ### Reproducer. Please see the forum post. ### ROOT version. at least 6.26 onwards. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15610
https://github.com/root-project/root/issues/15610:0,usability,Memor,Memory,0,Memory leak in TTree __getattr__ pythonization; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. ### Reproducer. Please see the forum post. ### ROOT version. at least 6.26 onwards. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15610
https://github.com/root-project/root/issues/15610:152,usability,memor,memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends,152,Memory leak in TTree __getattr__ pythonization; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. ### Reproducer. Please see the forum post. ### ROOT version. at least 6.26 onwards. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15610
https://github.com/root-project/root/pull/15611:16,deployability,Updat,Update,16,[v632][skip-ci] Update release notes; Update 6.32 release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15611
https://github.com/root-project/root/pull/15611:23,deployability,releas,release,23,[v632][skip-ci] Update release notes; Update 6.32 release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15611
https://github.com/root-project/root/pull/15611:38,deployability,Updat,Update,38,[v632][skip-ci] Update release notes; Update 6.32 release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15611
https://github.com/root-project/root/pull/15611:50,deployability,releas,release,50,[v632][skip-ci] Update release notes; Update 6.32 release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15611
https://github.com/root-project/root/pull/15611:16,safety,Updat,Update,16,[v632][skip-ci] Update release notes; Update 6.32 release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15611
https://github.com/root-project/root/pull/15611:38,safety,Updat,Update,38,[v632][skip-ci] Update release notes; Update 6.32 release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15611
https://github.com/root-project/root/pull/15611:16,security,Updat,Update,16,[v632][skip-ci] Update release notes; Update 6.32 release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15611
https://github.com/root-project/root/pull/15611:38,security,Updat,Update,38,[v632][skip-ci] Update release notes; Update 6.32 release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15611
https://github.com/root-project/root/pull/15612:5,deployability,Updat,Update,5,"[io] Update TKey::Sizeof doc comment; The comment was not considering fDatime, thus reporting the wrong format and size.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15612
https://github.com/root-project/root/pull/15612:104,interoperability,format,format,104,"[io] Update TKey::Sizeof doc comment; The comment was not considering fDatime, thus reporting the wrong format and size.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15612
https://github.com/root-project/root/pull/15612:5,safety,Updat,Update,5,"[io] Update TKey::Sizeof doc comment; The comment was not considering fDatime, thus reporting the wrong format and size.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15612
https://github.com/root-project/root/pull/15612:5,security,Updat,Update,5,"[io] Update TKey::Sizeof doc comment; The comment was not considering fDatime, thus reporting the wrong format and size.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15612
https://github.com/root-project/root/pull/15613:201,deployability,Observ,Observed,201,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:307,deployability,updat,updated,307,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:136,integrability,transform,transformation,136,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:136,interoperability,transform,transformation,136,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:277,safety,test,tested,277,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:307,safety,updat,updated,307,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:22,security,ident,identity,22,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:127,security,ident,identity,127,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:215,security,rotat,rotating,215,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:307,security,updat,updated,307,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:201,testability,Observ,Observed,201,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15613:277,testability,test,tested,277,"[geom] Fix registered identity matrix removal warning; # This Pull request:. ## Changes or fixes:. When copying the registered identity transformation, the registered flag was not reset appropriately. Observed when rotating overlapping volumes in the pad. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15613
https://github.com/root-project/root/pull/15614:58,deployability,releas,release,58,[v632] Backport of yesterdays fixes; Needs to go into the release. * https://github.com/root-project/root/pull/15605. * https://github.com/root-project/root/pull/15602. * https://github.com/root-project/root/pull/15608.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15614
https://github.com/root-project/root/issues/15615:2772,availability,Operat,Operating,2772,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:57,deployability,configurat,configuration,57,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:353,deployability,build,build,353,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:368,deployability,build,build,368,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:451,deployability,configurat,configuration,451,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:624,deployability,build,build,624,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:650,deployability,Releas,Release,650,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:2663,deployability,build,builds,2663,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:2724,deployability,version,version,2724,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:2742,deployability,Instal,Installation,2742,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:2348,energy efficiency,cpu,cpu,2348,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:2365,energy efficiency,gpu,gpu,2365,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:57,integrability,configur,configuration,57,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:451,integrability,configur,configuration,451,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:2724,integrability,version,version,2724,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:57,modifiability,configur,configuration,57,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:451,modifiability,configur,configuration,451,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:2724,modifiability,version,version,2724,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:2348,performance,cpu,cpu,2348,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:2365,performance,gpu,gpu,2365,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:25,reliability,doe,does,25,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:484,reliability,doe,doesn,484,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:57,security,configur,configuration,57,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:451,security,configur,configuration,451,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:423,testability,assert,assertions,423,"New CI label for nightly does not correctly report cmake configuration; ### Explain what you would like to see improved and how. Taking as an example. ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/issues/15615:2810,testability,context,context,2810,"Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drpath=on"" ""-Druntime_cxxmodules=on"" ""-Dshadowpw=off"" ""-Dshared=on"" ""-Dsoversion=off"" ""-Dspectrum=on"" ""-Dsqlite=on"" ""-Dssl=on"" ""-Dtcmalloc=off"" ""-Dtest_distrdf_dask=on"" ""-Dtest_distrdf_pyspark=on"" ""-Dtesting=on"" ""-Dtmva-cpu=off"" ""-Dtmva-gpu=off"" ""-Dtmva-pymva=on"" ""-Dtmva-rmva=off"" ""-Dtmva-sofie=off"" ""-Dtmva=on"" ""-Dunfold=on"" ""-Dunuran=on"" ""-During=off"" ""-Dvc=off"" ""-Dvdt=on"" ""-Dveccore=off"" ""-Dvecgeom=off"" ""-Dwebgui=on"" ""-Dwin_broken_tests=off"" ""-Dwinrtdebug=off"" ""-Dx11=on"" ""-Dxml=on"" ""-Dxrootd=on"". ```. I do not know to how many builds this applies, I just noticed it on this one. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15615
https://github.com/root-project/root/pull/15616:5,deployability,Updat,Update,5,[RF] Update RooFit AD to support ATLAS and CMS Higgs combinations; Update RooFit AD to support ATLAS and CMS Higgs combinations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15616
https://github.com/root-project/root/pull/15616:67,deployability,Updat,Update,67,[RF] Update RooFit AD to support ATLAS and CMS Higgs combinations; Update RooFit AD to support ATLAS and CMS Higgs combinations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15616
https://github.com/root-project/root/pull/15616:5,safety,Updat,Update,5,[RF] Update RooFit AD to support ATLAS and CMS Higgs combinations; Update RooFit AD to support ATLAS and CMS Higgs combinations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15616
https://github.com/root-project/root/pull/15616:67,safety,Updat,Update,67,[RF] Update RooFit AD to support ATLAS and CMS Higgs combinations; Update RooFit AD to support ATLAS and CMS Higgs combinations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15616
https://github.com/root-project/root/pull/15616:5,security,Updat,Update,5,[RF] Update RooFit AD to support ATLAS and CMS Higgs combinations; Update RooFit AD to support ATLAS and CMS Higgs combinations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15616
https://github.com/root-project/root/pull/15616:67,security,Updat,Update,67,[RF] Update RooFit AD to support ATLAS and CMS Higgs combinations; Update RooFit AD to support ATLAS and CMS Higgs combinations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15616
https://github.com/root-project/root/pull/15616:25,usability,support,support,25,[RF] Update RooFit AD to support ATLAS and CMS Higgs combinations; Update RooFit AD to support ATLAS and CMS Higgs combinations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15616
https://github.com/root-project/root/pull/15616:87,usability,support,support,87,[RF] Update RooFit AD to support ATLAS and CMS Higgs combinations; Update RooFit AD to support ATLAS and CMS Higgs combinations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15616
https://github.com/root-project/root/issues/15617:821,availability,Operat,Operating,821,"`RDF::Describe` returns an incorrect file count; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `GetNFiles()` on the object returned by `Define` gives an incorrect value. The underlying issue is the fact that the `RDFDescription` gets constructed without this number and thus `fFileCount` does not get properly initialized. It should be fixable by adding it as an argument in this line:. https://github.com/root-project/root/blob/f53eb1b4f7c5df1350b0a2756695c8e951e8a34f/tree/dataframe/src/RInterfaceBase.cxx#L286. Additionally, perhaps the constructor without this arguments should be removed altogether to avoid similar bugs in the future. ### Reproducer. ```. ROOT::RDataFrame df(1);. df.Describe.GetNFiles();. ```. ### ROOT version. v6.30 and up. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15617
https://github.com/root-project/root/issues/15617:764,deployability,version,version,764,"`RDF::Describe` returns an incorrect file count; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `GetNFiles()` on the object returned by `Define` gives an incorrect value. The underlying issue is the fact that the `RDFDescription` gets constructed without this number and thus `fFileCount` does not get properly initialized. It should be fixable by adding it as an argument in this line:. https://github.com/root-project/root/blob/f53eb1b4f7c5df1350b0a2756695c8e951e8a34f/tree/dataframe/src/RInterfaceBase.cxx#L286. Additionally, perhaps the constructor without this arguments should be removed altogether to avoid similar bugs in the future. ### Reproducer. ```. ROOT::RDataFrame df(1);. df.Describe.GetNFiles();. ```. ### ROOT version. v6.30 and up. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15617
https://github.com/root-project/root/issues/15617:791,deployability,Instal,Installation,791,"`RDF::Describe` returns an incorrect file count; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `GetNFiles()` on the object returned by `Define` gives an incorrect value. The underlying issue is the fact that the `RDFDescription` gets constructed without this number and thus `fFileCount` does not get properly initialized. It should be fixable by adding it as an argument in this line:. https://github.com/root-project/root/blob/f53eb1b4f7c5df1350b0a2756695c8e951e8a34f/tree/dataframe/src/RInterfaceBase.cxx#L286. Additionally, perhaps the constructor without this arguments should be removed altogether to avoid similar bugs in the future. ### Reproducer. ```. ROOT::RDataFrame df(1);. df.Describe.GetNFiles();. ```. ### ROOT version. v6.30 and up. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15617
https://github.com/root-project/root/issues/15617:764,integrability,version,version,764,"`RDF::Describe` returns an incorrect file count; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `GetNFiles()` on the object returned by `Define` gives an incorrect value. The underlying issue is the fact that the `RDFDescription` gets constructed without this number and thus `fFileCount` does not get properly initialized. It should be fixable by adding it as an argument in this line:. https://github.com/root-project/root/blob/f53eb1b4f7c5df1350b0a2756695c8e951e8a34f/tree/dataframe/src/RInterfaceBase.cxx#L286. Additionally, perhaps the constructor without this arguments should be removed altogether to avoid similar bugs in the future. ### Reproducer. ```. ROOT::RDataFrame df(1);. df.Describe.GetNFiles();. ```. ### ROOT version. v6.30 and up. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15617
https://github.com/root-project/root/issues/15617:764,modifiability,version,version,764,"`RDF::Describe` returns an incorrect file count; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `GetNFiles()` on the object returned by `Define` gives an incorrect value. The underlying issue is the fact that the `RDFDescription` gets constructed without this number and thus `fFileCount` does not get properly initialized. It should be fixable by adding it as an argument in this line:. https://github.com/root-project/root/blob/f53eb1b4f7c5df1350b0a2756695c8e951e8a34f/tree/dataframe/src/RInterfaceBase.cxx#L286. Additionally, perhaps the constructor without this arguments should be removed altogether to avoid similar bugs in the future. ### Reproducer. ```. ROOT::RDataFrame df(1);. df.Describe.GetNFiles();. ```. ### ROOT version. v6.30 and up. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15617
https://github.com/root-project/root/issues/15617:325,reliability,doe,does,325,"`RDF::Describe` returns an incorrect file count; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `GetNFiles()` on the object returned by `Define` gives an incorrect value. The underlying issue is the fact that the `RDFDescription` gets constructed without this number and thus `fFileCount` does not get properly initialized. It should be fixable by adding it as an argument in this line:. https://github.com/root-project/root/blob/f53eb1b4f7c5df1350b0a2756695c8e951e8a34f/tree/dataframe/src/RInterfaceBase.cxx#L286. Additionally, perhaps the constructor without this arguments should be removed altogether to avoid similar bugs in the future. ### Reproducer. ```. ROOT::RDataFrame df(1);. df.Describe.GetNFiles();. ```. ### ROOT version. v6.30 and up. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15617
https://github.com/root-project/root/issues/15617:644,safety,avoid,avoid,644,"`RDF::Describe` returns an incorrect file count; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `GetNFiles()` on the object returned by `Define` gives an incorrect value. The underlying issue is the fact that the `RDFDescription` gets constructed without this number and thus `fFileCount` does not get properly initialized. It should be fixable by adding it as an argument in this line:. https://github.com/root-project/root/blob/f53eb1b4f7c5df1350b0a2756695c8e951e8a34f/tree/dataframe/src/RInterfaceBase.cxx#L286. Additionally, perhaps the constructor without this arguments should be removed altogether to avoid similar bugs in the future. ### Reproducer. ```. ROOT::RDataFrame df(1);. df.Describe.GetNFiles();. ```. ### ROOT version. v6.30 and up. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15617
https://github.com/root-project/root/issues/15617:859,testability,context,context,859,"`RDF::Describe` returns an incorrect file count; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `GetNFiles()` on the object returned by `Define` gives an incorrect value. The underlying issue is the fact that the `RDFDescription` gets constructed without this number and thus `fFileCount` does not get properly initialized. It should be fixable by adding it as an argument in this line:. https://github.com/root-project/root/blob/f53eb1b4f7c5df1350b0a2756695c8e951e8a34f/tree/dataframe/src/RInterfaceBase.cxx#L286. Additionally, perhaps the constructor without this arguments should be removed altogether to avoid similar bugs in the future. ### Reproducer. ```. ROOT::RDataFrame df(1);. df.Describe.GetNFiles();. ```. ### ROOT version. v6.30 and up. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15617
https://github.com/root-project/root/pull/15618:68,deployability,depend,depends,68,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:482,deployability,version,version,482,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:597,deployability,updat,updated,597,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:68,integrability,depend,depends,68,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:285,integrability,wrap,wrapping,285,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:482,integrability,version,version,482,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:31,interoperability,compatib,compatibility,31,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:531,interoperability,compatib,compatibility,531,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:68,modifiability,depend,depends,68,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:482,modifiability,version,version,482,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:242,performance,disk,disk,242,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:13,safety,test,tests,13,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:68,safety,depend,depends,68,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:211,safety,test,tests,211,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:518,safety,test,test,518,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:567,safety,test,tested,567,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:597,safety,updat,updated,597,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:597,security,updat,updated,597,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:13,testability,test,tests,13,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:68,testability,depend,depends,68,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:211,testability,test,tests,211,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:330,testability,verif,verify,330,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:435,testability,simul,simulate,435,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:518,testability,test,test,518,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15618:567,testability,test,tested,567,"[ntuple] Add tests for forward compatibility; # This Pull request:. depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works. The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15618
https://github.com/root-project/root/pull/15620:277,availability,failur,failures,277,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:277,deployability,fail,failures,277,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:428,deployability,Fail,Failed,428,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:913,energy efficiency,core,core,913,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:13,integrability,buffer,buffer,13,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:862,integrability,buffer,buffer,862,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:157,modifiability,variab,variable,157,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:277,performance,failur,failures,277,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:528,performance,time,timeout,528,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:277,reliability,fail,failures,277,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:428,reliability,Fail,Failed,428,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:7,safety,Avoid,Avoid,7,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:314,safety,Test,Test,314,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:448,safety,TEST,TEST,448,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:528,safety,timeout,timeout,528,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:585,safety,TEST,TEST,585,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:628,safety,test,test,628,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:878,safety,detect,detected,878,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:878,security,detect,detected,878,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:314,testability,Test,Test,314,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:448,testability,TEST,TEST,448,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:585,testability,TEST,TEST,585,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:628,testability,test,test,628,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/pull/15620:453,usability,COMMAND,COMMAND,453,[tree] Avoid buffer overflow in TBranch; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15620
https://github.com/root-project/root/issues/15621:140,availability,failur,failures,140,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:1240,availability,Operat,Operating,1240,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:140,deployability,fail,failures,140,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:291,deployability,Fail,Failed,291,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:1178,deployability,version,version,1178,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:1196,deployability,Instal,Installation,1196,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:776,energy efficiency,core,core,776,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:0,integrability,Buffer,Buffer,0,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:725,integrability,buffer,buffer,725,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:1178,integrability,version,version,1178,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:1178,modifiability,version,version,1178,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:140,performance,failur,failures,140,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:391,performance,time,timeout,391,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:140,reliability,fail,failures,140,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:291,reliability,Fail,Failed,291,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:177,safety,Test,Test,177,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:311,safety,TEST,TEST,311,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:391,safety,timeout,timeout,391,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:448,safety,TEST,TEST,448,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:491,safety,test,test,491,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:741,safety,detect,detected,741,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:1042,safety,test,test,1042,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:741,security,detect,detected,741,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:177,testability,Test,Test,177,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:311,testability,TEST,TEST,311,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:448,testability,TEST,TEST,448,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:491,testability,test,test,491,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:1042,testability,test,test,1042,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:1287,testability,context,context,1287,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/issues/15621:316,usability,COMMAND,COMMAND,316,Buffer overflow in TBranch::Init; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type. ```. 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec. -- TEST COMMAND -- . cd /github/home/ROOT-CI/roottest/root/tree/branches. /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest. -- BEGIN TEST OUTPUT --. /usr/bin/gmake -f Makefile test. gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'. . Processing runnoname.C... Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'. *** buffer overflow detected ***: terminated. Aborted (core dumped). gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'. ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15621
https://github.com/root-project/root/pull/15622:24,deployability,depend,dependency,24,"[tutorials][tmva] Fix a dependency issue with TMVA tutorials; Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15622
https://github.com/root-project/root/pull/15622:145,energy efficiency,model,model,145,"[tutorials][tmva] Fix a dependency issue with TMVA tutorials; Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15622
https://github.com/root-project/root/pull/15622:24,integrability,depend,dependency,24,"[tutorials][tmva] Fix a dependency issue with TMVA tutorials; Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15622
https://github.com/root-project/root/pull/15622:163,interoperability,conflict,conflict,163,"[tutorials][tmva] Fix a dependency issue with TMVA tutorials; Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15622
https://github.com/root-project/root/pull/15622:24,modifiability,depend,dependency,24,"[tutorials][tmva] Fix a dependency issue with TMVA tutorials; Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15622
https://github.com/root-project/root/pull/15622:24,safety,depend,dependency,24,"[tutorials][tmva] Fix a dependency issue with TMVA tutorials; Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15622
https://github.com/root-project/root/pull/15622:155,safety,avoid,avoid,155,"[tutorials][tmva] Fix a dependency issue with TMVA tutorials; Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15622
https://github.com/root-project/root/pull/15622:145,security,model,model,145,"[tutorials][tmva] Fix a dependency issue with TMVA tutorials; Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15622
https://github.com/root-project/root/pull/15622:24,testability,depend,dependency,24,"[tutorials][tmva] Fix a dependency issue with TMVA tutorials; Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15622
https://github.com/root-project/root/pull/15623:4,safety,Avoid,Avoid,4,io: Avoid infinite recursion in TFile::Open; This fixes #15590.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15623
https://github.com/root-project/root/pull/15624:4,safety,Avoid,Avoid,4,io: Avoid infinite recursion in TFile::Open; This fixes #15590.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15624
https://github.com/root-project/root/pull/15625:11,safety,Avoid,Avoid,11,[v628] io: Avoid infinite recursion in TFile::Open; This fixes #15590.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15625
https://github.com/root-project/root/pull/15626:143,modifiability,variab,variable,143,[6.32] Backport of #15620; Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Related to https://github.com/root-project/root/issues/15621,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15626
https://github.com/root-project/root/pull/15628:107,availability,failur,failures,107,[6.32] Backport of #15477; It's a small change and it may help with the sporadic `dataframe-vary` unittest failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15628
https://github.com/root-project/root/pull/15628:107,deployability,fail,failures,107,[6.32] Backport of #15477; It's a small change and it may help with the sporadic `dataframe-vary` unittest failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15628
https://github.com/root-project/root/pull/15628:107,performance,failur,failures,107,[6.32] Backport of #15477; It's a small change and it may help with the sporadic `dataframe-vary` unittest failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15628
https://github.com/root-project/root/pull/15628:107,reliability,fail,failures,107,[6.32] Backport of #15477; It's a small change and it may help with the sporadic `dataframe-vary` unittest failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15628
https://github.com/root-project/root/pull/15628:98,testability,unit,unittest,98,[6.32] Backport of #15477; It's a small change and it may help with the sporadic `dataframe-vary` unittest failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15628
https://github.com/root-project/root/pull/15628:58,usability,help,help,58,[6.32] Backport of #15477; It's a small change and it may help with the sporadic `dataframe-vary` unittest failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15628
https://github.com/root-project/root/pull/15631:39,deployability,depend,dependency,39,[backport][632][tutorials][tmva] Fix a dependency issue with TMVA tutorials; BP of https://github.com/root-project/root/pull/15622.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15631
https://github.com/root-project/root/pull/15631:39,integrability,depend,dependency,39,[backport][632][tutorials][tmva] Fix a dependency issue with TMVA tutorials; BP of https://github.com/root-project/root/pull/15622.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15631
https://github.com/root-project/root/pull/15631:39,modifiability,depend,dependency,39,[backport][632][tutorials][tmva] Fix a dependency issue with TMVA tutorials; BP of https://github.com/root-project/root/pull/15622.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15631
https://github.com/root-project/root/pull/15631:39,safety,depend,dependency,39,[backport][632][tutorials][tmva] Fix a dependency issue with TMVA tutorials; BP of https://github.com/root-project/root/pull/15622.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15631
https://github.com/root-project/root/pull/15631:39,testability,depend,dependency,39,[backport][632][tutorials][tmva] Fix a dependency issue with TMVA tutorials; BP of https://github.com/root-project/root/pull/15622.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15631
https://github.com/root-project/root/pull/15636:22,modifiability,pac,packages,22,"[BP][632] Fix tmva DL packages for new cudnn v9; BP of https://github.com/root-project/root/pull/15601 and https://github.com/root-project/root/pull/15634 , de facto the second PR minimally amends the first one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15636
https://github.com/root-project/root/pull/15636:180,usability,minim,minimally,180,"[BP][632] Fix tmva DL packages for new cudnn v9; BP of https://github.com/root-project/root/pull/15601 and https://github.com/root-project/root/pull/15634 , de facto the second PR minimally amends the first one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15636
https://github.com/root-project/root/issues/15638:1929,availability,down,download,1929,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:2133,availability,Operat,Operating,2133,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:21,deployability,fail,fail,21,"[RDF] Some tutorials fail to run when compiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/maste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1036,deployability,updat,updated,1036,"mpiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1297,deployability,contain,containing,1297,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1562,deployability,updat,update,1562,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:2073,deployability,version,version,2073,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:2095,deployability,Instal,Installation,2095,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:340,integrability,filter,filters,340,"[RDF] Some tutorials fail to run when compiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/maste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1262,integrability,filter,filter,1262,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:2073,integrability,version,version,2073,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:682,interoperability,specif,specify,682,"[RDF] Some tutorials fail to run when compiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/maste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1187,interoperability,compatib,compatibility,1187,"c/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:2073,modifiability,version,version,2073,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1146,performance,perform,performance,1146,"HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. D",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1841,performance,perform,performance,1841,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:21,reliability,fail,fail,21,"[RDF] Some tutorials fail to run when compiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/maste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1036,safety,updat,updated,1036,"mpiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1562,safety,updat,update,1562,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:387,security,sign,signature,387,"[RDF] Some tutorials fail to run when compiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/maste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1036,security,updat,updated,1036,"mpiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1435,security,sign,signatures,1435,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1562,security,updat,update,1562,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:2191,testability,context,context,2191,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:358,usability,user,user-defined,358,"[RDF] Some tutorials fail to run when compiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/maste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:575,usability,document,documented,575,"[RDF] Some tutorials fail to run when compiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/maste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:850,usability,user,users,850,"[RDF] Some tutorials fail to run when compiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/maste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1005,usability,document,documentation,1005,"utorials fail to run when compiled due to jitting issues; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. [df106_HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__Hig",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1146,usability,perform,performance,1146,"HiggsToFourLeptons.C](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. D",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1239,usability,clear,clear,1239,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1250,usability,user,user,1250,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1310,usability,user,user-defined,1310,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1397,usability,user,user,1397,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1804,usability,user,user,1804,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/issues/15638:1841,usability,perform,performance,1841,"gsToFourLeptons_8C.html) crashes when it is compiled and run (it runs fine if interpreted). This is due to jitted code in some filters that call user-defined functions whose signature is unknown to Cling. This is a general problem with functions that evaluate code at runtime and, while it might not be possible to fix in all cases, it should at least be better documented. The tutorials themselves should be written to work both when compiled and when interpreted, or specify why they cannot be run as-is if compiled. There is also a more general discussion to be made about RDF and the kind of guarantees that it should provide to its users. Ideally there should be a way to use RDF such that it will be guaranteed to run correctly regardless of being compiled or interpreted. Finally, the documentation of RDF should be updated to better clarify the caveats and limitations of passing C++ expressions as strings, both in terms of performance and, especially, in terms of compatibility with compiled code (i.e. it should be clear to a user that a filter using an interpreted string containing a user-defined function may not work when AOT-compiled without additional efforts on the user side - like manually passing the signatures to cling beforehand). ### Bullet point recap. - [ ] fix the tutorials so they run properly when compiled AOT. - [ ] update the doc of RDF to include caveats and limitations of using jitted expressions. - [ ] (to be discussed) introduce an opt-in ""strict mode"" for RDF (C++ only) that checks and rejects all cases when jitting is required. This would allow a user to catch code that may incur in performance penalties and may not work properly when AOT-compiled. . ### Reproducer. 1. download the source code of [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html). 2. compile it. 3. run it. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Debian GNU/Linux trixie. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15638
https://github.com/root-project/root/pull/15639:367,deployability,updat,updated,367,[RDF] Make df106_HiggsToFourLeptons.C run properly when compiled; # This Pull request:. Explicitly declares the signatures of types that are used in jitted expressions so that the tutorial runs properly even when compiled AOT. ## Changes or fixes:. Partially fixes https://github.com/root-project/root/issues/15638. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15639
https://github.com/root-project/root/pull/15639:337,safety,test,tested,337,[RDF] Make df106_HiggsToFourLeptons.C run properly when compiled; # This Pull request:. Explicitly declares the signatures of types that are used in jitted expressions so that the tutorial runs properly even when compiled AOT. ## Changes or fixes:. Partially fixes https://github.com/root-project/root/issues/15638. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15639
https://github.com/root-project/root/pull/15639:367,safety,updat,updated,367,[RDF] Make df106_HiggsToFourLeptons.C run properly when compiled; # This Pull request:. Explicitly declares the signatures of types that are used in jitted expressions so that the tutorial runs properly even when compiled AOT. ## Changes or fixes:. Partially fixes https://github.com/root-project/root/issues/15638. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15639
https://github.com/root-project/root/pull/15639:112,security,sign,signatures,112,[RDF] Make df106_HiggsToFourLeptons.C run properly when compiled; # This Pull request:. Explicitly declares the signatures of types that are used in jitted expressions so that the tutorial runs properly even when compiled AOT. ## Changes or fixes:. Partially fixes https://github.com/root-project/root/issues/15638. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15639
https://github.com/root-project/root/pull/15639:367,security,updat,updated,367,[RDF] Make df106_HiggsToFourLeptons.C run properly when compiled; # This Pull request:. Explicitly declares the signatures of types that are used in jitted expressions so that the tutorial runs properly even when compiled AOT. ## Changes or fixes:. Partially fixes https://github.com/root-project/root/issues/15638. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15639
https://github.com/root-project/root/pull/15639:337,testability,test,tested,337,[RDF] Make df106_HiggsToFourLeptons.C run properly when compiled; # This Pull request:. Explicitly declares the signatures of types that are used in jitted expressions so that the tutorial runs properly even when compiled AOT. ## Changes or fixes:. Partially fixes https://github.com/root-project/root/issues/15638. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15639
https://github.com/root-project/root/issues/15640:21,availability,failur,failures,21,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:143,availability,reliab,reliable,143,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:171,availability,failur,failure,171,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:490,availability,Operat,Operating,490,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:598,availability,failur,failure,598,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:21,deployability,fail,failures,21,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:171,deployability,fail,failure,171,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:430,deployability,version,version,430,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:452,deployability,Instal,Installation,452,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:598,deployability,fail,failure,598,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:108,energy efficiency,Current,Currently,108,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:225,energy efficiency,current,current,225,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
https://github.com/root-project/root/issues/15640:557,energy efficiency,current,currently,557,"[io] Properly handle failures in custom streamers; ### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object). A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15640
