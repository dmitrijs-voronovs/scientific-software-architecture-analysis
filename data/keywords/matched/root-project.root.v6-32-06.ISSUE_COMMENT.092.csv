id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/14968:1953,performance,ERROR,ERROR,1953,"erpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2115,performance,error,error,2115,: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2123,performance,error,error,2123,ng from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2707,performance,error,error,2707,raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. *************,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:159,reliability,FAIL,FAIL,159,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:289,reliability,FAIL,FAILED,289,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2130,reliability,diagno,diagnostics,2130,re. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2721,reliability,diagno,diagnostics,2721,ot using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. ********************. ********,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:3741,reliability,Fail,Failed,3741,ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. ********************. ********************. Failed Tests (1):. Cling :: Prompt/ValuePrinter/Regression.C. ```. -----. @vepadulano What I meant was that the ROOT(Cling) _interpreter_ doesn't support C++20 syntax and libraries AFAIK. Sorry for the confusion.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:3879,reliability,doe,doesn,3879,ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. ********************. ********************. Failed Tests (1):. Cling :: Prompt/ValuePrinter/Regression.C. ```. -----. @vepadulano What I meant was that the ROOT(Cling) _interpreter_ doesn't support C++20 syntax and libraries AFAIK. Sorry for the confusion.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:38,safety,test,test,38,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:115,safety,test,test,115,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:130,safety,patch,patch,130,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:240,safety,TEST,TEST,240,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:413,safety,test,test,413,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:826,safety,test,test,826,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:971,safety,test,test,971,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1017,safety,error,error,1017," . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:20",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1060,safety,input,input,1060,"ould you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1492,safety,Input,Input,1492,"-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1583,safety,test,test,1583,"ub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1628,safety,input,input,1628,"/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1662,safety,input,input,1662,"fy 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1674,safety,Input,Input,1674,"sers/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1714,safety,input,input,1714,"-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'no",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1740,safety,input,input,1740,"oject/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1898,safety,error,error,1898,"derr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/clin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1953,safety,ERROR,ERROR,1953,"erpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2115,safety,error,error,2115,: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2123,safety,error,error,2123,ng from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2707,safety,error,error,2707,raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. *************,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:3748,safety,Test,Tests,3748,ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. ********************. ********************. Failed Tests (1):. Cling :: Prompt/ValuePrinter/Regression.C. ```. -----. @vepadulano What I meant was that the ROOT(Cling) _interpreter_ doesn't support C++20 syntax and libraries AFAIK. Sorry for the confusion.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:130,security,patch,patch,130,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:38,testability,test,test,38,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:47,testability,Regress,Regression,47,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:115,testability,test,test,115,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:194,testability,Regress,Regression,194,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:240,testability,TEST,TEST,240,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:275,testability,Regress,Regression,275,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:413,testability,test,test,413,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:438,testability,Regress,Regression,438,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:661,testability,verif,verify,661,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:826,testability,test,test,826,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:851,testability,Regress,Regression,851,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:971,testability,test,test,971,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:996,testability,Regress,Regression,996,"dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1583,testability,test,test,1583,"ub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1608,testability,Regress,Regression,1608,"/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2130,testability,diagno,diagnostics,2130,re. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2721,testability,diagno,diagnostics,2721,ot using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. ********************. ********,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:3748,testability,Test,Tests,3748,ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. ********************. ********************. Failed Tests (1):. Cling :: Prompt/ValuePrinter/Regression.C. ```. -----. @vepadulano What I meant was that the ROOT(Cling) _interpreter_ doesn't support C++20 syntax and libraries AFAIK. Sorry for the confusion.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:3789,testability,Regress,Regression,3789,ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. ********************. ********************. Failed Tests (1):. Cling :: Prompt/ValuePrinter/Regression.C. ```. -----. @vepadulano What I meant was that the ROOT(Cling) _interpreter_ doesn't support C++20 syntax and libraries AFAIK. Sorry for the confusion.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:356,usability,User,Users,356,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:373,usability,Document,Documents,373,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:454,usability,User,Users,454,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:471,usability,Document,Documents,471,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:554,usability,User,Users,554,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:571,usability,Document,Documents,571,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:632,usability,tool,tools,632,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:676,usability,User,Users,676,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:693,usability,Document,Documents,693,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:769,usability,User,Users,769,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:786,usability,Document,Documents,786,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:883,usability,Command,Command,883,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:914,usability,User,Users,914,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:931,usability,Document,Documents,931,"@dpiparo @vgvassilev . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing valu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1017,usability,error,error,1017," . I've added the test to `Regression.C`. Would you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:20",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1060,usability,input,input,1060,"ould you please take a look? Below is result of the test when this patch is _not_ applied. ```. FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11). ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1230,usability,User,Users,1230,"****** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1247,usability,Document,Documents,1247,":: Prompt/ValuePrinter/Regression.C' FAILED ********************. Script:. --. : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yong",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1492,usability,Input,Input,1492,"-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1526,usability,User,Users,1526,"vm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1543,usability,Document,Documents,1543,"go -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1628,usability,input,input,1628,"/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1634,usability,help,help,1634,"s/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1662,usability,input,input,1662,"fy 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1674,usability,Input,Input,1674,"sers/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1714,usability,input,input,1714,"-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'no",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1740,usability,input,input,1740,"oject/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. --. Exit Code: 1. Command Output (stderr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1898,usability,error,error,1898,"derr):. --. /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/clin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:1953,usability,ERROR,ERROR,1953,"erpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input. // CHECK: { 0, 1, 2, 3, 4 }. ^. <stdin>:35:28: note: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2115,usability,error,error,2115,: scanning from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2123,usability,error,error,2123,ng from here. (PR180::Foo &) @0x10cf6f060. ^. <stdin>:40:114: note: possible intended match here. File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2242,usability,User,Users,2242,e/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2259,usability,Document,Documents,2259,root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here. ^. Input file: <stdin>. Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:. <<<<<<. . . . 30: Using raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2707,usability,error,error,2707,raw input . 31: Not using raw input . 32: (WithUnnamed::Y &) @0x10cf5b000 . 33: (WithUnnamed::Y &) @0x10cf61000 . 34: (X) @0x600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. *************,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2832,usability,User,Users,2832,600000f337a0 . 35: (PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. ********************. ********************. Failed Tests (1):. Cling :: Prompt/ValuePrinter/Regression.C. ```. -----. @vepadulano What I m,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:2849,usability,Document,Documents,2849,(PR180::Foo &) @0x10cf6f060 . check:206'0 X error: no match found. 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. ********************. ********************. Failed Tests (1):. Cling :: Prompt/ValuePrinter/Regression.C. ```. -----. @vepadulano What I meant was that the R,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14968:3887,usability,support,support,3887,ERROR in cling's callPrintValue(): missing value string. . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 37: error: 'error' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 38: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: 'auto' deduced as 'iterator' in declaration of 'iter' and deduced as 'sentinel' in declaration of 'iterEnd' . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 39: error: 'note' diagnostics seen but not expected: . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 40: File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. check:206'1 ? possible intended match. 41: (frontend): in instantiation of function template specialization 'cling::printValue<PR14968::non_common_range>' requested here . check:206'0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. >>>>>>. --. ********************. ********************. Failed Tests (1):. Cling :: Prompt/ValuePrinter/Regression.C. ```. -----. @vepadulano What I meant was that the ROOT(Cling) _interpreter_ doesn't support C++20 syntax and libraries AFAIK. Sorry for the confusion.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14968
https://github.com/root-project/root/pull/14969:33,energy efficiency,load,load,33,"@pcanal . My implementation also load `libHist` only when function was not found. I see no difference. . Of course, I can remove locking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:33,performance,load,load,33,"@pcanal . My implementation also load `libHist` only when function was not found. I see no difference. . Of course, I can remove locking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:129,performance,lock,locking,129,"@pcanal . My implementation also load `libHist` only when function was not found. I see no difference. . Of course, I can remove locking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:129,security,lock,locking,129,"@pcanal . My implementation also load `libHist` only when function was not found. I see no difference. . Of course, I can remove locking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:4,availability,failur,failure,4,The failure in TThreadedObjectAutoMemManagement appears to be likely a race condition that we just introduced that was not there before because the `ProcessLine` was always executed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:4,deployability,fail,failure,4,The failure in TThreadedObjectAutoMemManagement appears to be likely a race condition that we just introduced that was not there before because the `ProcessLine` was always executed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:4,performance,failur,failure,4,The failure in TThreadedObjectAutoMemManagement appears to be likely a race condition that we just introduced that was not there before because the `ProcessLine` was always executed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:4,reliability,fail,failure,4,The failure in TThreadedObjectAutoMemManagement appears to be likely a race condition that we just introduced that was not there before because the `ProcessLine` was always executed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:270,availability,state,state,270,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:366,availability,state,statement,366,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:107,energy efficiency,load,load,107,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:403,energy efficiency,load,load,403,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:742,energy efficiency,load,load,742,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:270,integrability,state,state,270,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:366,integrability,state,statement,366,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:107,performance,load,load,107,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:403,performance,load,load,403,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:525,performance,time,time,525,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:558,performance,lock,lock,558,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:742,performance,load,load,742,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:558,security,lock,lock,558,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:. ```c++. {. if (!name || !*name). return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change. // between the end of FindObject and the if statement. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // If 2 threads gets here at the same time, the static initialization ""lock"". // will stall one of them until ProcessLine is finished and both will return the . // correct answer. // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`. // and restart after this thread has finished the initialization (i.e. a rare case), . // the only penalty we pay is a spurious 2nd lookup for an unknown function. . [[maybe_unused]] static const auto _res = [&isInited]() {. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return true;. }();. return fFunctions->FindObject(name);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:205,energy efficiency,load,load,205,"But if we are using `static std::atomic<bool> isInited = false;` in the beginning - we do need lambda and can just use it as is:. ```. static std::atomic<bool> isInited = false;. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // load libHist and call only once. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return fFunctions->FindObject(name);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:292,energy efficiency,load,load,292,"But if we are using `static std::atomic<bool> isInited = false;` in the beginning - we do need lambda and can just use it as is:. ```. static std::atomic<bool> isInited = false;. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // load libHist and call only once. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return fFunctions->FindObject(name);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:205,performance,load,load,205,"But if we are using `static std::atomic<bool> isInited = false;` in the beginning - we do need lambda and can just use it as is:. ```. static std::atomic<bool> isInited = false;. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // load libHist and call only once. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return fFunctions->FindObject(name);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:292,performance,load,load,292,"But if we are using `static std::atomic<bool> isInited = false;` in the beginning - we do need lambda and can just use it as is:. ```. static std::atomic<bool> isInited = false;. bool wasInited = isInited.load();. auto f1 = fFunctions->FindObject(name);. if (f1 || wasInited). return f1;. // load libHist and call only once. gROOT->ProcessLine(""TF1::InitStandardFunctions();"");. isInited = true;. return fFunctions->FindObject(name);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:189,performance,time,time,189,> and can just use it as is:. Yes but this is not the most efficient. The `ProcessLine` can still be run up to the number of threads (if all the threads gets to this function for the first time at the same time with an unknown name or a TF1 function name),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:206,performance,time,time,206,> and can just use it as is:. Yes but this is not the most efficient. The `ProcessLine` can still be run up to the number of threads (if all the threads gets to this function for the first time at the same time with an unknown name or a TF1 function name),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14969:59,usability,efficien,efficient,59,> and can just use it as is:. Yes but this is not the most efficient. The `ProcessLine` can still be run up to the number of threads (if all the threads gets to this function for the first time at the same time with an unknown name or a TF1 function name),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14969
https://github.com/root-project/root/pull/14970:32,modifiability,evolv,evolved,32,Thanks @linev . The original PR evolved (https://github.com/root-project/root/pull/14960) maybe we can wait it's merged and rebase this one on top of master?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14970
https://github.com/root-project/root/issues/14972:179,deployability,build,build,179,@vgvassilev great idea. I think triggering the tests only if something in that dir changes is perfectly possible. Do you have some starting point which can be taken as example to build a GH workflow to run on the ROOT infra?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14972
https://github.com/root-project/root/issues/14972:47,safety,test,tests,47,@vgvassilev great idea. I think triggering the tests only if something in that dir changes is perfectly possible. Do you have some starting point which can be taken as example to build a GH workflow to run on the ROOT infra?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14972
https://github.com/root-project/root/issues/14972:47,testability,test,tests,47,@vgvassilev great idea. I think triggering the tests only if something in that dir changes is perfectly possible. Do you have some starting point which can be taken as example to build a GH workflow to run on the ROOT infra?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14972
https://github.com/root-project/root/issues/14972:190,usability,workflow,workflow,190,@vgvassilev great idea. I think triggering the tests only if something in that dir changes is perfectly possible. Do you have some starting point which can be taken as example to build a GH workflow to run on the ROOT infra?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14972
https://github.com/root-project/root/issues/14972:23,testability,simpl,simple,23,"Should be something as simple as:. ```. git clone our/llvm/fork. git clone cling. git checkout cling-latest. cmake -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_BUILD_TYPE=Debug -DLLVM_TARGETS_TO_BUILD=""host;nvptx"" -DLLVM_EXTERNAL_PROJECTS=""cling"" -DLLVM_EXTERNAL_CLING_SOURCE_DIR=/path/to/where/we/cloned/cling ../llvm. make check-cling. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14972
https://github.com/root-project/root/issues/14972:23,usability,simpl,simple,23,"Should be something as simple as:. ```. git clone our/llvm/fork. git clone cling. git checkout cling-latest. cmake -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_BUILD_TYPE=Debug -DLLVM_TARGETS_TO_BUILD=""host;nvptx"" -DLLVM_EXTERNAL_PROJECTS=""cling"" -DLLVM_EXTERNAL_CLING_SOURCE_DIR=/path/to/where/we/cloned/cling ../llvm. make check-cling. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14972
https://github.com/root-project/root/pull/14973:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14973
https://github.com/root-project/root/pull/14974:43,safety,review,review,43,adding some more compiler expertise in the review pool.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14974
https://github.com/root-project/root/pull/14974:43,testability,review,review,43,adding some more compiler expertise in the review pool.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14974
https://github.com/root-project/root/pull/14974:51,usability,clear,clearly,51,Just rebased to see the situation on the macs more clearly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14974
https://github.com/root-project/root/pull/14980:66,availability,servic,services,66,"Thanks for this! Btw, it seems this one's hanging: https://lcgapp-services.cern.ch/root-jenkins/job/root-makedoc-v628/105/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14980
https://github.com/root-project/root/pull/14980:66,deployability,servic,services,66,"Thanks for this! Btw, it seems this one's hanging: https://lcgapp-services.cern.ch/root-jenkins/job/root-makedoc-v628/105/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14980
https://github.com/root-project/root/pull/14980:66,integrability,servic,services,66,"Thanks for this! Btw, it seems this one's hanging: https://lcgapp-services.cern.ch/root-jenkins/job/root-makedoc-v628/105/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14980
https://github.com/root-project/root/pull/14980:66,modifiability,servic,services,66,"Thanks for this! Btw, it seems this one's hanging: https://lcgapp-services.cern.ch/root-jenkins/job/root-makedoc-v628/105/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14980
https://github.com/root-project/root/issues/14981:680,availability,operat,operation,680,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:9,deployability,updat,update,9,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:271,deployability,depend,depends,271,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:709,deployability,manag,management,709,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:929,deployability,manag,management,929,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:709,energy efficiency,manag,management,709,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:929,energy efficiency,manag,management,929,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:271,integrability,depend,depends,271,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:609,interoperability,prox,proxy,609,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:271,modifiability,depend,depends,271,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:702,performance,memor,memory,702,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:865,performance,memor,memory,865,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:903,performance,content,contents,903,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:955,performance,memor,memory,955,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:1567,performance,memor,memory,1567,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:1513,reliability,doe,doesn,1513,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:9,safety,updat,update,9,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:271,safety,depend,depends,271,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:709,safety,manag,management,709,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:929,safety,manag,management,929,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:9,security,updat,update,9,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:62,testability,context,context,62,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:271,testability,depend,depends,271,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:992,testability,simpl,simplified,992,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:46,usability,clear,clear,46,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:326,usability,behavi,behaviour,326,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:636,usability,user,user,636,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:702,usability,memor,memory,702,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:865,usability,memor,memory,865,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:955,usability,memor,memory,955,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:969,usability,clear,clearly,969,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:992,usability,simpl,simplified,992,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/issues/14981:1567,usability,memor,memory,1567,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things. ```. my_data = rvec. ```. Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas. ```. my_data = numpy.asarray(rvec). ```. Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example. ```. process = psutil.Process(). ROOT.gInterpreter.Declare("""""". auto create_rvec(unsigned int n) {. //return std::array<unsigned int, 3>({n, n, n});. return ROOT::RVec<unsigned int>({n, n, n});. }. """"""). df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""). rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():. return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(). print(mem0). for v2 in rvecs:. n = v2. mem2 = get_mem_usage(). print(mem2). ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981
https://github.com/root-project/root/pull/14982:42,modifiability,deco,decoding,42,"I think what's happening here is that the decoding of the page and the interpretation gets confused. The column type is most likely *Split*Index[32|64]. So first the page gets delta-decoded and then interpreted, leading to actual page values of `[3, 7], [12, 18]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:182,modifiability,deco,decoded,182,"I think what's happening here is that the decoding of the page and the interpretation gets confused. The column type is most likely *Split*Index[32|64]. So first the page gets delta-decoded and then interpreted, leading to actual page values of `[3, 7], [12, 18]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:98,availability,cluster,cluster,98,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:98,deployability,cluster,cluster,98,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:813,energy efficiency,model,model,813,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:705,interoperability,specif,specification,705,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:182,modifiability,deco,decompression,182,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:205,modifiability,deco,decoding,205,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:515,modifiability,deco,decoding,515,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:576,modifiability,deco,decoding,576,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:888,modifiability,deco,decoding,888,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:980,modifiability,deco,decoding,980,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:813,security,model,model,813,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:855,testability,unit,unit,855,"Let me spell out the steps more explicitly. First, we're looking at total of two pages in the 2nd cluster of the file. And for each of the pages, we have:. ```. raw bytes after page decompression -> split decoding -> reinterpret as Index64. ```. and for each of the two pages, we get:. ```. first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 8, 3, 4, 9, 14, 18, 8, 14, 16, 6, 8, 7, 11, 9]. ```. Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. - - -. Btw, I think why this was initially counterintuitive to me was because my mental model treats ""pages"" as pure byte storage unit -- but in order to do split decoding, you need to know the column type size (how many bytes to de-split), and for delta decoding, you need to know the column type (what is `+`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:216,interoperability,specif,specification,216,"> Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. Yes, I think that makes sense.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:26,modifiability,deco,decoding,26,"> Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. Yes, I think that makes sense.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:87,modifiability,deco,decoding,87,"> Now we need to do delta decoding, and I think the point you're making is that, delta decoding also happens inside each page? I can change the PR to emphasize split/zigzag/delta encoding all happens per-page in the specification then. Yes, I think that makes sense.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:56,availability,ping,ping,56,@Moelf just checking if I overlooked anything: will you ping me when the PR is adjusted according to the discussion?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/pull/14982:35,performance,time,time,35,"@jblomer have a look when you have time, thanks a lot!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14982
https://github.com/root-project/root/issues/14987:75,deployability,build,builds,75,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:93,deployability,depend,dependencies,93,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:240,deployability,scale,scale,240,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:240,energy efficiency,scale,scale,240,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:93,integrability,depend,dependencies,93,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:93,modifiability,depend,dependencies,93,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:240,modifiability,scal,scale,240,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:85,performance,cach,caching,85,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:240,performance,scale,scale,240,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:383,performance,cach,caches,383,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:93,safety,depend,dependencies,93,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:401,safety,test,tests,401,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:93,testability,depend,dependencies,93,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:401,testability,test,tests,401,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:166,usability,feedback,feedback,166,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:77,deployability,build,builds,77,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:95,deployability,depend,dependencies,95,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:242,deployability,scale,scale,242,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:242,energy efficiency,scale,scale,242,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:95,integrability,depend,dependencies,95,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:494,interoperability,platform,platform,494,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:95,modifiability,depend,dependencies,95,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:242,modifiability,scal,scale,242,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:87,performance,cach,caching,87,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:242,performance,scale,scale,242,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:385,performance,cach,caches,385,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:95,safety,depend,dependencies,95,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:403,safety,test,tests,403,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:95,testability,depend,dependencies,95,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:403,testability,test,tests,403,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:168,usability,feedback,feedback,168,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:45,deployability,build,builds,45,"+1 for both adding nodes and for speedung up builds, any effort is good in this area. It takes very long for a pull request to run all the builds to completion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:139,deployability,build,builds,139,"+1 for both adding nodes and for speedung up builds, any effort is good in this area. It takes very long for a pull request to run all the builds to completion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:149,safety,compl,completion,149,"+1 for both adding nodes and for speedung up builds, any effort is good in this area. It takes very long for a pull request to run all the builds to completion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:149,security,compl,completion,149,"+1 for both adding nodes and for speedung up builds, any effort is good in this area. It takes very long for a pull request to run all the builds to completion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:47,deployability,build,builds,47,"> +1 for both adding nodes and for speedung up builds, any effort is good in this area. One attempt by Axel wrt build speed-up is here: https://github.com/root-project/root/issues/6432#issuecomment-2009372525.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:112,deployability,build,build,112,"> +1 for both adding nodes and for speedung up builds, any effort is good in this area. One attempt by Axel wrt build speed-up is here: https://github.com/root-project/root/issues/6432#issuecomment-2009372525.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:46,deployability,artifact,artifacts,46,"I am closing the issue as completed since now artifacts are used also on macos. This is an ongoing effort, we'll strive continuously to make our builds faster and more efficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:120,deployability,continu,continuously,120,"I am closing the issue as completed since now artifacts are used also on macos. This is an ongoing effort, we'll strive continuously to make our builds faster and more efficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:145,deployability,build,builds,145,"I am closing the issue as completed since now artifacts are used also on macos. This is an ongoing effort, we'll strive continuously to make our builds faster and more efficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:26,safety,compl,completed,26,"I am closing the issue as completed since now artifacts are used also on macos. This is an ongoing effort, we'll strive continuously to make our builds faster and more efficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:26,security,compl,completed,26,"I am closing the issue as completed since now artifacts are used also on macos. This is an ongoing effort, we'll strive continuously to make our builds faster and more efficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/issues/14987:168,usability,efficien,efficient,168,"I am closing the issue as completed since now artifacts are used also on macos. This is an ongoing effort, we'll strive continuously to make our builds faster and more efficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987
https://github.com/root-project/root/pull/14989:23,integrability,Transform,Transform,23,There is also the file Transform.C with occurrences but I didn't touch that one as I thought it could lead to problems,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14989
https://github.com/root-project/root/pull/14989:23,interoperability,Transform,Transform,23,There is also the file Transform.C with occurrences but I didn't touch that one as I thought it could lead to problems,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14989
https://github.com/root-project/root/pull/14989:54,reliability,pra,practice,54,"We do not want that change there. That's not a common practice in C++ especially in the source files. I do not think we should change the tests, either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14989
https://github.com/root-project/root/pull/14989:138,safety,test,tests,138,"We do not want that change there. That's not a common practice in C++ especially in the source files. I do not think we should change the tests, either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14989
https://github.com/root-project/root/pull/14989:138,testability,test,tests,138,"We do not want that change there. That's not a common practice in C++ especially in the source files. I do not think we should change the tests, either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14989
https://github.com/root-project/root/pull/14993:156,performance,parallel,parallelism,156,"Great simplification, which matches well the PROOF=OFF by default in master: thanks. This is not very important, but could users rely on some other sort of parallelism, e.g. T{Thread/Process}Executor?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:6,testability,simpl,simplification,6,"Great simplification, which matches well the PROOF=OFF by default in master: thanks. This is not very important, but could users rely on some other sort of parallelism, e.g. T{Thread/Process}Executor?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:6,usability,simpl,simplification,6,"Great simplification, which matches well the PROOF=OFF by default in master: thanks. This is not very important, but could users rely on some other sort of parallelism, e.g. T{Thread/Process}Executor?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:123,usability,user,users,123,"Great simplification, which matches well the PROOF=OFF by default in master: thanks. This is not very important, but could users rely on some other sort of parallelism, e.g. T{Thread/Process}Executor?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:186,availability,servic,services,186,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:618,availability,Error,Error,618,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:132,deployability,fail,failing,132,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:146,deployability,build,building,146,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:186,deployability,servic,services,186,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:186,integrability,servic,services,186,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:186,modifiability,servic,services,186,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:618,performance,Error,Error,618,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:132,reliability,fail,failing,132,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:618,safety,Error,Error,618,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:422,security,ident,identifier,422,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:618,usability,Error,Error,618,"Thanks! Related: maybe it's good to remove also TProof and other deprecated features from the roofit tutorials. Right now, many are failing while building the docu, see:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/console. things like:. ```. warning: 'createIterator' is deprecated: will be removed in ROOT v6.34: begin(), end() and range-based for loops. . use of undeclared identifier 'TProofLite' because of inc/RooStats/ProofConfig.h: int nMaxWorkers = gROOT->ProcessLineFast(""TProofLite::GetNumberOfWorkers()"");. Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian. *** Break *** segmentation violation. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:257,performance,time,time,257,"> Oh right, sorry! I think the only thing missing would be to replace the deprecated createIterator functions in two or three files under tutorials. grep -r createIterator tutorials/. Thanks I get it now! I have opened a PR, feel free to review if you have time:. https://github.com/root-project/root/pull/15024",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:238,safety,review,review,238,"> Oh right, sorry! I think the only thing missing would be to replace the deprecated createIterator functions in two or three files under tutorials. grep -r createIterator tutorials/. Thanks I get it now! I have opened a PR, feel free to review if you have time:. https://github.com/root-project/root/pull/15024",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14993:238,testability,review,review,238,"> Oh right, sorry! I think the only thing missing would be to replace the deprecated createIterator functions in two or three files under tutorials. grep -r createIterator tutorials/. Thanks I get it now! I have opened a PR, feel free to review if you have time:. https://github.com/root-project/root/pull/15024",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993
https://github.com/root-project/root/pull/14997:77,deployability,fail,fails,77,"My attempt to hotfix the problem didn't work out after all, the test *still* fails on Windows :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14997
https://github.com/root-project/root/pull/14997:77,reliability,fail,fails,77,"My attempt to hotfix the problem didn't work out after all, the test *still* fails on Windows :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14997
https://github.com/root-project/root/pull/14997:14,safety,hot,hotfix,14,"My attempt to hotfix the problem didn't work out after all, the test *still* fails on Windows :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14997
https://github.com/root-project/root/pull/14997:64,safety,test,test,64,"My attempt to hotfix the problem didn't work out after all, the test *still* fails on Windows :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14997
https://github.com/root-project/root/pull/14997:64,testability,test,test,64,"My attempt to hotfix the problem didn't work out after all, the test *still* fails on Windows :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14997
https://github.com/root-project/root/pull/14999:119,availability,failur,failures,119,"Please note that I don't touch any existing code, just add some scripts which are independent from the rest, so the CI failures are not related to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14999
https://github.com/root-project/root/pull/14999:119,deployability,fail,failures,119,"Please note that I don't touch any existing code, just add some scripts which are independent from the rest, so the CI failures are not related to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14999
https://github.com/root-project/root/pull/14999:119,performance,failur,failures,119,"Please note that I don't touch any existing code, just add some scripts which are independent from the rest, so the CI failures are not related to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14999
https://github.com/root-project/root/pull/14999:119,reliability,fail,failures,119,"Please note that I don't touch any existing code, just add some scripts which are independent from the rest, so the CI failures are not related to my changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14999
https://github.com/root-project/root/pull/15001:42,integrability,messag,message,42,"Last push only fixed a typo in the commit message (that I found when opening the PR but forgot to push); cancelled the CI jobs, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15001
https://github.com/root-project/root/pull/15001:42,interoperability,messag,message,42,"Last push only fixed a typo in the commit message (that I found when opening the PR but forgot to push); cancelled the CI jobs, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15001
https://github.com/root-project/root/pull/15001:105,usability,cancel,cancelled,105,"Last push only fixed a typo in the commit message (that I found when opening the PR but forgot to push); cancelled the CI jobs, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15001
https://github.com/root-project/root/pull/15004:91,performance,synch,synchronized,91,"Independently from testing by ALICE, I believe this change is correct and I went ahead and synchronized it into a tag in our fork of the LLVM monorepo. @vgvassilev can you review please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:19,safety,test,testing,19,"Independently from testing by ALICE, I believe this change is correct and I went ahead and synchronized it into a tag in our fork of the LLVM monorepo. @vgvassilev can you review please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:172,safety,review,review,172,"Independently from testing by ALICE, I believe this change is correct and I went ahead and synchronized it into a tag in our fork of the LLVM monorepo. @vgvassilev can you review please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:19,testability,test,testing,19,"Independently from testing by ALICE, I believe this change is correct and I went ahead and synchronized it into a tag in our fork of the LLVM monorepo. @vgvassilev can you review please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:172,testability,review,review,172,"Independently from testing by ALICE, I believe this change is correct and I went ahead and synchronized it into a tag in our fork of the LLVM monorepo. @vgvassilev can you review please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:232,deployability,API,API,232,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:213,integrability,coupl,couple,213,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:224,integrability,pub,public,224,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:232,integrability,API,API,232,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:232,interoperability,API,API,232,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:152,modifiability,reu,reusing,152,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:213,modifiability,coupl,couple,213,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:202,security,expos,exposing,202,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:15,testability,plan,plan,15,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:161,testability,Context,ContextRAII,161,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15004:213,testability,coupl,couple,213,"> Do we have a plan how to move that upstream? I was wondering the same. AFAICT we use it for autoloading, which will be hard to argue upstream. But by reusing `ContextRAII`, we can maybe get away with exposing a couple of `public` API functions and move it out of the Clang headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15004
https://github.com/root-project/root/pull/15005:2,safety,avoid,avoid,2,I avoid completely the complication since now we have again the capacity we need.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15005
https://github.com/root-project/root/pull/15005:8,safety,compl,completely,8,I avoid completely the complication since now we have again the capacity we need.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15005
https://github.com/root-project/root/pull/15005:23,safety,compl,complication,23,I avoid completely the complication since now we have again the capacity we need.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15005
https://github.com/root-project/root/pull/15005:8,security,compl,completely,8,I avoid completely the complication since now we have again the capacity we need.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15005
https://github.com/root-project/root/pull/15005:23,security,compl,complication,23,I avoid completely the complication since now we have again the capacity we need.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15005
https://github.com/root-project/root/pull/15006:145,deployability,build,builds,145,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006
https://github.com/root-project/root/pull/15006:117,energy efficiency,frequenc,frequency,117,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006
https://github.com/root-project/root/pull/15006:156,safety,test,tests,156,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006
https://github.com/root-project/root/pull/15006:178,safety,test,test,178,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006
https://github.com/root-project/root/pull/15006:156,testability,test,tests,156,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006
https://github.com/root-project/root/pull/15006:171,testability,simpl,simple,171,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006
https://github.com/root-project/root/pull/15006:178,testability,test,test,178,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006
https://github.com/root-project/root/pull/15006:171,usability,simpl,simple,171,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006
https://github.com/root-project/root/pull/15006:198,usability,help,help,198,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006
https://github.com/root-project/root/pull/15011:8,availability,failur,failure,8,"Windows failure is known and being worked on, Mac failures are unrelated. Merging this now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15011
https://github.com/root-project/root/pull/15011:50,availability,failur,failures,50,"Windows failure is known and being worked on, Mac failures are unrelated. Merging this now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15011
https://github.com/root-project/root/pull/15011:8,deployability,fail,failure,8,"Windows failure is known and being worked on, Mac failures are unrelated. Merging this now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15011
https://github.com/root-project/root/pull/15011:50,deployability,fail,failures,50,"Windows failure is known and being worked on, Mac failures are unrelated. Merging this now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15011
https://github.com/root-project/root/pull/15011:8,performance,failur,failure,8,"Windows failure is known and being worked on, Mac failures are unrelated. Merging this now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15011
https://github.com/root-project/root/pull/15011:50,performance,failur,failures,50,"Windows failure is known and being worked on, Mac failures are unrelated. Merging this now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15011
https://github.com/root-project/root/pull/15011:8,reliability,fail,failure,8,"Windows failure is known and being worked on, Mac failures are unrelated. Merging this now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15011
https://github.com/root-project/root/pull/15011:50,reliability,fail,failures,50,"Windows failure is known and being worked on, Mac failures are unrelated. Merging this now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15011
https://github.com/root-project/root/pull/15014:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15014
https://github.com/root-project/root/pull/15016:4,availability,failur,failure,4,The failure is unrelated and probably due to a regression with https://github.com/root-project/root/pull/15008. Sorry for that,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15016
https://github.com/root-project/root/pull/15016:4,deployability,fail,failure,4,The failure is unrelated and probably due to a regression with https://github.com/root-project/root/pull/15008. Sorry for that,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15016
https://github.com/root-project/root/pull/15016:4,performance,failur,failure,4,The failure is unrelated and probably due to a regression with https://github.com/root-project/root/pull/15008. Sorry for that,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15016
https://github.com/root-project/root/pull/15016:4,reliability,fail,failure,4,The failure is unrelated and probably due to a regression with https://github.com/root-project/root/pull/15008. Sorry for that,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15016
https://github.com/root-project/root/pull/15016:47,testability,regress,regression,47,The failure is unrelated and probably due to a regression with https://github.com/root-project/root/pull/15008. Sorry for that,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15016
https://github.com/root-project/root/pull/15019:15,interoperability,format,format,15,And even clang-format is happy :smile:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15019
https://github.com/root-project/root/pull/15020:174,deployability,build,build,174,"Note that NamesSpaces are not completely clean yet. there is something called ""arrow"" ... which to do not know yet where it comes from.......... _Maybe @couet can try on his build, prior to merging._. I will",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15020
https://github.com/root-project/root/pull/15020:30,safety,compl,completely,30,"Note that NamesSpaces are not completely clean yet. there is something called ""arrow"" ... which to do not know yet where it comes from.......... _Maybe @couet can try on his build, prior to merging._. I will",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15020
https://github.com/root-project/root/pull/15020:30,security,compl,completely,30,"Note that NamesSpaces are not completely clean yet. there is something called ""arrow"" ... which to do not know yet where it comes from.......... _Maybe @couet can try on his build, prior to merging._. I will",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15020
https://github.com/root-project/root/pull/15021:297,deployability,log,log,297,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:358,deployability,log,log,358,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:369,deployability,log,log,369,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:430,deployability,log,log,430,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:297,safety,log,log,297,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:358,safety,log,log,358,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:369,safety,log,log,369,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:430,safety,log,log,430,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:297,security,log,log,297,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:358,security,log,log,358,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:369,security,log,log,369,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:430,security,log,log,430,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:98,testability,verif,verify,98,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:297,testability,log,log,297,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:358,testability,log,log,358,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:369,testability,log,log,369,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:430,testability,log,log,430,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange. [new.log](https://github.com/root-project/root/files/14669633/new.log). [old.log](https://github.com/root-project/root/files/14669634/old.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:113,availability,servic,services,113,What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:113,deployability,servic,services,113,What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:165,deployability,build,build,165,What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:113,integrability,servic,services,113,What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:113,modifiability,servic,services,113,What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:178,safety,test,testReport,178,What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:178,testability,test,testReport,178,What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:115,availability,servic,services,115,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:115,deployability,servic,services,115,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:167,deployability,build,build,167,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:309,deployability,log,log,309,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:370,deployability,log,log,370,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:381,deployability,log,log,381,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:442,deployability,log,log,442,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:115,integrability,servic,services,115,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:115,modifiability,servic,services,115,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:180,safety,test,testReport,180,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:309,safety,log,log,309,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:370,safety,log,log,370,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:381,safety,log,log,381,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:442,safety,log,log,442,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:309,security,log,log,309,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:370,security,log,log,370,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:381,security,log,log,381,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:442,security,log,log,442,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:180,testability,test,testReport,180,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:309,testability,log,log,309,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:370,testability,log,log,370,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:381,testability,log,log,381,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:442,testability,log,log,442,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log). [old.log](https://github.com/root-project/root/files/14693214/old.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:252,deployability,updat,update,252,"It looks like the different are indeed only the compression size of record affected by the change (this includes the `TStreamerInfo` record but also the record for classes that inherits from the class (`TTree`, `NTuple` and histos). So we just need to update those references.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:177,modifiability,inherit,inherits,177,"It looks like the different are indeed only the compression size of record affected by the change (this includes the `TStreamerInfo` record but also the record for classes that inherits from the class (`TTree`, `NTuple` and histos). So we just need to update those references.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:252,safety,updat,update,252,"It looks like the different are indeed only the compression size of record affected by the change (this includes the `TStreamerInfo` record but also the record for classes that inherits from the class (`TTree`, `NTuple` and histos). So we just need to update those references.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:252,security,updat,update,252,"It looks like the different are indeed only the compression size of record affected by the change (this includes the `TStreamerInfo` record but also the record for classes that inherits from the class (`TTree`, `NTuple` and histos). So we just need to update those references.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:13,deployability,build,build,13,"> @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. It seems that Jenkins failed, but I cannot access the logs, so I do not know what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:82,deployability,fail,failed,82,"> @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. It seems that Jenkins failed, but I cannot access the logs, so I do not know what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:114,deployability,log,logs,114,"> @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. It seems that Jenkins failed, but I cannot access the logs, so I do not know what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:82,reliability,fail,failed,82,"> @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. It seems that Jenkins failed, but I cannot access the logs, so I do not know what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:114,safety,log,logs,114,"> @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. It seems that Jenkins failed, but I cannot access the logs, so I do not know what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:103,security,access,access,103,"> @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. It seems that Jenkins failed, but I cannot access the logs, so I do not know what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:114,security,log,logs,114,"> @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. It seems that Jenkins failed, but I cannot access the logs, so I do not know what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:114,testability,log,logs,114,"> @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. It seems that Jenkins failed, but I cannot access the logs, so I do not know what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:11,availability,failur,failures,11,Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:6,deployability,log,logs,6,Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:11,deployability,fail,failures,11,Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:44,energy efficiency,current,currently,44,Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:11,performance,failur,failures,11,Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:11,reliability,fail,failures,11,Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:6,safety,log,logs,6,Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:6,security,log,logs,6,Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:6,testability,log,logs,6,Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:13,availability,failur,failures,13,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:150,availability,toler,tolerance,150,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:8,deployability,log,logs,8,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:13,deployability,fail,failures,13,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:46,energy efficiency,current,currently,46,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:13,performance,failur,failures,13,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:13,reliability,fail,failures,13,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:150,reliability,toleran,tolerance,150,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:8,safety,log,logs,8,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:8,security,log,logs,8,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15021:8,testability,log,logs,8,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15021
https://github.com/root-project/root/pull/15023:30,interoperability,format,format,30,@ferdymercury could you clamg-format your code? Then I think we are ready to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15023
https://github.com/root-project/root/pull/15023:32,interoperability,format,format,32,"> @ferdymercury could you clamg-format your code? Then I think we are ready to merge. Sure, done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15023
https://github.com/root-project/root/pull/15025:25,deployability,fail,failing,25,some tutorial seem to be failing on linux,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15025
https://github.com/root-project/root/pull/15025:25,reliability,fail,failing,25,some tutorial seem to be failing on linux,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15025
https://github.com/root-project/root/pull/15025:21,deployability,build,build,21,I think this is a PR build issue. I would merge and see results with a clean nightly builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15025
https://github.com/root-project/root/pull/15025:85,deployability,build,builds,85,I think this is a PR build issue. I would merge and see results with a clean nightly builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15025
https://github.com/root-project/root/issues/15028:335,performance,cach,caching,335,I think one possible solution will be to manually edit the options (like [here](https://root.cern.ch/doc/master/TFile_8cxx_source.html#l0407)) inside `TFile::Open` (i.e. somewhere [here](https://root.cern.ch/doc/master/TFile_8cxx_source.html#l04175)) so that the `_WITHOUT_GLOBALREGISTRATION` suffix is not interfering with the remote caching decision.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15028
https://github.com/root-project/root/pull/15029:161,usability,confirm,confirm,161,Seems to me this number needs to be changed only when the data structure is changed. This PR only adds getters. I guess it is ok to NOT change it. Let's @pcanal confirm.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15029
https://github.com/root-project/root/pull/15029:27,deployability,version,version,27,This is correct. The class version number is solely about data members and base classes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15029
https://github.com/root-project/root/pull/15029:27,integrability,version,version,27,This is correct. The class version number is solely about data members and base classes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15029
https://github.com/root-project/root/pull/15029:27,modifiability,version,version,27,This is correct. The class version number is solely about data members and base classes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15029
https://github.com/root-project/root/pull/15031:695,interoperability,prox,proxy,695,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031
https://github.com/root-project/root/pull/15031:752,interoperability,bind,bindings,752,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031
https://github.com/root-project/root/pull/15031:752,modifiability,bind,bindings,752,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031
https://github.com/root-project/root/pull/15031:183,safety,review,review,183,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031
https://github.com/root-project/root/pull/15031:614,security,hack,hacked,614,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031
https://github.com/root-project/root/pull/15031:183,testability,review,review,183,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031
https://github.com/root-project/root/pull/15031:358,usability,clear,clearer,358,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031
https://github.com/root-project/root/pull/15031:401,usability,custom,custom,401,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031
https://github.com/root-project/root/pull/15031:929,usability,custom,custom,929,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031
https://github.com/root-project/root/issues/15032:107,deployability,releas,releases,107,"Hi @AlkaidCheng, thanks for reporting - this is on our plan of work already - keep an eye on the next ROOT releases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15032
https://github.com/root-project/root/issues/15032:55,testability,plan,plan,55,"Hi @AlkaidCheng, thanks for reporting - this is on our plan of work already - keep an eye on the next ROOT releases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15032
https://github.com/root-project/root/pull/15034:0,availability,Failur,Failure,0,Failure caused by not using latest version of tutorial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15034
https://github.com/root-project/root/pull/15034:0,deployability,Fail,Failure,0,Failure caused by not using latest version of tutorial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15034
https://github.com/root-project/root/pull/15034:35,deployability,version,version,35,Failure caused by not using latest version of tutorial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15034
https://github.com/root-project/root/pull/15034:35,integrability,version,version,35,Failure caused by not using latest version of tutorial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15034
https://github.com/root-project/root/pull/15034:35,modifiability,version,version,35,Failure caused by not using latest version of tutorial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15034
https://github.com/root-project/root/pull/15034:0,performance,Failur,Failure,0,Failure caused by not using latest version of tutorial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15034
https://github.com/root-project/root/pull/15034:0,reliability,Fail,Failure,0,Failure caused by not using latest version of tutorial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15034
https://github.com/root-project/root/issues/15035:254,availability,error,error,254,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:115,integrability,inject,injecting,115,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:517,interoperability,bind,bindings,517,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:182,modifiability,pac,package,182,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:517,modifiability,bind,bindings,517,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:254,performance,error,error,254,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:210,safety,prevent,prevent,210,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:254,safety,error,error,254,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:115,security,inject,injecting,115,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:210,security,preven,prevent,210,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:60,testability,understand,understand,60,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:668,testability,context,context,668,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:720,testability,understand,understand,720,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:254,usability,error,error,254,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:281,usability,clear,clear,281,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:738,usability,help,help,738,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:2400,availability,operat,operations,2400,"4D<double>> PtEtaPhiE4DVector(const float &pt, const float &eta, const float &phi, const float &E,. const float &pt_threshold=0.){. if (pt > pt_threshold). return LorentzVector<PtEtaPhiE4D<double>>{pt, eta, phi, E};. return LorentzVector<PtEtaPhiE4D<double>>{};. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M[i]};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const float &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta[i], phi[i], E[i]};. result.push_back(lv);. }. return result;. }. RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const float &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta, phi[i], E[i]};. result.push_back(lv);. }. return result;. }. ```. I used the namespace ROOT::Math to avoid having to type something like `Math::LorentzVector<Math::PtEtaPhiE4D<double>>` every single time. That way, I could use these built-in functions in my RDataFrame operations. But then when I need to run RDataFrame with dask, this error will show up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:2467,availability,error,error,2467,"4D<double>> PtEtaPhiE4DVector(const float &pt, const float &eta, const float &phi, const float &E,. const float &pt_threshold=0.){. if (pt > pt_threshold). return LorentzVector<PtEtaPhiE4D<double>>{pt, eta, phi, E};. return LorentzVector<PtEtaPhiE4D<double>>{};. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M[i]};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const float &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta[i], phi[i], E[i]};. result.push_back(lv);. }. return result;. }. RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const float &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta, phi[i], E[i]};. result.push_back(lv);. }. return result;. }. ```. I used the namespace ROOT::Math to avoid having to type something like `Math::LorentzVector<Math::PtEtaPhiE4D<double>>` every single time. That way, I could use these built-in functions in my RDataFrame operations. But then when I need to run RDataFrame with dask, this error will show up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:2330,performance,time,time,2330,"4D<double>> PtEtaPhiE4DVector(const float &pt, const float &eta, const float &phi, const float &E,. const float &pt_threshold=0.){. if (pt > pt_threshold). return LorentzVector<PtEtaPhiE4D<double>>{pt, eta, phi, E};. return LorentzVector<PtEtaPhiE4D<double>>{};. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M[i]};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const float &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta[i], phi[i], E[i]};. result.push_back(lv);. }. return result;. }. RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const float &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta, phi[i], E[i]};. result.push_back(lv);. }. return result;. }. ```. I used the namespace ROOT::Math to avoid having to type something like `Math::LorentzVector<Math::PtEtaPhiE4D<double>>` every single time. That way, I could use these built-in functions in my RDataFrame operations. But then when I need to run RDataFrame with dask, this error will show up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:2467,performance,error,error,2467,"4D<double>> PtEtaPhiE4DVector(const float &pt, const float &eta, const float &phi, const float &E,. const float &pt_threshold=0.){. if (pt > pt_threshold). return LorentzVector<PtEtaPhiE4D<double>>{pt, eta, phi, E};. return LorentzVector<PtEtaPhiE4D<double>>{};. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M[i]};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const float &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta[i], phi[i], E[i]};. result.push_back(lv);. }. return result;. }. RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const float &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta, phi[i], E[i]};. result.push_back(lv);. }. return result;. }. ```. I used the namespace ROOT::Math to avoid having to type something like `Math::LorentzVector<Math::PtEtaPhiE4D<double>>` every single time. That way, I could use these built-in functions in my RDataFrame operations. But then when I need to run RDataFrame with dask, this error will show up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:2232,safety,avoid,avoid,2232,"4D<double>> PtEtaPhiE4DVector(const float &pt, const float &eta, const float &phi, const float &E,. const float &pt_threshold=0.){. if (pt > pt_threshold). return LorentzVector<PtEtaPhiE4D<double>>{pt, eta, phi, E};. return LorentzVector<PtEtaPhiE4D<double>>{};. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M[i]};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const float &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta[i], phi[i], E[i]};. result.push_back(lv);. }. return result;. }. RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const float &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta, phi[i], E[i]};. result.push_back(lv);. }. return result;. }. ```. I used the namespace ROOT::Math to avoid having to type something like `Math::LorentzVector<Math::PtEtaPhiE4D<double>>` every single time. That way, I could use these built-in functions in my RDataFrame operations. But then when I need to run RDataFrame with dask, this error will show up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:2467,safety,error,error,2467,"4D<double>> PtEtaPhiE4DVector(const float &pt, const float &eta, const float &phi, const float &E,. const float &pt_threshold=0.){. if (pt > pt_threshold). return LorentzVector<PtEtaPhiE4D<double>>{pt, eta, phi, E};. return LorentzVector<PtEtaPhiE4D<double>>{};. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M[i]};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const float &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta[i], phi[i], E[i]};. result.push_back(lv);. }. return result;. }. RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const float &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta, phi[i], E[i]};. result.push_back(lv);. }. return result;. }. ```. I used the namespace ROOT::Math to avoid having to type something like `Math::LorentzVector<Math::PtEtaPhiE4D<double>>` every single time. That way, I could use these built-in functions in my RDataFrame operations. But then when I need to run RDataFrame with dask, this error will show up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/issues/15035:2467,usability,error,error,2467,"4D<double>> PtEtaPhiE4DVector(const float &pt, const float &eta, const float &phi, const float &E,. const float &pt_threshold=0.){. if (pt > pt_threshold). return LorentzVector<PtEtaPhiE4D<double>>{pt, eta, phi, E};. return LorentzVector<PtEtaPhiE4D<double>>{};. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M[i]};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiM4D<double>>> PtEtaPhiM4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const float &M){. RVec<LorentzVector<PtEtaPhiM4D<double>>> result;. for (size_t i=0; i < pt.size(); i++){. LorentzVector<PtEtaPhiM4D<double>> lv{pt[i], eta[i], phi[i], M};. result.push_back(lv);. }. return result;. }. . RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const RVec<float> &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta[i], phi[i], E[i]};. result.push_back(lv);. }. return result;. }. RVec<LorentzVector<PtEtaPhiE4D<double>>> PtEtaPhiE4DVectorArray(const RVec<float> &pt, const float &eta, . const RVec<float> &phi, const RVec<float> &E){. RVec<LorentzVector<PtEtaPhiE4D<double>>> result;. for (size_t i=0; i<pt.size(); i++){. LorentzVector<PtEtaPhiE4D<double>> lv{pt[i], eta, phi[i], E[i]};. result.push_back(lv);. }. return result;. }. ```. I used the namespace ROOT::Math to avoid having to type something like `Math::LorentzVector<Math::PtEtaPhiE4D<double>>` every single time. That way, I could use these built-in functions in my RDataFrame operations. But then when I need to run RDataFrame with dask, this error will show up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035
https://github.com/root-project/root/pull/15038:229,reliability,doe,does,229,"I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:199,safety,input,input,199,"I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:414,safety,test,test,414,"I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:414,testability,test,test,414,"I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:199,usability,input,input,199,"I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:215,usability,document,documentation,215,"I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:285,usability,behavi,behaviour,285,"I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:600,energy efficiency,current,currently,600,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:770,modifiability,exten,extend,770,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:934,modifiability,layer,layer,934,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:700,performance,memor,memory,700,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:231,reliability,doe,does,231,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:201,safety,input,input,201,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:416,safety,test,test,416,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:416,testability,test,test,416,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:201,usability,input,input,201,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:217,usability,document,documentation,217,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:287,usability,behavi,behaviour,287,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:521,usability,support,supports,521,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:700,usability,memor,memory,700,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15038:806,usability,prefer,preferences,806,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),. > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with. > caution, as they require more memory. The library also offers negative. > compression levels, which extend the range of speed vs. ratio preferences. > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15038
https://github.com/root-project/root/pull/15042:128,integrability,messag,message,128,"I would suggest instead generalizing this instead of attaching it to a platform X11 or cocoa:. If 'asimage=OFF', then skip this message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15042
https://github.com/root-project/root/pull/15042:71,interoperability,platform,platform,71,"I would suggest instead generalizing this instead of attaching it to a platform X11 or cocoa:. If 'asimage=OFF', then skip this message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15042
https://github.com/root-project/root/pull/15042:128,interoperability,messag,message,128,"I would suggest instead generalizing this instead of attaching it to a platform X11 or cocoa:. If 'asimage=OFF', then skip this message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15042
https://github.com/root-project/root/pull/15043:55,deployability,infrastructur,infrastructure,55,Thanks to @andresailer for checking this PR in the LCG infrastructure as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15043
https://github.com/root-project/root/pull/15044:1007,availability,consist,consistency,1007,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:945,deployability,log,logical,945,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:1053,deployability,log,logic,1053,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:1106,deployability,log,logic,1106,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:945,safety,log,logical,945,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:1053,safety,log,logic,1053,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:1106,safety,log,logic,1106,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:945,security,log,logical,945,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:1053,security,log,logic,1053,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:1106,security,log,logic,1106,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:945,testability,log,logical,945,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:1053,testability,log,logic,1053,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:1106,testability,log,logic,1106,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:1007,usability,consist,consistency,1007,"The #undef here (line 46):. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L44-L55. means that the #include here (line 72) is ignored. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/export.c#L68-L76. There is a similar issue in the import.c file. The #undef here (line 54):. (Also the comment on line 77 should say ""jpg library"" not ""png library"".). https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L52-L63. would mean that the #include here (line 78) would be ignored, if it had been properly inside a #ifndef here:. https://github.com/root-project/root/blob/b7e70bbaabf318d5ab5c0accd6d9b6d2e7305591/graf2d/asimage/src/libAfterImage/import.c#L75-L81. The proposed fix for export.c to remove the #undef seems to be a more logical fix than removing the #ifndef as in import.c. But for consistency the two files should use the same logic. Could the import.c be changed to use the same logic as the export.c will use (remove the #undef and add the #ifndef / #endif around the #include <stdlib.h>?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:37,availability,consist,consistency,37,I made that change to `import.c` for consistency. In this case nothing should change when stdlib is present since before this change it's always including `stdlib.h` (meaning that probably no one is compiling in a system without stdlib anyway...).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15044:37,usability,consist,consistency,37,I made that change to `import.c` for consistency. In this case nothing should change when stdlib is present since before this change it's always including `stdlib.h` (meaning that probably no one is compiling in a system without stdlib anyway...).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15044
https://github.com/root-project/root/pull/15045:108,safety,review,review,108,This PR looks great. @jblomer would you prefer I wait for all the items in the checklist to be addressed to review it or should I proceed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15045
https://github.com/root-project/root/pull/15045:108,testability,review,review,108,This PR looks great. @jblomer would you prefer I wait for all the items in the checklist to be addressed to review it or should I proceed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15045
https://github.com/root-project/root/pull/15045:40,usability,prefer,prefer,40,This PR looks great. @jblomer would you prefer I wait for all the items in the checklist to be addressed to review it or should I proceed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15045
https://github.com/root-project/root/issues/15052:70,safety,input,input,70,"I am very sorry - I've found the bug in my own code that prepares the input RooHist objects, . RooFit is OK and the issue should be closed. Sorry for the noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15052
https://github.com/root-project/root/issues/15052:70,usability,input,input,70,"I am very sorry - I've found the bug in my own code that prepares the input RooHist objects, . RooFit is OK and the issue should be closed. Sorry for the noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15052
https://github.com/root-project/root/issues/15052:132,usability,close,closed,132,"I am very sorry - I've found the bug in my own code that prepares the input RooHist objects, . RooFit is OK and the issue should be closed. Sorry for the noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15052
https://github.com/root-project/root/issues/15052:75,testability,understand,understand,75,"Thanks, no worries! I was already thinking how to explain you that I don't understand the issue report :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15052
https://github.com/root-project/root/pull/15056:102,deployability,contain,containing,102,"Thanks! An idea: the KHelpAbout in the browsers, it might be helpful to replace with a simple TGLabel containing gHelpAbout in a Tgtab e.g. or tgwindow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:87,testability,simpl,simple,87,"Thanks! An idea: the KHelpAbout in the browsers, it might be helpful to replace with a simple TGLabel containing gHelpAbout in a Tgtab e.g. or tgwindow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:61,usability,help,helpful,61,"Thanks! An idea: the KHelpAbout in the browsers, it might be helpful to replace with a simple TGLabel containing gHelpAbout in a Tgtab e.g. or tgwindow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:87,usability,simpl,simple,87,"Thanks! An idea: the KHelpAbout in the browsers, it might be helpful to replace with a simple TGLabel containing gHelpAbout in a Tgtab e.g. or tgwindow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:147,energy efficiency,current,current,147,"Hi @ferdymercury, thanks for you comment. You're right, the `about` stuff can be improved, I just didn't know how yet so I just removed it. In the current `master`, there is this pattern for all the `about` events:. ```c++. #ifdef R__UNIX. TString rootx = TROOT::GetBinDir() + ""/root -a &"";. gSystem->Exec(rootx);. #else. #ifdef WIN32. new TWin32SplashThread(kTRUE);. #else. char str[32];. sprintf(str, ""About ROOT %s..."", gROOT->GetVersion());. TRootHelpDialog *hd = new TRootHelpDialog(this, str, 600, 400);. hd->SetText(gHelpAbout);. hd->Popup();. #endif. #endif. ```. We need to find a platform independent alternative for that, and what you're saying is that this can be done with `TGLabel`, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:207,integrability,event,events,207,"Hi @ferdymercury, thanks for you comment. You're right, the `about` stuff can be improved, I just didn't know how yet so I just removed it. In the current `master`, there is this pattern for all the `about` events:. ```c++. #ifdef R__UNIX. TString rootx = TROOT::GetBinDir() + ""/root -a &"";. gSystem->Exec(rootx);. #else. #ifdef WIN32. new TWin32SplashThread(kTRUE);. #else. char str[32];. sprintf(str, ""About ROOT %s..."", gROOT->GetVersion());. TRootHelpDialog *hd = new TRootHelpDialog(this, str, 600, 400);. hd->SetText(gHelpAbout);. hd->Popup();. #endif. #endif. ```. We need to find a platform independent alternative for that, and what you're saying is that this can be done with `TGLabel`, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:590,interoperability,platform,platform,590,"Hi @ferdymercury, thanks for you comment. You're right, the `about` stuff can be improved, I just didn't know how yet so I just removed it. In the current `master`, there is this pattern for all the `about` events:. ```c++. #ifdef R__UNIX. TString rootx = TROOT::GetBinDir() + ""/root -a &"";. gSystem->Exec(rootx);. #else. #ifdef WIN32. new TWin32SplashThread(kTRUE);. #else. char str[32];. sprintf(str, ""About ROOT %s..."", gROOT->GetVersion());. TRootHelpDialog *hd = new TRootHelpDialog(this, str, 600, 400);. hd->SetText(gHelpAbout);. hd->Popup();. #endif. #endif. ```. We need to find a platform independent alternative for that, and what you're saying is that this can be done with `TGLabel`, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:120,interoperability,platform,platforms,120,"Now that I look closer, the #else part with the TRootHelpDialog should work, same idea as with Tglabel and it's for all platforms I believe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:16,usability,close,closer,16,"Now that I look closer, the #else part with the TRootHelpDialog should work, same idea as with Tglabel and it's for all platforms I believe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:144,deployability,modul,modular,144,"I apologise to comment about this only now: this is solid work. . Instead of directly removing, @guitargeek do you think we can make the splash modular and OFF by default? This would be a first step for release 6.36. We can comfortably proceed with the deprecation and removal at a later stage, if we want, and at the same time, the benefits you list above will be harvested nevertheless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:203,deployability,releas,release,203,"I apologise to comment about this only now: this is solid work. . Instead of directly removing, @guitargeek do you think we can make the splash modular and OFF by default? This would be a first step for release 6.36. We can comfortably proceed with the deprecation and removal at a later stage, if we want, and at the same time, the benefits you list above will be harvested nevertheless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:288,deployability,stage,stage,288,"I apologise to comment about this only now: this is solid work. . Instead of directly removing, @guitargeek do you think we can make the splash modular and OFF by default? This would be a first step for release 6.36. We can comfortably proceed with the deprecation and removal at a later stage, if we want, and at the same time, the benefits you list above will be harvested nevertheless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:144,integrability,modular,modular,144,"I apologise to comment about this only now: this is solid work. . Instead of directly removing, @guitargeek do you think we can make the splash modular and OFF by default? This would be a first step for release 6.36. We can comfortably proceed with the deprecation and removal at a later stage, if we want, and at the same time, the benefits you list above will be harvested nevertheless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:144,modifiability,modul,modular,144,"I apologise to comment about this only now: this is solid work. . Instead of directly removing, @guitargeek do you think we can make the splash modular and OFF by default? This would be a first step for release 6.36. We can comfortably proceed with the deprecation and removal at a later stage, if we want, and at the same time, the benefits you list above will be harvested nevertheless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:323,performance,time,time,323,"I apologise to comment about this only now: this is solid work. . Instead of directly removing, @guitargeek do you think we can make the splash modular and OFF by default? This would be a first step for release 6.36. We can comfortably proceed with the deprecation and removal at a later stage, if we want, and at the same time, the benefits you list above will be harvested nevertheless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:144,safety,modul,modular,144,"I apologise to comment about this only now: this is solid work. . Instead of directly removing, @guitargeek do you think we can make the splash modular and OFF by default? This would be a first step for release 6.36. We can comfortably proceed with the deprecation and removal at a later stage, if we want, and at the same time, the benefits you list above will be harvested nevertheless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:144,testability,modula,modular,144,"I apologise to comment about this only now: this is solid work. . Instead of directly removing, @guitargeek do you think we can make the splash modular and OFF by default? This would be a first step for release 6.36. We can comfortably proceed with the deprecation and removal at a later stage, if we want, and at the same time, the benefits you list above will be harvested nevertheless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:73,deployability,depend,dependency,73,"Back to this: I would keep it on Windows, since it doesn't introduce any dependency...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:73,integrability,depend,dependency,73,"Back to this: I would keep it on Windows, since it doesn't introduce any dependency...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:73,modifiability,depend,dependency,73,"Back to this: I would keep it on Windows, since it doesn't introduce any dependency...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:51,reliability,doe,doesn,51,"Back to this: I would keep it on Windows, since it doesn't introduce any dependency...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:73,safety,depend,dependency,73,"Back to this: I would keep it on Windows, since it doesn't introduce any dependency...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15056:73,testability,depend,dependency,73,"Back to this: I would keep it on Windows, since it doesn't introduce any dependency...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056
https://github.com/root-project/root/pull/15059:864,deployability,build,build,864,"I just checked with the test at https://github.com/root-project/root/issues/13531 and the memleak is gone. My remaining question is whether we also have to deal separately with the case 'alreadyseen', what do you think @pcanal ? Right now, we only delete `if (!(type & kIncremental))`. Or should I define a bool mustCleanup that is set to true when mkdir is called in any of the two branches? ```. if (type & kIncremental || alreadyseen) {. newdir = target->GetDirectory(obj->GetName());. if (!newdir) {. newdir = target->mkdir( obj->GetName(), obj->GetTitle() );. // newdir->ResetBit(kMustCleanup);. }. } else {. newdir = target->mkdir( obj->GetName(), obj->GetTitle() );. // newdir->ResetBit(kMustCleanup);. }. ```. [EDIT] Never mind, I think it's fine like that, as the important part is, I believe:. ```. if (!(type&kIncremental)) {. // In case of incremental build, we will call Write on the top directory/file, so we do not need. // to call SaveSelf explicilty. target->SaveSelf(kTRUE);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15059
https://github.com/root-project/root/pull/15059:24,safety,test,test,24,"I just checked with the test at https://github.com/root-project/root/issues/13531 and the memleak is gone. My remaining question is whether we also have to deal separately with the case 'alreadyseen', what do you think @pcanal ? Right now, we only delete `if (!(type & kIncremental))`. Or should I define a bool mustCleanup that is set to true when mkdir is called in any of the two branches? ```. if (type & kIncremental || alreadyseen) {. newdir = target->GetDirectory(obj->GetName());. if (!newdir) {. newdir = target->mkdir( obj->GetName(), obj->GetTitle() );. // newdir->ResetBit(kMustCleanup);. }. } else {. newdir = target->mkdir( obj->GetName(), obj->GetTitle() );. // newdir->ResetBit(kMustCleanup);. }. ```. [EDIT] Never mind, I think it's fine like that, as the important part is, I believe:. ```. if (!(type&kIncremental)) {. // In case of incremental build, we will call Write on the top directory/file, so we do not need. // to call SaveSelf explicilty. target->SaveSelf(kTRUE);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15059
https://github.com/root-project/root/pull/15059:24,testability,test,test,24,"I just checked with the test at https://github.com/root-project/root/issues/13531 and the memleak is gone. My remaining question is whether we also have to deal separately with the case 'alreadyseen', what do you think @pcanal ? Right now, we only delete `if (!(type & kIncremental))`. Or should I define a bool mustCleanup that is set to true when mkdir is called in any of the two branches? ```. if (type & kIncremental || alreadyseen) {. newdir = target->GetDirectory(obj->GetName());. if (!newdir) {. newdir = target->mkdir( obj->GetName(), obj->GetTitle() );. // newdir->ResetBit(kMustCleanup);. }. } else {. newdir = target->mkdir( obj->GetName(), obj->GetTitle() );. // newdir->ResetBit(kMustCleanup);. }. ```. [EDIT] Never mind, I think it's fine like that, as the important part is, I believe:. ```. if (!(type&kIncremental)) {. // In case of incremental build, we will call Write on the top directory/file, so we do not need. // to call SaveSelf explicilty. target->SaveSelf(kTRUE);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15059
https://github.com/root-project/root/pull/15059:47,safety,test,test,47,Thanks a lot @ferdymercury for the fix and the test! . I am sure this bug fix will be very useful and will save a lot of headache to several analyses in the future :) !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15059
https://github.com/root-project/root/pull/15059:47,testability,test,test,47,Thanks a lot @ferdymercury for the fix and the test! . I am sure this bug fix will be very useful and will save a lot of headache to several analyses in the future :) !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15059
https://github.com/root-project/root/pull/15061:43,interoperability,format,format,43,Just pushing again because I forgot `clang-format`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15061
https://github.com/root-project/root/pull/15061:12,interoperability,conflict,conflicts,12,Fixed merge conflicts,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15061
https://github.com/root-project/root/issues/15062:1790,availability,error,error,1790,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:118,deployability,upgrad,upgraded,118,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:490,deployability,patch,patches,490,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:660,deployability,patch,patches,660,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:752,deployability,patch,patches,752,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1058,deployability,patch,patch,1058,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1484,integrability,interfac,interfaces,1484,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1568,integrability,interfac,interface,1568,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1735,integrability,interfac,interfaces,1735,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1796,integrability,messag,messages,1796,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:794,interoperability,compatib,compatibility,794,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1484,interoperability,interfac,interfaces,1484,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1568,interoperability,interfac,interface,1568,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1735,interoperability,interfac,interfaces,1735,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1796,interoperability,messag,messages,1796,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:118,modifiability,upgrad,upgraded,118,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1172,modifiability,responsibil,responsibilities,1172,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1484,modifiability,interfac,interfaces,1484,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1568,modifiability,interfac,interface,1568,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1735,modifiability,interfac,interfaces,1735,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:316,performance,synch,synchronize,316,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1090,performance,time,time,1090,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1790,performance,error,error,1790,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:250,reliability,doe,doesn,250,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:490,safety,patch,patches,490,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:660,safety,patch,patches,660,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:752,safety,patch,patches,752,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1058,safety,patch,patch,1058,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1433,safety,compl,complicated,1433,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1790,safety,error,error,1790,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:490,security,patch,patches,490,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:660,security,patch,patches,660,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:752,security,patch,patches,752,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1058,security,patch,patch,1058,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1433,security,compl,complicated,1433,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:12,testability,plan,plans,12,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1543,testability,simpl,simplify,1543,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1646,testability,simpl,simplify,1646,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:26,usability,progress,progress,26,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:548,usability,support,support,548,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1256,usability,hint,hint,1256,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1479,usability,user,user,1479,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1543,usability,simpl,simplify,1543,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1556,usability,user,user-facing,1556,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1646,usability,simpl,simplify,1646,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1695,usability,efficien,efficient,1695,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1730,usability,user,user,1730,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:1790,usability,error,error,1790,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon? Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:. https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint? > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work? Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:44,deployability,log,log,44,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:86,deployability,patch,patch,86,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:270,performance,memor,memory,270,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:573,reliability,doe,does,573,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:44,safety,log,log,44,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:86,safety,patch,patch,86,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:198,safety,compl,completely,198,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:44,security,log,log,44,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:86,security,patch,patch,86,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:198,security,compl,completely,198,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:44,testability,log,log,44,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:222,usability,behavi,behavior,222,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:270,usability,memor,memory,270,"You can look for `std::function` in the git log, see whether there's anything easy to patch from there. ROOT likes to strip `std::`, which is problematic for non-HEP codes, so yes, I've pretty much completely removed that behavior from my fork of ROOT/meta. However, if memory serves, there was something worse with `std::function` and templates. I think it's this one: https://github.com/wlav/cppyy-backend/commit/98c21db9fad90902efe71d92adc7735cba471c1f. There's also this bug report, which may be related: https://github.com/root-project/root/issues/10680 . (That issue does not exist with cppyy master.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:503,integrability,wrap,wrapper,503,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:518,integrability,interfac,interface,518,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:503,interoperability,wrapper,wrapper,503,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:518,interoperability,interfac,interface,518,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:518,modifiability,interfac,interface,518,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:294,safety,input,input,294,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:397,safety,compl,complete,397,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:397,security,compl,complete,397,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:91,testability,understand,understandable,91,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:253,usability,user,users,253,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:294,usability,input,input,294,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15062:344,usability,workflow,workflow,344,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future! Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062
https://github.com/root-project/root/issues/15064:96,deployability,build,build,96,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:132,deployability,build,build,132,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:202,deployability,depend,dependency,202,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:264,deployability,modul,modules,264,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:202,integrability,depend,dependency,202,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:202,modifiability,depend,dependency,202,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:264,modifiability,modul,modules,264,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:202,safety,depend,dependency,202,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:264,safety,modul,modules,264,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:173,testability,trace,traced,173,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:202,testability,depend,dependency,202,"For the record, I am able to get things to work by doing:. ```. sed -i.removeme '/deps = gcc/d' build.ninja. ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:32,deployability,build,builds,32,"Also seeing this issue break Qt builds with target AUTOMOC and AUTOUIC. Reverting to CMake 3.28 fixes the issue. Same underlying thing: ""deps = gcc"" in the moc targets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:56,deployability,version,version,56,"So I cannot reproduce the issue with ROOT master, CMake version 3.29.1, and Ninja 1.10.0 on Ubuntu 20.04.6. Should I ask someone to try on MacOS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:56,integrability,version,version,56,"So I cannot reproduce the issue with ROOT master, CMake version 3.29.1, and Ninja 1.10.0 on Ubuntu 20.04.6. Should I ask someone to try on MacOS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:56,modifiability,version,version,56,"So I cannot reproduce the issue with ROOT master, CMake version 3.29.1, and Ninja 1.10.0 on Ubuntu 20.04.6. Should I ask someone to try on MacOS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:83,deployability,build,build,83,It is working for me on MacOS. I did:. ```. cmake -G Ninja ../my-git-root. cmake --build . -j32. ```. with:. ```. % cmake --version. cmake version 3.29.1. % ninja --version. 1.11.1. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:124,deployability,version,version,124,It is working for me on MacOS. I did:. ```. cmake -G Ninja ../my-git-root. cmake --build . -j32. ```. with:. ```. % cmake --version. cmake version 3.29.1. % ninja --version. 1.11.1. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:139,deployability,version,version,139,It is working for me on MacOS. I did:. ```. cmake -G Ninja ../my-git-root. cmake --build . -j32. ```. with:. ```. % cmake --version. cmake version 3.29.1. % ninja --version. 1.11.1. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:165,deployability,version,version,165,It is working for me on MacOS. I did:. ```. cmake -G Ninja ../my-git-root. cmake --build . -j32. ```. with:. ```. % cmake --version. cmake version 3.29.1. % ninja --version. 1.11.1. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:124,integrability,version,version,124,It is working for me on MacOS. I did:. ```. cmake -G Ninja ../my-git-root. cmake --build . -j32. ```. with:. ```. % cmake --version. cmake version 3.29.1. % ninja --version. 1.11.1. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:139,integrability,version,version,139,It is working for me on MacOS. I did:. ```. cmake -G Ninja ../my-git-root. cmake --build . -j32. ```. with:. ```. % cmake --version. cmake version 3.29.1. % ninja --version. 1.11.1. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:165,integrability,version,version,165,It is working for me on MacOS. I did:. ```. cmake -G Ninja ../my-git-root. cmake --build . -j32. ```. with:. ```. % cmake --version. cmake version 3.29.1. % ninja --version. 1.11.1. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:124,modifiability,version,version,124,It is working for me on MacOS. I did:. ```. cmake -G Ninja ../my-git-root. cmake --build . -j32. ```. with:. ```. % cmake --version. cmake version 3.29.1. % ninja --version. 1.11.1. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:139,modifiability,version,version,139,It is working for me on MacOS. I did:. ```. cmake -G Ninja ../my-git-root. cmake --build . -j32. ```. with:. ```. % cmake --version. cmake version 3.29.1. % ninja --version. 1.11.1. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/issues/15064:165,modifiability,version,version,165,It is working for me on MacOS. I did:. ```. cmake -G Ninja ../my-git-root. cmake --build . -j32. ```. with:. ```. % cmake --version. cmake version 3.29.1. % ninja --version. 1.11.1. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15064
https://github.com/root-project/root/pull/15071:41,deployability,patch,patch,41,"> since the result is wrong without this patch, we may want to add a test. Added test, but it needs revision from your side as I am not fully sure whether it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:41,safety,patch,patch,41,"> since the result is wrong without this patch, we may want to add a test. Added test, but it needs revision from your side as I am not fully sure whether it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:69,safety,test,test,69,"> since the result is wrong without this patch, we may want to add a test. Added test, but it needs revision from your side as I am not fully sure whether it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:81,safety,test,test,81,"> since the result is wrong without this patch, we may want to add a test. Added test, but it needs revision from your side as I am not fully sure whether it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:41,security,patch,patch,41,"> since the result is wrong without this patch, we may want to add a test. Added test, but it needs revision from your side as I am not fully sure whether it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:69,testability,test,test,69,"> since the result is wrong without this patch, we may want to add a test. Added test, but it needs revision from your side as I am not fully sure whether it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:81,testability,test,test,81,"> since the result is wrong without this patch, we may want to add a test. Added test, but it needs revision from your side as I am not fully sure whether it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:67,safety,test,test,67,"@bellenot Do you have any idea why the ""result"" is a nullptr in my test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:67,testability,test,test,67,"@bellenot Do you have any idea why the ""result"" is a nullptr in my test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:57,performance,time,time,57,"@ferdymercury no idea. I can try to debug it if you have time to wait, or ask @pcanal who is our I/O expert...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:97,performance,I/O,I/O,97,"@ferdymercury no idea. I can try to debug it if you have time to wait, or ask @pcanal who is our I/O expert...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:59,performance,time,time,59,"> @ferdymercury no idea. I can try to debug it if you have time to wait, or ask @pcanal who is our I/O expert... Thanks! I think it's solved now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/pull/15071:99,performance,I/O,I/O,99,"> @ferdymercury no idea. I can try to debug it if you have time to wait, or ask @pcanal who is our I/O expert... Thanks! I think it's solved now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15071
https://github.com/root-project/root/issues/15073:48,testability,context,context,48,"this might be a good item for discussion in the context of new histograms, that'w why I assigned Jonas for now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15073
https://github.com/root-project/root/issues/15075:75,interoperability,specif,specification,75,"Nowadays for top-level, non-indexed friends users can leverage the dataset specification feature https://root.cern/doc/master/classROOT_1_1RDataFrame.html#rdf-from-spec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15075
https://github.com/root-project/root/issues/15075:44,usability,user,users,44,"Nowadays for top-level, non-indexed friends users can leverage the dataset specification feature https://root.cern/doc/master/classROOT_1_1RDataFrame.html#rdf-from-spec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15075
https://github.com/root-project/root/issues/15077:155,energy efficiency,current,current,155,"Dear @tmadlener , thanks for for pointing out this opportunity for improvement! We agree with your analysis and would warmly welcome your PR to change the current code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15077
https://github.com/root-project/root/issues/15077:183,availability,sli,slightly,183,"What is the minimal c++ standard that should be supported in this case? It probably doesn't make a lot of difference, but the `xyz_t` helper types that were introduced with c++14 are slightly nicer than having to do `typename xyz::type` everywhere. However, if c++11 is still a target, then there is not too much that can be done, I suppose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15077
https://github.com/root-project/root/issues/15077:24,interoperability,standard,standard,24,"What is the minimal c++ standard that should be supported in this case? It probably doesn't make a lot of difference, but the `xyz_t` helper types that were introduced with c++14 are slightly nicer than having to do `typename xyz::type` everywhere. However, if c++11 is still a target, then there is not too much that can be done, I suppose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15077
https://github.com/root-project/root/issues/15077:84,reliability,doe,doesn,84,"What is the minimal c++ standard that should be supported in this case? It probably doesn't make a lot of difference, but the `xyz_t` helper types that were introduced with c++14 are slightly nicer than having to do `typename xyz::type` everywhere. However, if c++11 is still a target, then there is not too much that can be done, I suppose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15077
https://github.com/root-project/root/issues/15077:183,reliability,sli,slightly,183,"What is the minimal c++ standard that should be supported in this case? It probably doesn't make a lot of difference, but the `xyz_t` helper types that were introduced with c++14 are slightly nicer than having to do `typename xyz::type` everywhere. However, if c++11 is still a target, then there is not too much that can be done, I suppose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15077
https://github.com/root-project/root/issues/15077:12,usability,minim,minimal,12,"What is the minimal c++ standard that should be supported in this case? It probably doesn't make a lot of difference, but the `xyz_t` helper types that were introduced with c++14 are slightly nicer than having to do `typename xyz::type` everywhere. However, if c++11 is still a target, then there is not too much that can be done, I suppose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15077
https://github.com/root-project/root/issues/15077:48,usability,support,supported,48,"What is the minimal c++ standard that should be supported in this case? It probably doesn't make a lot of difference, but the `xyz_t` helper types that were introduced with c++14 are slightly nicer than having to do `typename xyz::type` everywhere. However, if c++11 is still a target, then there is not too much that can be done, I suppose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15077
https://github.com/root-project/root/issues/15077:134,usability,help,helper,134,"What is the minimal c++ standard that should be supported in this case? It probably doesn't make a lot of difference, but the `xyz_t` helper types that were introduced with c++14 are slightly nicer than having to do `typename xyz::type` everywhere. However, if c++11 is still a target, then there is not too much that can be done, I suppose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15077
https://github.com/root-project/root/pull/15078:18,safety,test,tests,18,"@lmoneta , if the tests pass, do you think we are ready to merge the PR (and backport the changes to 6.32)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15078
https://github.com/root-project/root/pull/15078:18,testability,test,tests,18,"@lmoneta , if the tests pass, do you think we are ready to merge the PR (and backport the changes to 6.32)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15078
https://github.com/root-project/root/pull/15084:48,energy efficiency,model,model,48,"One more thought: we may not need to create the model from the first page source. Since we anyway loop through the top-level field descriptors and create the proto fields, we can at the same time create the entry (and we need the model only to create an entry anyway, afaics).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15084
https://github.com/root-project/root/pull/15084:230,energy efficiency,model,model,230,"One more thought: we may not need to create the model from the first page source. Since we anyway loop through the top-level field descriptors and create the proto fields, we can at the same time create the entry (and we need the model only to create an entry anyway, afaics).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15084
https://github.com/root-project/root/pull/15084:191,performance,time,time,191,"One more thought: we may not need to create the model from the first page source. Since we anyway loop through the top-level field descriptors and create the proto fields, we can at the same time create the entry (and we need the model only to create an entry anyway, afaics).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15084
https://github.com/root-project/root/pull/15084:48,security,model,model,48,"One more thought: we may not need to create the model from the first page source. Since we anyway loop through the top-level field descriptors and create the proto fields, we can at the same time create the entry (and we need the model only to create an entry anyway, afaics).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15084
https://github.com/root-project/root/pull/15084:230,security,model,model,230,"One more thought: we may not need to create the model from the first page source. Since we anyway loop through the top-level field descriptors and create the proto fields, we can at the same time create the entry (and we need the model only to create an entry anyway, afaics).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15084
https://github.com/root-project/root/issues/15085:144,deployability,upgrad,upgrade,144,"Hi @VanyaBelyaev! Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++. // the same with functions. template <unsigned int K,unsigned int N>. auto fun_2 (A<N>&) {. if constexpr(K < N) return ""ququ"";. else return K;. ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:886,deployability,upgrad,upgrade,886,"Hi @VanyaBelyaev! Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++. // the same with functions. template <unsigned int K,unsigned int N>. auto fun_2 (A<N>&) {. if constexpr(K < N) return ""ququ"";. else return K;. ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:144,modifiability,upgrad,upgrade,144,"Hi @VanyaBelyaev! Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++. // the same with functions. template <unsigned int K,unsigned int N>. auto fun_2 (A<N>&) {. if constexpr(K < N) return ""ququ"";. else return K;. ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:886,modifiability,upgrad,upgrade,886,"Hi @VanyaBelyaev! Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++. // the same with functions. template <unsigned int K,unsigned int N>. auto fun_2 (A<N>&) {. if constexpr(K < N) return ""ququ"";. else return K;. ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:48,testability,simpl,simplify,48,"Hi @VanyaBelyaev! Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++. // the same with functions. template <unsigned int K,unsigned int N>. auto fun_2 (A<N>&) {. if constexpr(K < N) return ""ququ"";. else return K;. ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:911,testability,regress,regression,911,"Hi @VanyaBelyaev! Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++. // the same with functions. template <unsigned int K,unsigned int N>. auto fun_2 (A<N>&) {. if constexpr(K < N) return ""ququ"";. else return K;. ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:48,usability,simpl,simplify,48,"Hi @VanyaBelyaev! Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++. // the same with functions. template <unsigned int K,unsigned int N>. auto fun_2 (A<N>&) {. if constexpr(K < N) return ""ququ"";. else return K;. ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:432,usability,support,support,432,"Hi @VanyaBelyaev! Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++. // the same with functions. template <unsigned int K,unsigned int N>. auto fun_2 (A<N>&) {. if constexpr(K < N) return ""ququ"";. else return K;. ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:87,availability,slo,slow,87,"Hi Jonas, . Thank you. I'll start to move into the direction with C++17. - but it is a slow process. And for some cases two overloads a bit better (each has aronug 30 lines of unique code.. Better to keep them separated. ""Sometime ago"" belongs to arounbg ROOT 6.22 (a really long time ago) - I see there is some swicth . in my legacy code.. . .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:280,performance,time,time,280,"Hi Jonas, . Thank you. I'll start to move into the direction with C++17. - but it is a slow process. And for some cases two overloads a bit better (each has aronug 30 lines of unique code.. Better to keep them separated. ""Sometime ago"" belongs to arounbg ROOT 6.22 (a really long time ago) - I see there is some swicth . in my legacy code.. . .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:87,reliability,slo,slow,87,"Hi Jonas, . Thank you. I'll start to move into the direction with C++17. - but it is a slow process. And for some cases two overloads a bit better (each has aronug 30 lines of unique code.. Better to keep them separated. ""Sometime ago"" belongs to arounbg ROOT 6.22 (a really long time ago) - I see there is some swicth . in my legacy code.. . .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:403,availability,error,error,403,". dear @guitargeek . It seems that my project has one more problem with new cppyy. While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe. The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major. method implemented in python. Previously I have such solution, but with new cppyy. I've got two problems - first, and the drawing phase, there are error messages . that servers are not redirected. ButI have ""correct"" fit results and the plot. . And, the main problem is that at the end of the script the program stalls -. likely in ROOT finalization. . It is not easy to make short, simple & easy reproducer, but I'll try to do it asap. But, might be it is a known issue? . What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:378,energy efficiency,draw,drawing,378,". dear @guitargeek . It seems that my project has one more problem with new cppyy. While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe. The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major. method implemented in python. Previously I have such solution, but with new cppyy. I've got two problems - first, and the drawing phase, there are error messages . that servers are not redirected. ButI have ""correct"" fit results and the plot. . And, the main problem is that at the end of the script the program stalls -. likely in ROOT finalization. . It is not easy to make short, simple & easy reproducer, but I'll try to do it asap. But, might be it is a known issue? . What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:409,integrability,messag,messages,409,". dear @guitargeek . It seems that my project has one more problem with new cppyy. While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe. The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major. method implemented in python. Previously I have such solution, but with new cppyy. I've got two problems - first, and the drawing phase, there are error messages . that servers are not redirected. ButI have ""correct"" fit results and the plot. . And, the main problem is that at the end of the script the program stalls -. likely in ROOT finalization. . It is not easy to make short, simple & easy reproducer, but I'll try to do it asap. But, might be it is a known issue? . What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:409,interoperability,messag,messages,409,". dear @guitargeek . It seems that my project has one more problem with new cppyy. While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe. The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major. method implemented in python. Previously I have such solution, but with new cppyy. I've got two problems - first, and the drawing phase, there are error messages . that servers are not redirected. ButI have ""correct"" fit results and the plot. . And, the main problem is that at the end of the script the program stalls -. likely in ROOT finalization. . It is not easy to make short, simple & easy reproducer, but I'll try to do it asap. But, might be it is a known issue? . What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:403,performance,error,error,403,". dear @guitargeek . It seems that my project has one more problem with new cppyy. While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe. The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major. method implemented in python. Previously I have such solution, but with new cppyy. I've got two problems - first, and the drawing phase, there are error messages . that servers are not redirected. ButI have ""correct"" fit results and the plot. . And, the main problem is that at the end of the script the program stalls -. likely in ROOT finalization. . It is not easy to make short, simple & easy reproducer, but I'll try to do it asap. But, might be it is a known issue? . What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:403,safety,error,error,403,". dear @guitargeek . It seems that my project has one more problem with new cppyy. While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe. The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major. method implemented in python. Previously I have such solution, but with new cppyy. I've got two problems - first, and the drawing phase, there are error messages . that servers are not redirected. ButI have ""correct"" fit results and the plot. . And, the main problem is that at the end of the script the program stalls -. likely in ROOT finalization. . It is not easy to make short, simple & easy reproducer, but I'll try to do it asap. But, might be it is a known issue? . What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:639,testability,simpl,simple,639,". dear @guitargeek . It seems that my project has one more problem with new cppyy. While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe. The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major. method implemented in python. Previously I have such solution, but with new cppyy. I've got two problems - first, and the drawing phase, there are error messages . that servers are not redirected. ButI have ""correct"" fit results and the plot. . And, the main problem is that at the end of the script the program stalls -. likely in ROOT finalization. . It is not easy to make short, simple & easy reproducer, but I'll try to do it asap. But, might be it is a known issue? . What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:403,usability,error,error,403,". dear @guitargeek . It seems that my project has one more problem with new cppyy. While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe. The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major. method implemented in python. Previously I have such solution, but with new cppyy. I've got two problems - first, and the drawing phase, there are error messages . that servers are not redirected. ButI have ""correct"" fit results and the plot. . And, the main problem is that at the end of the script the program stalls -. likely in ROOT finalization. . It is not easy to make short, simple & easy reproducer, but I'll try to do it asap. But, might be it is a known issue? . What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:639,usability,simpl,simple,639,". dear @guitargeek . It seems that my project has one more problem with new cppyy. While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe. The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major. method implemented in python. Previously I have such solution, but with new cppyy. I've got two problems - first, and the drawing phase, there are error messages . that servers are not redirected. ButI have ""correct"" fit results and the plot. . And, the main problem is that at the end of the script the program stalls -. likely in ROOT finalization. . It is not easy to make short, simple & easy reproducer, but I'll try to do it asap. But, might be it is a known issue? . What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:254,availability,slo,slot,254,Hi @guitargeek. I've prepared an relatively easy reproducer with pythonic PDF. see [this gist](https://gist.github.com/VanyaBelyaev/05d461ad7076819f4cb550bde33b22ef) . It hangs at the end (the fit it successfull) for ROOT 6.31/01 (LCG dev3 cvmfs nightly slot) but it workd fo the reviosu verisons of ROOT/cppyy. Thank you very much in advance for advice. . .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:254,reliability,slo,slot,254,Hi @guitargeek. I've prepared an relatively easy reproducer with pythonic PDF. see [this gist](https://gist.github.com/VanyaBelyaev/05d461ad7076819f4cb550bde33b22ef) . It hangs at the end (the fit it successfull) for ROOT 6.31/01 (LCG dev3 cvmfs nightly slot) but it workd fo the reviosu verisons of ROOT/cppyy. Thank you very much in advance for advice. . .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:27,energy efficiency,current,current,27,"Hi @VanyaBelyaev, with the current ROOT nightlies, at least the problem with PyROOT hanging at the end should be gone. Can you confirm? If it's gone also for you, does it mean your only issue with the new PyROOT at this point is the one you report in the original post of this thread, plus the enum issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:163,reliability,doe,does,163,"Hi @VanyaBelyaev, with the current ROOT nightlies, at least the problem with PyROOT hanging at the end should be gone. Can you confirm? If it's gone also for you, does it mean your only issue with the new PyROOT at this point is the one you report in the original post of this thread, plus the enum issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:127,usability,confirm,confirm,127,"Hi @VanyaBelyaev, with the current ROOT nightlies, at least the problem with PyROOT hanging at the end should be gone. Can you confirm? If it's gone also for you, does it mean your only issue with the new PyROOT at this point is the one you report in the original post of this thread, plus the enum issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:141,interoperability,platform,platform,141,Dear @guitargeek . Thank you very much. In my tests I see positive changes for LCG dev3 cvmfs nightluies. - for the `x86_64-el9-clang16-opt` platform it either succeded or make segfaults at the end with approximately ~50% probability. - for the `x86_64-el9-gcc13-opt` is still hangs at the end .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:46,safety,test,tests,46,Dear @guitargeek . Thank you very much. In my tests I see positive changes for LCG dev3 cvmfs nightluies. - for the `x86_64-el9-clang16-opt` platform it either succeded or make segfaults at the end with approximately ~50% probability. - for the `x86_64-el9-gcc13-opt` is still hangs at the end .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:46,testability,test,tests,46,Dear @guitargeek . Thank you very much. In my tests I see positive changes for LCG dev3 cvmfs nightluies. - for the `x86_64-el9-clang16-opt` platform it either succeded or make segfaults at the end with approximately ~50% probability. - for the `x86_64-el9-gcc13-opt` is still hangs at the end .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:66,safety,test,test,66,". Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. . Unforunately it i not so simple to isolate,(that's why I am not reporting this problem. since I have no simple reproducer) but since it also involves C++ virtual functions . reimplemented in python, migth be the unnderlying reason is the same.. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:139,safety,isol,isolate,139,". Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. . Unforunately it i not so simple to isolate,(that's why I am not reporting this problem. since I have no simple reproducer) but since it also involves C++ virtual functions . reimplemented in python, migth be the unnderlying reason is the same.. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:139,security,iso,isolate,139,". Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. . Unforunately it i not so simple to isolate,(that's why I am not reporting this problem. since I have no simple reproducer) but since it also involves C++ virtual functions . reimplemented in python, migth be the unnderlying reason is the same.. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:66,testability,test,test,66,". Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. . Unforunately it i not so simple to isolate,(that's why I am not reporting this problem. since I have no simple reproducer) but since it also involves C++ virtual functions . reimplemented in python, migth be the unnderlying reason is the same.. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:129,testability,simpl,simple,129,". Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. . Unforunately it i not so simple to isolate,(that's why I am not reporting this problem. since I have no simple reproducer) but since it also involves C++ virtual functions . reimplemented in python, migth be the unnderlying reason is the same.. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:139,testability,isol,isolate,139,". Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. . Unforunately it i not so simple to isolate,(that's why I am not reporting this problem. since I have no simple reproducer) but since it also involves C++ virtual functions . reimplemented in python, migth be the unnderlying reason is the same.. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:208,testability,simpl,simple,208,". Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. . Unforunately it i not so simple to isolate,(that's why I am not reporting this problem. since I have no simple reproducer) but since it also involves C++ virtual functions . reimplemented in python, migth be the unnderlying reason is the same.. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:129,usability,simpl,simple,129,". Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. . Unforunately it i not so simple to isolate,(that's why I am not reporting this problem. since I have no simple reproducer) but since it also involves C++ virtual functions . reimplemented in python, migth be the unnderlying reason is the same.. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15085:208,usability,simpl,simple,208,". Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. . Unforunately it i not so simple to isolate,(that's why I am not reporting this problem. since I have no simple reproducer) but since it also involves C++ virtual functions . reimplemented in python, migth be the unnderlying reason is the same.. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085
https://github.com/root-project/root/issues/15087:94,deployability,fail,fails,94,"Sorry, I noticed there were two separate lines right next to each other where the compilation fails! I need to open another PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15087
https://github.com/root-project/root/issues/15087:94,reliability,fail,fails,94,"Sorry, I noticed there were two separate lines right next to each other where the compilation fails! I need to open another PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15087
https://github.com/root-project/root/issues/15090:563,deployability,patch,patch,563,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:608,energy efficiency,core,core,608,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:633,energy efficiency,core,core,633,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:700,energy efficiency,core,core,700,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:730,energy efficiency,core,core,730,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:978,energy efficiency,Load,LoadClassInfo,978,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1032,energy efficiency,core,core,1032,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1059,energy efficiency,core,core,1059,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1128,energy efficiency,core,core,1128,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1160,energy efficiency,core,core,1160,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1221,energy efficiency,Load,LoadClassInfo,1221,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1282,energy efficiency,load,loaded,1282,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:46,integrability,rout,routinely,46,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:774,integrability,pub,public,774,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:90,performance,lock,lock,90,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:476,performance,memor,memory,476,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:978,performance,Load,LoadClassInfo,978,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1221,performance,Load,LoadClassInfo,1221,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1282,performance,load,loaded,1282,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1332,performance,lock,lock,1332,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:152,safety,Test,TestBit,152,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:174,safety,safe,safe,174,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:563,safety,patch,patch,563,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:932,safety,Test,TestBit,932,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1393,safety,Test,TestBit,1393,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:90,security,lock,lock,90,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:563,security,patch,patch,563,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1332,security,lock,lock,1332,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:152,testability,Test,TestBit,152,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:932,testability,Test,TestBit,932,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:1393,testability,Test,TestBit,1393,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:337,usability,user,user,337,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:448,usability,interact,interaction,448,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:476,usability,memor,memory,476,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:582,usability,help,helps,582,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:. ```. diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h. index 2c94343377..c68eec6bbc 100644. --- a/core/meta/inc/TClass.h. +++ b/core/meta/inc/TClass.h. @@ -429,7 +429,7 @@ public:. ROOT::DesFunc_t GetDestructor() const;. ROOT::DelArrFunc_t GetDeleteArray() const;. ClassInfo_t *GetClassInfo() const {. - if (fCanLoadClassInfo && !TestBit(kLoading)). + if (fCanLoadClassInfo). LoadClassInfo();. return fClassInfo;. }. diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx. index 06ef48c017..6e0475a4c1 100644. --- a/core/meta/src/TClass.cxx. +++ b/core/meta/src/TClass.cxx. @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const. . // Return if another thread already loaded the info. // while we were waiting for the lock. - if (!fCanLoadClassInfo). + if (!fCanLoadClassInfo || TestBit(kLoading)). return;. . bool autoParse = !gInterpreter->IsAutoParsingSuspended();. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:356,availability,failur,failure,356,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:319,deployability,patch,patch,319,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:356,deployability,fail,failure,356,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:438,deployability,patch,patch,438,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:223,energy efficiency,CPU,CPU,223,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:55,modifiability,variab,variable,55,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:96,performance,synch,synchronization,96,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:223,performance,CPU,CPU,223,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:356,performance,failur,failure,356,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:356,reliability,fail,failure,356,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:319,safety,patch,patch,319,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:438,safety,patch,patch,438,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:447,safety,test,test,447,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:319,security,patch,patch,319,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:438,security,patch,patch,438,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:447,testability,test,test,447,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:138,usability,behavi,behavior,138,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:173,usability,behavi,behavior,173,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/issues/15090:338,usability,help,helps,338,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15090
https://github.com/root-project/root/pull/15092:61,modifiability,variab,variable,61,"@alja . Can you fix warning about defined but not used `cnt` variable? I was in vacations for three weeks, now I am back.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15092
https://github.com/root-project/root/pull/15092:52,safety,review,review,52,@linev I have corrected the warning. Thanks for the review!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15092
https://github.com/root-project/root/pull/15092:52,testability,review,review,52,@linev I have corrected the warning. Thanks for the review!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15092
https://github.com/root-project/root/pull/15092:48,modifiability,variab,variable,48,@alja . You forget to remove increment of `cnt` variable as well. I modify your last commit - probably it will compile now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15092
https://github.com/root-project/root/pull/15092:68,security,modif,modify,68,@alja . You forget to remove increment of `cnt` variable as well. I modify your last commit - probably it will compile now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15092
https://github.com/root-project/root/pull/15094:55,safety,test,tests,55,"> LGTM, but before merging it would be good to see all tests succeeding. Thanks for the review! It seems all check passed now :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15094
https://github.com/root-project/root/pull/15094:88,safety,review,review,88,"> LGTM, but before merging it would be good to see all tests succeeding. Thanks for the review! It seems all check passed now :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15094
https://github.com/root-project/root/pull/15094:55,testability,test,tests,55,"> LGTM, but before merging it would be good to see all tests succeeding. Thanks for the review! It seems all check passed now :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15094
https://github.com/root-project/root/pull/15094:88,testability,review,review,88,"> LGTM, but before merging it would be good to see all tests succeeding. Thanks for the review! It seems all check passed now :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15094
https://github.com/root-project/root/pull/15096:392,modifiability,paramet,parameters,392,"I appreciate efforts to solve my issue, but I have an different opinion what should be the solution. I expressed it in the reply on forum: https://root-forum.cern.ch/t/confusing-behavior-of-setrangeuser-and-fitting-range/58591/5?u=rlalik. I was rather hoping on removing the side effect of `TAxis::SetRange(User)`. There is already fit range determination by the `TF1` function definition or parameters to `TH1::Fit()` and changing the view of the histograms (this is what `SetRange` does) really should not affect the fit. In my opinion the fix went in very wrong direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15096
https://github.com/root-project/root/pull/15096:484,reliability,doe,does,484,"I appreciate efforts to solve my issue, but I have an different opinion what should be the solution. I expressed it in the reply on forum: https://root-forum.cern.ch/t/confusing-behavior-of-setrangeuser-and-fitting-range/58591/5?u=rlalik. I was rather hoping on removing the side effect of `TAxis::SetRange(User)`. There is already fit range determination by the `TF1` function definition or parameters to `TH1::Fit()` and changing the view of the histograms (this is what `SetRange` does) really should not affect the fit. In my opinion the fix went in very wrong direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15096
https://github.com/root-project/root/pull/15096:178,usability,behavi,behavior-of-setrangeuser-and-fitting-range,178,"I appreciate efforts to solve my issue, but I have an different opinion what should be the solution. I expressed it in the reply on forum: https://root-forum.cern.ch/t/confusing-behavior-of-setrangeuser-and-fitting-range/58591/5?u=rlalik. I was rather hoping on removing the side effect of `TAxis::SetRange(User)`. There is already fit range determination by the `TF1` function definition or parameters to `TH1::Fit()` and changing the view of the histograms (this is what `SetRange` does) really should not affect the fit. In my opinion the fix went in very wrong direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15096
https://github.com/root-project/root/pull/15096:307,usability,User,User,307,"I appreciate efforts to solve my issue, but I have an different opinion what should be the solution. I expressed it in the reply on forum: https://root-forum.cern.ch/t/confusing-behavior-of-setrangeuser-and-fitting-range/58591/5?u=rlalik. I was rather hoping on removing the side effect of `TAxis::SetRange(User)`. There is already fit range determination by the `TF1` function definition or parameters to `TH1::Fit()` and changing the view of the histograms (this is what `SetRange` does) really should not affect the fit. In my opinion the fix went in very wrong direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15096
https://github.com/root-project/root/pull/15097:44,deployability,automat,automatically,44,Thanks for your PR ! . The documentation is automatically generated based on the comments on top of the function implementation. No need to modify anything extra. You have to follow the Doxygen format. So please use things like the \param \return keywords. ```. /**. * a normal member taking two arguments and returning an integer value. * \param a an integer argument. * \param s a constant character pointer. * \see Javadoc_Test(). * \return The test results. */. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15097
https://github.com/root-project/root/pull/15097:194,interoperability,format,format,194,Thanks for your PR ! . The documentation is automatically generated based on the comments on top of the function implementation. No need to modify anything extra. You have to follow the Doxygen format. So please use things like the \param \return keywords. ```. /**. * a normal member taking two arguments and returning an integer value. * \param a an integer argument. * \param s a constant character pointer. * \see Javadoc_Test(). * \return The test results. */. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15097
https://github.com/root-project/root/pull/15097:448,safety,test,test,448,Thanks for your PR ! . The documentation is automatically generated based on the comments on top of the function implementation. No need to modify anything extra. You have to follow the Doxygen format. So please use things like the \param \return keywords. ```. /**. * a normal member taking two arguments and returning an integer value. * \param a an integer argument. * \param s a constant character pointer. * \see Javadoc_Test(). * \return The test results. */. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15097
https://github.com/root-project/root/pull/15097:140,security,modif,modify,140,Thanks for your PR ! . The documentation is automatically generated based on the comments on top of the function implementation. No need to modify anything extra. You have to follow the Doxygen format. So please use things like the \param \return keywords. ```. /**. * a normal member taking two arguments and returning an integer value. * \param a an integer argument. * \param s a constant character pointer. * \see Javadoc_Test(). * \return The test results. */. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15097
https://github.com/root-project/root/pull/15097:44,testability,automat,automatically,44,Thanks for your PR ! . The documentation is automatically generated based on the comments on top of the function implementation. No need to modify anything extra. You have to follow the Doxygen format. So please use things like the \param \return keywords. ```. /**. * a normal member taking two arguments and returning an integer value. * \param a an integer argument. * \param s a constant character pointer. * \see Javadoc_Test(). * \return The test results. */. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15097
https://github.com/root-project/root/pull/15097:448,testability,test,test,448,Thanks for your PR ! . The documentation is automatically generated based on the comments on top of the function implementation. No need to modify anything extra. You have to follow the Doxygen format. So please use things like the \param \return keywords. ```. /**. * a normal member taking two arguments and returning an integer value. * \param a an integer argument. * \param s a constant character pointer. * \see Javadoc_Test(). * \return The test results. */. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15097
https://github.com/root-project/root/pull/15097:27,usability,document,documentation,27,Thanks for your PR ! . The documentation is automatically generated based on the comments on top of the function implementation. No need to modify anything extra. You have to follow the Doxygen format. So please use things like the \param \return keywords. ```. /**. * a normal member taking two arguments and returning an integer value. * \param a an integer argument. * \param s a constant character pointer. * \see Javadoc_Test(). * \return The test results. */. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15097
https://github.com/root-project/root/pull/15099:303,availability,failur,failures,303,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:80,deployability,fail,fail,80,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:143,deployability,version,version,143,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:191,deployability,version,version,191,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:227,deployability,instal,install,227,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:241,deployability,version,versions,241,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:285,deployability,observ,observe,285,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:303,deployability,fail,failures,303,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:338,deployability,fail,failing,338,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:470,deployability,releas,releasing,470,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:480,deployability,version,versions,480,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:143,integrability,version,version,143,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:191,integrability,version,version,191,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:241,integrability,version,versions,241,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:480,integrability,version,versions,480,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:85,modifiability,interm,intermittently,85,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:143,modifiability,version,version,143,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:191,modifiability,version,version,191,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:241,modifiability,version,versions,241,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:480,modifiability,version,versions,480,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:303,performance,failur,failures,303,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:80,reliability,fail,fail,80,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:303,reliability,fail,failures,303,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:338,reliability,fail,failing,338,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:74,safety,test,tests,74,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:346,safety,test,tests,346,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:403,safety,test,tests,403,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:430,safety,avoid,avoid,430,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:451,safety,risk,risky,451,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:497,safety,test,testing,497,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:451,security,risk,risky,451,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:74,testability,test,tests,74,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:285,testability,observ,observe,285,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:346,testability,test,tests,346,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:403,testability,test,tests,403,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:497,testability,test,testing,497,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:57,deployability,build,build,57,"I am merging to be able to fix tests with calm, once the build is green. The changes are easy to revert anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:66,energy efficiency,green,green,66,"I am merging to be able to fix tests with calm, once the build is green. The changes are easy to revert anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:31,safety,test,tests,31,"I am merging to be able to fix tests with calm, once the build is green. The changes are easy to revert anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15099:31,testability,test,tests,31,"I am merging to be able to fix tests with calm, once the build is green. The changes are easy to revert anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15099
https://github.com/root-project/root/pull/15100:136,energy efficiency,adapt,adapting,136,"> Changes ok. Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:136,integrability,adapt,adapting,136,"> Changes ok. Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:136,interoperability,adapt,adapting,136,"> Changes ok. Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:136,modifiability,adapt,adapting,136,"> Changes ok. Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:73,usability,document,documentation,73,"> Changes ok. Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:144,energy efficiency,adapt,adapting,144,"> > Changes ok. > . > Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting. Thank you for providing suggestions and taking your time to review the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:144,integrability,adapt,adapting,144,"> > Changes ok. > . > Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting. Thank you for providing suggestions and taking your time to review the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:144,interoperability,adapt,adapting,144,"> > Changes ok. > . > Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting. Thank you for providing suggestions and taking your time to review the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:144,modifiability,adapt,adapting,144,"> > Changes ok. > . > Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting. Thank you for providing suggestions and taking your time to review the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:206,performance,time,time,206,"> > Changes ok. > . > Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting. Thank you for providing suggestions and taking your time to review the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:214,safety,review,review,214,"> > Changes ok. > . > Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting. Thank you for providing suggestions and taking your time to review the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:214,testability,review,review,214,"> > Changes ok. > . > Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting. Thank you for providing suggestions and taking your time to review the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:81,usability,document,documentation,81,"> > Changes ok. > . > Thanks! From my side, the only thing left is improving the documentation of Laplacian, try copy-pasting from Gradient and adapting. Thank you for providing suggestions and taking your time to review the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:942,availability,Error,Error,942,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1040,availability,Error,Error,1040,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1148,availability,Error,Error,1148,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1246,availability,Error,Error,1246,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1354,availability,Error,Error,1354,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1452,availability,Error,Error,1452,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1560,availability,Error,Error,1560,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1658,availability,Error,Error,1658,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1789,availability,redund,redundant,1789,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1802,availability,state,statements,1802,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:307,deployability,updat,updated,307,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1789,deployability,redundan,redundant,1789,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1802,integrability,state,statements,1802,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:35,interoperability,bind,bindings,35,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:35,modifiability,bind,bindings,35,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:974,modifiability,paramet,parameter,974,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1072,modifiability,paramet,parameter,1072,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1180,modifiability,paramet,parameter,1180,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1278,modifiability,paramet,parameter,1278,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1386,modifiability,paramet,parameter,1386,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1484,modifiability,paramet,parameter,1484,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1592,modifiability,paramet,parameter,1592,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1690,modifiability,paramet,parameter,1690,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:759,performance,time,times,759,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:800,performance,time,times,800,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:942,performance,Error,Error,942,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1040,performance,Error,Error,1040,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1148,performance,Error,Error,1148,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1246,performance,Error,Error,1246,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1354,performance,Error,Error,1354,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1452,performance,Error,Error,1452,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1560,performance,Error,Error,1560,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1658,performance,Error,Error,1658,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:665,reliability,doe,does,665,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1789,reliability,redundan,redundant,1789,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:109,safety,test,testTMath,109,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:276,safety,accid,accidentally,276,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:307,safety,updat,updated,307,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:399,safety,test,testTMath,399,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:942,safety,Error,Error,942,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:968,safety,Input,Input,968,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1040,safety,Error,Error,1040,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1066,safety,Input,Input,1066,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1148,safety,Error,Error,1148,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1174,safety,Input,Input,1174,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1246,safety,Error,Error,1246,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1272,safety,Input,Input,1272,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1354,safety,Error,Error,1354,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1380,safety,Input,Input,1380,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1452,safety,Error,Error,1452,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1478,safety,Input,Input,1478,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1560,safety,Error,Error,1560,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1586,safety,Input,Input,1586,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1658,safety,Error,Error,1658,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1684,safety,Input,Input,1684,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1789,safety,redund,redundant,1789,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:307,security,updat,updated,307,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:109,testability,test,testTMath,109,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:399,testability,test,testTMath,399,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:942,usability,Error,Error,942,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:968,usability,Input,Input,968,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1040,usability,Error,Error,1040,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1066,usability,Input,Input,1066,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1148,usability,Error,Error,1148,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1174,usability,Input,Input,1174,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1246,usability,Error,Error,1246,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1272,usability,Input,Input,1272,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1354,usability,Error,Error,1354,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1380,usability,Input,Input,1380,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1452,usability,Error,Error,1452,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1478,usability,Input,Input,1478,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1560,usability,Error,Error,1560,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1586,usability,Input,Input,1586,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1658,usability,Error,Error,1658,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:1684,usability,Input,Input,1684,"> Why the change in roofitcore and bindings? > . > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake. > . > Thanks a lot! Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++. template <typename T>. T *TMath::Gradient(Long64_t n, T *f, double h). {. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. if (!f) {. ::Error(""TMath::Gradient"", ""Input parameter f is empty."");. return nullptr;. } else if (n < 2) {. ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);. return nullptr;. }. Long64_t i = 1;. ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15100:30,performance,cach,cache,30,"That might be just a 'browser cache' issue. Refresh your window, now it looks correct to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15100
https://github.com/root-project/root/pull/15101:187,deployability,build,builds,187,"Hi @tmadlener , thanks for this PR. Could you please add coverage for this feature by extending the existing RVec tests? If that makes sense for you, once this is done, I will launch the builds for testing the new code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:86,modifiability,exten,extending,86,"Hi @tmadlener , thanks for this PR. Could you please add coverage for this feature by extending the existing RVec tests? If that makes sense for you, once this is done, I will launch the builds for testing the new code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:114,safety,test,tests,114,"Hi @tmadlener , thanks for this PR. Could you please add coverage for this feature by extending the existing RVec tests? If that makes sense for you, once this is done, I will launch the builds for testing the new code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:198,safety,test,testing,198,"Hi @tmadlener , thanks for this PR. Could you please add coverage for this feature by extending the existing RVec tests? If that makes sense for you, once this is done, I will launch the builds for testing the new code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:57,testability,coverag,coverage,57,"Hi @tmadlener , thanks for this PR. Could you please add coverage for this feature by extending the existing RVec tests? If that makes sense for you, once this is done, I will launch the builds for testing the new code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:114,testability,test,tests,114,"Hi @tmadlener , thanks for this PR. Could you please add coverage for this feature by extending the existing RVec tests? If that makes sense for you, once this is done, I will launch the builds for testing the new code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:198,testability,test,testing,198,"Hi @tmadlener , thanks for this PR. Could you please add coverage for this feature by extending the existing RVec tests? If that makes sense for you, once this is done, I will launch the builds for testing the new code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:19,safety,test,tests,19,"I have added a few tests that check he expected return types. They also give some information about the accuracy compared to a calculation done with all doubles, since there will always be some floating point promotion somewhere in mixed cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:19,testability,test,tests,19,"I have added a few tests that check he expected return types. They also give some information about the accuracy compared to a calculation done with all doubles, since there will always be some floating point promotion somewhere in mixed cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:63,deployability,fail,fail,63,"Hi,. The changes are properly picked up, but two tutorials now fail because the number of template arguments changed. Could you fix them? ```. tutorial-dataframe-df102_NanoAODDimuonAnalysis. tutorial-v7-ntuple-ntpl004_dimuon. ```. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:63,reliability,fail,fail,63,"Hi,. The changes are properly picked up, but two tutorials now fail because the number of template arguments changed. Could you fix them? ```. tutorial-dataframe-df102_NanoAODDimuonAnalysis. tutorial-v7-ntuple-ntpl004_dimuon. ```. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:86,deployability,updat,update,86,"Ah, I didn't have the patience to run all the tests locally so I missed those. I have update the definitions of the template functions to only have one non-defaulted template argument. This should make for a truly transparent change. On the other hand in deduced contexts it should now be possible to have different floating point types. Maybe there should be an actual test that checks that when invoked from an RDataFrame from python. I could not find an immediate best place for that, but maybe you have one in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:46,safety,test,tests,46,"Ah, I didn't have the patience to run all the tests locally so I missed those. I have update the definitions of the template functions to only have one non-defaulted template argument. This should make for a truly transparent change. On the other hand in deduced contexts it should now be possible to have different floating point types. Maybe there should be an actual test that checks that when invoked from an RDataFrame from python. I could not find an immediate best place for that, but maybe you have one in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:86,safety,updat,update,86,"Ah, I didn't have the patience to run all the tests locally so I missed those. I have update the definitions of the template functions to only have one non-defaulted template argument. This should make for a truly transparent change. On the other hand in deduced contexts it should now be possible to have different floating point types. Maybe there should be an actual test that checks that when invoked from an RDataFrame from python. I could not find an immediate best place for that, but maybe you have one in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:370,safety,test,test,370,"Ah, I didn't have the patience to run all the tests locally so I missed those. I have update the definitions of the template functions to only have one non-defaulted template argument. This should make for a truly transparent change. On the other hand in deduced contexts it should now be possible to have different floating point types. Maybe there should be an actual test that checks that when invoked from an RDataFrame from python. I could not find an immediate best place for that, but maybe you have one in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:86,security,updat,update,86,"Ah, I didn't have the patience to run all the tests locally so I missed those. I have update the definitions of the template functions to only have one non-defaulted template argument. This should make for a truly transparent change. On the other hand in deduced contexts it should now be possible to have different floating point types. Maybe there should be an actual test that checks that when invoked from an RDataFrame from python. I could not find an immediate best place for that, but maybe you have one in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:46,testability,test,tests,46,"Ah, I didn't have the patience to run all the tests locally so I missed those. I have update the definitions of the template functions to only have one non-defaulted template argument. This should make for a truly transparent change. On the other hand in deduced contexts it should now be possible to have different floating point types. Maybe there should be an actual test that checks that when invoked from an RDataFrame from python. I could not find an immediate best place for that, but maybe you have one in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:263,testability,context,contexts,263,"Ah, I didn't have the patience to run all the tests locally so I missed those. I have update the definitions of the template functions to only have one non-defaulted template argument. This should make for a truly transparent change. On the other hand in deduced contexts it should now be possible to have different floating point types. Maybe there should be an actual test that checks that when invoked from an RDataFrame from python. I could not find an immediate best place for that, but maybe you have one in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15101:370,testability,test,test,370,"Ah, I didn't have the patience to run all the tests locally so I missed those. I have update the definitions of the template functions to only have one non-defaulted template argument. This should make for a truly transparent change. On the other hand in deduced contexts it should now be possible to have different floating point types. Maybe there should be an actual test that checks that when invoked from an RDataFrame from python. I could not find an immediate best place for that, but maybe you have one in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15101
https://github.com/root-project/root/pull/15103:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15103
https://github.com/root-project/root/issues/15104:425,deployability,modul,module,425,"Thanks for reporting! This seems to be a limitation with the new cppyy, because enums are correctly typed now instead of converting them always to `int`. You can see the same behavior in vanilla cppyy:. ```python. import cppyy. import pickle. cppyy.cppdef("""""". enum MyEnum { Foo, Bar };. """"""). a = cppyy.gbl.Foo. pickle.dumps(a). ```. ```txt. Traceback (most recent call last):. File ""/home/jonas/tmp/enums.py"", line 10, in <module>. pickle.dumps(a). _pickle.PicklingError: Can't pickle <class '__main__.MyEnum'>: attribute lookup MyEnum on __main__ failed. ```. A backwards compatible workaround would be to cast to int explicitly, like:. ```python. a = int(ROOT.TMVA.Types.kBDT). ```. Would that be okay for you, or are these changes to your code not sustainable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:550,deployability,fail,failed,550,"Thanks for reporting! This seems to be a limitation with the new cppyy, because enums are correctly typed now instead of converting them always to `int`. You can see the same behavior in vanilla cppyy:. ```python. import cppyy. import pickle. cppyy.cppdef("""""". enum MyEnum { Foo, Bar };. """"""). a = cppyy.gbl.Foo. pickle.dumps(a). ```. ```txt. Traceback (most recent call last):. File ""/home/jonas/tmp/enums.py"", line 10, in <module>. pickle.dumps(a). _pickle.PicklingError: Can't pickle <class '__main__.MyEnum'>: attribute lookup MyEnum on __main__ failed. ```. A backwards compatible workaround would be to cast to int explicitly, like:. ```python. a = int(ROOT.TMVA.Types.kBDT). ```. Would that be okay for you, or are these changes to your code not sustainable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:753,energy efficiency,sustainab,sustainable,753,"Thanks for reporting! This seems to be a limitation with the new cppyy, because enums are correctly typed now instead of converting them always to `int`. You can see the same behavior in vanilla cppyy:. ```python. import cppyy. import pickle. cppyy.cppdef("""""". enum MyEnum { Foo, Bar };. """"""). a = cppyy.gbl.Foo. pickle.dumps(a). ```. ```txt. Traceback (most recent call last):. File ""/home/jonas/tmp/enums.py"", line 10, in <module>. pickle.dumps(a). _pickle.PicklingError: Can't pickle <class '__main__.MyEnum'>: attribute lookup MyEnum on __main__ failed. ```. A backwards compatible workaround would be to cast to int explicitly, like:. ```python. a = int(ROOT.TMVA.Types.kBDT). ```. Would that be okay for you, or are these changes to your code not sustainable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:575,interoperability,compatib,compatible,575,"Thanks for reporting! This seems to be a limitation with the new cppyy, because enums are correctly typed now instead of converting them always to `int`. You can see the same behavior in vanilla cppyy:. ```python. import cppyy. import pickle. cppyy.cppdef("""""". enum MyEnum { Foo, Bar };. """"""). a = cppyy.gbl.Foo. pickle.dumps(a). ```. ```txt. Traceback (most recent call last):. File ""/home/jonas/tmp/enums.py"", line 10, in <module>. pickle.dumps(a). _pickle.PicklingError: Can't pickle <class '__main__.MyEnum'>: attribute lookup MyEnum on __main__ failed. ```. A backwards compatible workaround would be to cast to int explicitly, like:. ```python. a = int(ROOT.TMVA.Types.kBDT). ```. Would that be okay for you, or are these changes to your code not sustainable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:425,modifiability,modul,module,425,"Thanks for reporting! This seems to be a limitation with the new cppyy, because enums are correctly typed now instead of converting them always to `int`. You can see the same behavior in vanilla cppyy:. ```python. import cppyy. import pickle. cppyy.cppdef("""""". enum MyEnum { Foo, Bar };. """"""). a = cppyy.gbl.Foo. pickle.dumps(a). ```. ```txt. Traceback (most recent call last):. File ""/home/jonas/tmp/enums.py"", line 10, in <module>. pickle.dumps(a). _pickle.PicklingError: Can't pickle <class '__main__.MyEnum'>: attribute lookup MyEnum on __main__ failed. ```. A backwards compatible workaround would be to cast to int explicitly, like:. ```python. a = int(ROOT.TMVA.Types.kBDT). ```. Would that be okay for you, or are these changes to your code not sustainable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:550,reliability,fail,failed,550,"Thanks for reporting! This seems to be a limitation with the new cppyy, because enums are correctly typed now instead of converting them always to `int`. You can see the same behavior in vanilla cppyy:. ```python. import cppyy. import pickle. cppyy.cppdef("""""". enum MyEnum { Foo, Bar };. """"""). a = cppyy.gbl.Foo. pickle.dumps(a). ```. ```txt. Traceback (most recent call last):. File ""/home/jonas/tmp/enums.py"", line 10, in <module>. pickle.dumps(a). _pickle.PicklingError: Can't pickle <class '__main__.MyEnum'>: attribute lookup MyEnum on __main__ failed. ```. A backwards compatible workaround would be to cast to int explicitly, like:. ```python. a = int(ROOT.TMVA.Types.kBDT). ```. Would that be okay for you, or are these changes to your code not sustainable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:425,safety,modul,module,425,"Thanks for reporting! This seems to be a limitation with the new cppyy, because enums are correctly typed now instead of converting them always to `int`. You can see the same behavior in vanilla cppyy:. ```python. import cppyy. import pickle. cppyy.cppdef("""""". enum MyEnum { Foo, Bar };. """"""). a = cppyy.gbl.Foo. pickle.dumps(a). ```. ```txt. Traceback (most recent call last):. File ""/home/jonas/tmp/enums.py"", line 10, in <module>. pickle.dumps(a). _pickle.PicklingError: Can't pickle <class '__main__.MyEnum'>: attribute lookup MyEnum on __main__ failed. ```. A backwards compatible workaround would be to cast to int explicitly, like:. ```python. a = int(ROOT.TMVA.Types.kBDT). ```. Would that be okay for you, or are these changes to your code not sustainable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:343,testability,Trace,Traceback,343,"Thanks for reporting! This seems to be a limitation with the new cppyy, because enums are correctly typed now instead of converting them always to `int`. You can see the same behavior in vanilla cppyy:. ```python. import cppyy. import pickle. cppyy.cppdef("""""". enum MyEnum { Foo, Bar };. """"""). a = cppyy.gbl.Foo. pickle.dumps(a). ```. ```txt. Traceback (most recent call last):. File ""/home/jonas/tmp/enums.py"", line 10, in <module>. pickle.dumps(a). _pickle.PicklingError: Can't pickle <class '__main__.MyEnum'>: attribute lookup MyEnum on __main__ failed. ```. A backwards compatible workaround would be to cast to int explicitly, like:. ```python. a = int(ROOT.TMVA.Types.kBDT). ```. Would that be okay for you, or are these changes to your code not sustainable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:175,usability,behavi,behavior,175,"Thanks for reporting! This seems to be a limitation with the new cppyy, because enums are correctly typed now instead of converting them always to `int`. You can see the same behavior in vanilla cppyy:. ```python. import cppyy. import pickle. cppyy.cppdef("""""". enum MyEnum { Foo, Bar };. """"""). a = cppyy.gbl.Foo. pickle.dumps(a). ```. ```txt. Traceback (most recent call last):. File ""/home/jonas/tmp/enums.py"", line 10, in <module>. pickle.dumps(a). _pickle.PicklingError: Can't pickle <class '__main__.MyEnum'>: attribute lookup MyEnum on __main__ failed. ```. A backwards compatible workaround would be to cast to int explicitly, like:. ```python. a = int(ROOT.TMVA.Types.kBDT). ```. Would that be okay for you, or are these changes to your code not sustainable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:447,availability,error,error,447,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:26,deployability,patch,patch,26,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:95,deployability,patch,patched,95,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:563,deployability,patch,patch,563,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:42,interoperability,convers,conversion,42,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:265,performance,parallel,parallelisation,265,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:330,performance,parallel,parallel,330,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:447,performance,error,error,447,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:522,performance,time,time,522,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:633,performance,time,time,633,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:26,safety,patch,patch,26,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:95,safety,patch,patched,95,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:447,safety,error,error,447,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:563,safety,patch,patch,563,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:26,security,patch,patch,26,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:95,security,patch,patched,95,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:530,security,ident,identify,530,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:563,security,patch,patch,563,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:447,usability,error,error,447,"Hi Jonas,. I've used this patch (explicit conversion to int) for my code and . it is a kind of patched solution. But it will be nice (for future) of a proper fix appear in cppyy. (Actually location of this bug.feature was a rather tricky - . it happens when I make parallelisation of . my task into several processors/nodes using parallel python. For technical reasons the output is suppressed in a very harsh way, . therefore the final ""visible"" error report has nothing to to. with pickling on enums.. And it takes some time to identify the plroblem. Temporary patch in my code ok, but proper long-term solution . is better. For a time being it is OK for me. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:80,usability,support,supported,80,"Thanks a lot for your reply! Ok, in that case we'll think about how this can be supported again. @wlav, it would also be interesting to hear your opinion here, since typing the enums not as `int` anymore was apparently a deliberate choice by cppyy in the recent years.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:146,testability,regress,regressing,146,"Mapping enums to Python `int` breaks templates, hence each `enum` type is now an actual type. Fix would be to make these pickle-able, rather than regressing. I'm surprised that `pickle` is looking for `__main__.MyEnum` and not `cppyy.gbl.MyEnum`, though, which is probably b/c the generated `enum` types do not have a `__module__` attributed pointing back at `cppyy.gbl` or whatever which relevant namespace.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:55,reliability,doe,doesn,55,"I just tried CPyCppyy master inside ROOT, and it still doesn't work for the reproducer in this issue, because the enum is a member of a class :frowning:. Here is a reproducer without ROOT:. ```python. import cppyy. import pickle. cppyy.cppdef("""""". struct MyClass {. enum MyEnum { Foo, Bar };. };. """"""). a = cppyy.gbl.MyClass.Foo. pickle.dumps(a). ```. I think we have this pattern in ROOT quite often, unfortunately",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:11,deployability,fail,fail,11,"Same would fail for any subclass then. Seems that renaming the `enum` Python-side from `MyEnum` to `MyClass.MyEnum` (such that `__name__` becomes `""MyClass.MyEnum""`) and removing `MyClass` from `__module__` fixes the issue, but the former doesn't feel right.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:24,integrability,sub,subclass,24,"Same would fail for any subclass then. Seems that renaming the `enum` Python-side from `MyEnum` to `MyClass.MyEnum` (such that `__name__` becomes `""MyClass.MyEnum""`) and removing `MyClass` from `__module__` fixes the issue, but the former doesn't feel right.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:11,reliability,fail,fail,11,"Same would fail for any subclass then. Seems that renaming the `enum` Python-side from `MyEnum` to `MyClass.MyEnum` (such that `__name__` becomes `""MyClass.MyEnum""`) and removing `MyClass` from `__module__` fixes the issue, but the former doesn't feel right.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/issues/15104:239,reliability,doe,doesn,239,"Same would fail for any subclass then. Seems that renaming the `enum` Python-side from `MyEnum` to `MyClass.MyEnum` (such that `__name__` becomes `""MyClass.MyEnum""`) and removing `MyClass` from `__module__` fixes the issue, but the former doesn't feel right.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15104
https://github.com/root-project/root/pull/15105:402,availability,mainten,maintenance,402,"Thanks for this code. Could you please add in the description of the PR why you are doing this, and especially what problem you are solving? A good way to tackle this would be to try to convince the reader that thanks to the code, ROOT will be like before (e.g. nothing breaks for the experiments, users, in the development process of ROOT iteself) but better (e.g. there is a reduction in the cost of maintenance, development, testing, or an increase of runtime performance).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15105:377,energy efficiency,reduc,reduction,377,"Thanks for this code. Could you please add in the description of the PR why you are doing this, and especially what problem you are solving? A good way to tackle this would be to try to convince the reader that thanks to the code, ROOT will be like before (e.g. nothing breaks for the experiments, users, in the development process of ROOT iteself) but better (e.g. there is a reduction in the cost of maintenance, development, testing, or an increase of runtime performance).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15105:463,performance,perform,performance,463,"Thanks for this code. Could you please add in the description of the PR why you are doing this, and especially what problem you are solving? A good way to tackle this would be to try to convince the reader that thanks to the code, ROOT will be like before (e.g. nothing breaks for the experiments, users, in the development process of ROOT iteself) but better (e.g. there is a reduction in the cost of maintenance, development, testing, or an increase of runtime performance).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15105:402,reliability,mainten,maintenance,402,"Thanks for this code. Could you please add in the description of the PR why you are doing this, and especially what problem you are solving? A good way to tackle this would be to try to convince the reader that thanks to the code, ROOT will be like before (e.g. nothing breaks for the experiments, users, in the development process of ROOT iteself) but better (e.g. there is a reduction in the cost of maintenance, development, testing, or an increase of runtime performance).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15105:428,safety,test,testing,428,"Thanks for this code. Could you please add in the description of the PR why you are doing this, and especially what problem you are solving? A good way to tackle this would be to try to convince the reader that thanks to the code, ROOT will be like before (e.g. nothing breaks for the experiments, users, in the development process of ROOT iteself) but better (e.g. there is a reduction in the cost of maintenance, development, testing, or an increase of runtime performance).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15105:428,testability,test,testing,428,"Thanks for this code. Could you please add in the description of the PR why you are doing this, and especially what problem you are solving? A good way to tackle this would be to try to convince the reader that thanks to the code, ROOT will be like before (e.g. nothing breaks for the experiments, users, in the development process of ROOT iteself) but better (e.g. there is a reduction in the cost of maintenance, development, testing, or an increase of runtime performance).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15105:298,usability,user,users,298,"Thanks for this code. Could you please add in the description of the PR why you are doing this, and especially what problem you are solving? A good way to tackle this would be to try to convince the reader that thanks to the code, ROOT will be like before (e.g. nothing breaks for the experiments, users, in the development process of ROOT iteself) but better (e.g. there is a reduction in the cost of maintenance, development, testing, or an increase of runtime performance).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15105:463,usability,perform,performance,463,"Thanks for this code. Could you please add in the description of the PR why you are doing this, and especially what problem you are solving? A good way to tackle this would be to try to convince the reader that thanks to the code, ROOT will be like before (e.g. nothing breaks for the experiments, users, in the development process of ROOT iteself) but better (e.g. there is a reduction in the cost of maintenance, development, testing, or an increase of runtime performance).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15105:63,deployability,upgrad,upgrade,63,Thanks. Could you point the reader to projects in need of this upgrade in the PR description?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15105:63,modifiability,upgrad,upgrade,63,Thanks. Could you point the reader to projects in need of this upgrade in the PR description?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15105:336,integrability,sub,submited,336,"@dpiparo Well, we had some programs we used internally in my university group and I did some work to allow to FetchContent ROOT directly for this project. Then when I deleted my own ROOT repo and the last PR disappered people told me they could be still interested (https://github.com/root-project/root/pull/9516). This is the reason I submited a PR again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15105
https://github.com/root-project/root/pull/15106:38,availability,failur,failure,38,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106
https://github.com/root-project/root/pull/15106:38,deployability,fail,failure,38,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106
https://github.com/root-project/root/pull/15106:38,performance,failur,failure,38,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106
https://github.com/root-project/root/pull/15106:78,performance,time,timedout,78,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106
https://github.com/root-project/root/pull/15106:38,reliability,fail,failure,38,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106
https://github.com/root-project/root/pull/15106:73,safety,test,test,73,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106
https://github.com/root-project/root/pull/15106:73,testability,test,test,73,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106
https://github.com/root-project/root/pull/15106:114,usability,clear,clear,114,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106
https://github.com/root-project/root/issues/15107:372,deployability,updat,updates,372,"I think the issue is that `.github/workflows/code_analysis.yml` fetches `${{github.base_ref}}`, which is the symbolic name and may not actually be identical `${{ github.event.pull_request.base.sha }}`. I've been able to reproduce this in https://github.com/root-project/root/pull/15172 by adding a new commit, but force-pushing (for example when amending a commit) always updates the base sha for me, so the problem doesn't trigger. Now I need to wait for a new commit in `master` to test my fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15107
https://github.com/root-project/root/issues/15107:169,integrability,event,event,169,"I think the issue is that `.github/workflows/code_analysis.yml` fetches `${{github.base_ref}}`, which is the symbolic name and may not actually be identical `${{ github.event.pull_request.base.sha }}`. I've been able to reproduce this in https://github.com/root-project/root/pull/15172 by adding a new commit, but force-pushing (for example when amending a commit) always updates the base sha for me, so the problem doesn't trigger. Now I need to wait for a new commit in `master` to test my fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15107
https://github.com/root-project/root/issues/15107:416,reliability,doe,doesn,416,"I think the issue is that `.github/workflows/code_analysis.yml` fetches `${{github.base_ref}}`, which is the symbolic name and may not actually be identical `${{ github.event.pull_request.base.sha }}`. I've been able to reproduce this in https://github.com/root-project/root/pull/15172 by adding a new commit, but force-pushing (for example when amending a commit) always updates the base sha for me, so the problem doesn't trigger. Now I need to wait for a new commit in `master` to test my fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15107
https://github.com/root-project/root/issues/15107:372,safety,updat,updates,372,"I think the issue is that `.github/workflows/code_analysis.yml` fetches `${{github.base_ref}}`, which is the symbolic name and may not actually be identical `${{ github.event.pull_request.base.sha }}`. I've been able to reproduce this in https://github.com/root-project/root/pull/15172 by adding a new commit, but force-pushing (for example when amending a commit) always updates the base sha for me, so the problem doesn't trigger. Now I need to wait for a new commit in `master` to test my fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15107
https://github.com/root-project/root/issues/15107:484,safety,test,test,484,"I think the issue is that `.github/workflows/code_analysis.yml` fetches `${{github.base_ref}}`, which is the symbolic name and may not actually be identical `${{ github.event.pull_request.base.sha }}`. I've been able to reproduce this in https://github.com/root-project/root/pull/15172 by adding a new commit, but force-pushing (for example when amending a commit) always updates the base sha for me, so the problem doesn't trigger. Now I need to wait for a new commit in `master` to test my fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15107
https://github.com/root-project/root/issues/15107:147,security,ident,identical,147,"I think the issue is that `.github/workflows/code_analysis.yml` fetches `${{github.base_ref}}`, which is the symbolic name and may not actually be identical `${{ github.event.pull_request.base.sha }}`. I've been able to reproduce this in https://github.com/root-project/root/pull/15172 by adding a new commit, but force-pushing (for example when amending a commit) always updates the base sha for me, so the problem doesn't trigger. Now I need to wait for a new commit in `master` to test my fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15107
https://github.com/root-project/root/issues/15107:372,security,updat,updates,372,"I think the issue is that `.github/workflows/code_analysis.yml` fetches `${{github.base_ref}}`, which is the symbolic name and may not actually be identical `${{ github.event.pull_request.base.sha }}`. I've been able to reproduce this in https://github.com/root-project/root/pull/15172 by adding a new commit, but force-pushing (for example when amending a commit) always updates the base sha for me, so the problem doesn't trigger. Now I need to wait for a new commit in `master` to test my fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15107
https://github.com/root-project/root/issues/15107:484,testability,test,test,484,"I think the issue is that `.github/workflows/code_analysis.yml` fetches `${{github.base_ref}}`, which is the symbolic name and may not actually be identical `${{ github.event.pull_request.base.sha }}`. I've been able to reproduce this in https://github.com/root-project/root/pull/15172 by adding a new commit, but force-pushing (for example when amending a commit) always updates the base sha for me, so the problem doesn't trigger. Now I need to wait for a new commit in `master` to test my fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15107
https://github.com/root-project/root/issues/15107:35,usability,workflow,workflows,35,"I think the issue is that `.github/workflows/code_analysis.yml` fetches `${{github.base_ref}}`, which is the symbolic name and may not actually be identical `${{ github.event.pull_request.base.sha }}`. I've been able to reproduce this in https://github.com/root-project/root/pull/15172 by adding a new commit, but force-pushing (for example when amending a commit) always updates the base sha for me, so the problem doesn't trigger. Now I need to wait for a new commit in `master` to test my fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15107
https://github.com/root-project/root/issues/15108:100,deployability,manag,manage,100,Is it maybe because the LinkDef file is called with another name that `grep -i -v LinkDef` does not manage to exclude?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15108
https://github.com/root-project/root/issues/15108:100,energy efficiency,manag,manage,100,Is it maybe because the LinkDef file is called with another name that `grep -i -v LinkDef` does not manage to exclude?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15108
https://github.com/root-project/root/issues/15108:91,reliability,doe,does,91,Is it maybe because the LinkDef file is called with another name that `grep -i -v LinkDef` does not manage to exclude?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15108
https://github.com/root-project/root/issues/15108:100,safety,manag,manage,100,Is it maybe because the LinkDef file is called with another name that `grep -i -v LinkDef` does not manage to exclude?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15108
https://github.com/root-project/root/issues/15108:24,integrability,sub,submit,24,It should match. Let me submit a test PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15108
https://github.com/root-project/root/issues/15108:33,safety,test,test,33,It should match. Let me submit a test PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15108
https://github.com/root-project/root/issues/15108:33,testability,test,test,33,It should match. Let me submit a test PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15108
https://github.com/root-project/root/issues/15108:82,interoperability,format,format,82,"The problem appears if _only_ linkdef files are changed. In this case, `git-clang-format` receives an empty list of files to check and looks all the changed files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15108
https://github.com/root-project/root/pull/15110:207,integrability,batch,batch,207,> I'll take care of that once I have accumulated a few PRs for a bulk backport (like this we don't spam too many PRs). Thanks a lot! Could you also add https://github.com/root-project/root/pull/14818 to the batch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15110
https://github.com/root-project/root/pull/15110:207,performance,batch,batch,207,> I'll take care of that once I have accumulated a few PRs for a bulk backport (like this we don't spam too many PRs). Thanks a lot! Could you also add https://github.com/root-project/root/pull/14818 to the batch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15110
https://github.com/root-project/root/pull/15111:47,deployability,patch,patches,47,FWIW the plan is to backport this to `v6-32-00-patches` because it finishes the RNTuple merging feature added in this cycle.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15111
https://github.com/root-project/root/pull/15111:47,safety,patch,patches,47,FWIW the plan is to backport this to `v6-32-00-patches` because it finishes the RNTuple merging feature added in this cycle.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15111
https://github.com/root-project/root/pull/15111:47,security,patch,patches,47,FWIW the plan is to backport this to `v6-32-00-patches` because it finishes the RNTuple merging feature added in this cycle.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15111
https://github.com/root-project/root/pull/15111:9,testability,plan,plan,9,FWIW the plan is to backport this to `v6-32-00-patches` because it finishes the RNTuple merging feature added in this cycle.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15111
https://github.com/root-project/root/pull/15113:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:242,integrability,discover,discovered,242,"> Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. This particular problem was discovered by ""visual"" inspection and thus does not have any good reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:242,interoperability,discover,discovered,242,"> Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. This particular problem was discovered by ""visual"" inspection and thus does not have any good reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:285,reliability,doe,does,285,"> Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. This particular problem was discovered by ""visual"" inspection and thus does not have any good reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:90,security,expos,exposed,90,"> Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. This particular problem was discovered by ""visual"" inspection and thus does not have any good reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:61,testability,mock,mock,61,"> Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. This particular problem was discovered by ""visual"" inspection and thus does not have any good reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:242,usability,discov,discovered,242,"> Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. This particular problem was discovered by ""visual"" inspection and thus does not have any good reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:257,usability,visual,visual,257,"> Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. This particular problem was discovered by ""visual"" inspection and thus does not have any good reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:235,safety,test,testing,235,"> > Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? > . > Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. Also in CMS' testing the occurrence rate is in the range of 1e-4 ... 1e-6, i.e. rare enough to make debugging very impractical, but frequent enough to be a problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:92,security,expos,exposed,92,"> > Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? > . > Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. Also in CMS' testing the occurrence rate is in the range of 1e-4 ... 1e-6, i.e. rare enough to make debugging very impractical, but frequent enough to be a problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:63,testability,mock,mock,63,"> > Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? > . > Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. Also in CMS' testing the occurrence rate is in the range of 1e-4 ... 1e-6, i.e. rare enough to make debugging very impractical, but frequent enough to be a problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15113:235,testability,test,testing,235,"> > Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug? > . > Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. Also in CMS' testing the occurrence rate is in the range of 1e-4 ... 1e-6, i.e. rare enough to make debugging very impractical, but frequent enough to be a problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15113
https://github.com/root-project/root/pull/15114:75,modifiability,Pac,Package,75,There is a comment just above the line you enclose with the `if`:. ```txt. Package up needed system libraries - only for WIN32? ```. Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:187,reliability,Doe,Does,187,There is a comment just above the line you enclose with the `if`:. ```txt. Package up needed system libraries - only for WIN32? ```. Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:393,deployability,modul,module,393,"> There is a comment just above the line you enclose with the `if`:. > . > ```. > Package up needed system libraries - only for WIN32? > ```. > . > Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely? I guess so, but since I don't know if that affects other platforms I prefer not removing it for the time being. The doc says:. > Include this module to search for compiler-provided system runtime libraries and add install rules for them. I.e. it is not Windows specific",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:465,deployability,instal,install,465,"> There is a comment just above the line you enclose with the `if`:. > . > ```. > Package up needed system libraries - only for WIN32? > ```. > . > Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely? I guess so, but since I don't know if that affects other platforms I prefer not removing it for the time being. The doc says:. > Include this module to search for compiler-provided system runtime libraries and add install rules for them. I.e. it is not Windows specific",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:308,interoperability,platform,platforms,308,"> There is a comment just above the line you enclose with the `if`:. > . > ```. > Package up needed system libraries - only for WIN32? > ```. > . > Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely? I guess so, but since I don't know if that affects other platforms I prefer not removing it for the time being. The doc says:. > Include this module to search for compiler-provided system runtime libraries and add install rules for them. I.e. it is not Windows specific",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:512,interoperability,specif,specific,512,"> There is a comment just above the line you enclose with the `if`:. > . > ```. > Package up needed system libraries - only for WIN32? > ```. > . > Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely? I guess so, but since I don't know if that affects other platforms I prefer not removing it for the time being. The doc says:. > Include this module to search for compiler-provided system runtime libraries and add install rules for them. I.e. it is not Windows specific",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:82,modifiability,Pac,Package,82,"> There is a comment just above the line you enclose with the `if`:. > . > ```. > Package up needed system libraries - only for WIN32? > ```. > . > Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely? I guess so, but since I don't know if that affects other platforms I prefer not removing it for the time being. The doc says:. > Include this module to search for compiler-provided system runtime libraries and add install rules for them. I.e. it is not Windows specific",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:393,modifiability,modul,module,393,"> There is a comment just above the line you enclose with the `if`:. > . > ```. > Package up needed system libraries - only for WIN32? > ```. > . > Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely? I guess so, but since I don't know if that affects other platforms I prefer not removing it for the time being. The doc says:. > Include this module to search for compiler-provided system runtime libraries and add install rules for them. I.e. it is not Windows specific",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:351,performance,time,time,351,"> There is a comment just above the line you enclose with the `if`:. > . > ```. > Package up needed system libraries - only for WIN32? > ```. > . > Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely? I guess so, but since I don't know if that affects other platforms I prefer not removing it for the time being. The doc says:. > Include this module to search for compiler-provided system runtime libraries and add install rules for them. I.e. it is not Windows specific",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:202,reliability,Doe,Does,202,"> There is a comment just above the line you enclose with the `if`:. > . > ```. > Package up needed system libraries - only for WIN32? > ```. > . > Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely? I guess so, but since I don't know if that affects other platforms I prefer not removing it for the time being. The doc says:. > Include this module to search for compiler-provided system runtime libraries and add install rules for them. I.e. it is not Windows specific",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:393,safety,modul,module,393,"> There is a comment just above the line you enclose with the `if`:. > . > ```. > Package up needed system libraries - only for WIN32? > ```. > . > Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely? I guess so, but since I don't know if that affects other platforms I prefer not removing it for the time being. The doc says:. > Include this module to search for compiler-provided system runtime libraries and add install rules for them. I.e. it is not Windows specific",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15114:320,usability,prefer,prefer,320,"> There is a comment just above the line you enclose with the `if`:. > . > ```. > Package up needed system libraries - only for WIN32? > ```. > . > Seems it was only intended for Windows to begin with. Does this mean the line can be removed entirely? I guess so, but since I don't know if that affects other platforms I prefer not removing it for the time being. The doc says:. > Include this module to search for compiler-provided system runtime libraries and add install rules for them. I.e. it is not Windows specific",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15114
https://github.com/root-project/root/pull/15116:425,security,hash,hashing,425,"While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:365,testability,simpl,simplify,365,"While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:365,usability,simpl,simplify,365,"While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:849,availability,sli,slightly,849,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:730,deployability,version,version,730,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:659,integrability,interfac,interface,659,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:730,integrability,version,version,730,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:823,integrability,interfac,interface,823,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:892,integrability,interfac,interface,892,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:659,interoperability,interfac,interface,659,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:823,interoperability,interfac,interface,823,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:892,interoperability,interfac,interface,892,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:659,modifiability,interfac,interface,659,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:730,modifiability,version,version,730,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:823,modifiability,interfac,interface,823,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:892,modifiability,interfac,interface,892,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:849,reliability,sli,slightly,849,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:676,safety,compl,complicated,676,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:427,security,hash,hashing,427,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:676,security,compl,complicated,676,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:367,testability,simpl,simplify,367,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:878,testability,simpl,simple,878,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:367,usability,simpl,simplify,367,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:571,usability,prototyp,prototyping,571,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:878,usability,simpl,simple,878,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:171,integrability,event,event,171,"Not sure if it applies here, but a common ""template trickery"" is to have a type-punned base class that provides enough functionality to cater for the hot paths during the event loop. We already use this in RNTuple, for example with `RFieldBase` that can be conveniently passed around if you only need its interface functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:305,integrability,interfac,interface,305,"Not sure if it applies here, but a common ""template trickery"" is to have a type-punned base class that provides enough functionality to cater for the hot paths during the event loop. We already use this in RNTuple, for example with `RFieldBase` that can be conveniently passed around if you only need its interface functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:305,interoperability,interfac,interface,305,"Not sure if it applies here, but a common ""template trickery"" is to have a type-punned base class that provides enough functionality to cater for the hot paths during the event loop. We already use this in RNTuple, for example with `RFieldBase` that can be conveniently passed around if you only need its interface functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:305,modifiability,interfac,interface,305,"Not sure if it applies here, but a common ""template trickery"" is to have a type-punned base class that provides enough functionality to cater for the hot paths during the event loop. We already use this in RNTuple, for example with `RFieldBase` that can be conveniently passed around if you only need its interface functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:150,safety,hot,hot,150,"Not sure if it applies here, but a common ""template trickery"" is to have a type-punned base class that provides enough functionality to cater for the hot paths during the event loop. We already use this in RNTuple, for example with `RFieldBase` that can be conveniently passed around if you only need its interface functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:93,deployability,integr,integral-type,93,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:282,deployability,integr,integral,282,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:587,deployability,manag,manageable,587,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:587,energy efficiency,manag,manageable,587,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:93,integrability,integr,integral-type,93,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:282,integrability,integr,integral,282,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:93,interoperability,integr,integral-type,93,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:282,interoperability,integr,integral,282,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:93,modifiability,integr,integral-type,93,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:282,modifiability,integr,integral,282,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:521,performance,memor,memory,521,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:528,performance,overhead,overhead,528,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:93,reliability,integr,integral-type,93,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:282,reliability,integr,integral,282,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:587,safety,manag,manageable,587,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:93,security,integr,integral-type,93,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:282,security,integr,integral,282,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:93,testability,integr,integral-type,93,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:282,testability,integr,integral,282,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:373,usability,prototyp,prototype,373,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:521,usability,memor,memory,521,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:565,usability,indicat,indicate,565,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:37,deployability,integr,integral-type,37,> I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types . Good. Having a floating point 'as is' as the index would be a disaster due to the instability of equality. (One could envision having a floating pointer index only the user provide a transformation from floating point to integer).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:37,integrability,integr,integral-type,37,> I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types . Good. Having a floating point 'as is' as the index would be a disaster due to the instability of equality. (One could envision having a floating pointer index only the user provide a transformation from floating point to integer).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:295,integrability,transform,transformation,295,> I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types . Good. Having a floating point 'as is' as the index would be a disaster due to the instability of equality. (One could envision having a floating pointer index only the user provide a transformation from floating point to integer).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:37,interoperability,integr,integral-type,37,> I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types . Good. Having a floating point 'as is' as the index would be a disaster due to the instability of equality. (One could envision having a floating pointer index only the user provide a transformation from floating point to integer).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:295,interoperability,transform,transformation,295,> I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types . Good. Having a floating point 'as is' as the index would be a disaster due to the instability of equality. (One could envision having a floating pointer index only the user provide a transformation from floating point to integer).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:37,modifiability,integr,integral-type,37,> I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types . Good. Having a floating point 'as is' as the index would be a disaster due to the instability of equality. (One could envision having a floating pointer index only the user provide a transformation from floating point to integer).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:37,reliability,integr,integral-type,37,> I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types . Good. Having a floating point 'as is' as the index would be a disaster due to the instability of equality. (One could envision having a floating pointer index only the user provide a transformation from floating point to integer).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:37,security,integr,integral-type,37,> I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types . Good. Having a floating point 'as is' as the index would be a disaster due to the instability of equality. (One could envision having a floating pointer index only the user provide a transformation from floating point to integer).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:37,testability,integr,integral-type,37,> I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types . Good. Having a floating point 'as is' as the index would be a disaster due to the instability of equality. (One could envision having a floating pointer index only the user provide a transformation from floating point to integer).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/pull/15116:280,usability,user,user,280,> I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types . Good. Having a floating point 'as is' as the index would be a disaster due to the instability of equality. (One could envision having a floating pointer index only the user provide a transformation from floating point to integer).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116
https://github.com/root-project/root/issues/15117:86,energy efficiency,core,core,86,"Thank you so much for the detailed report! I see, so cppyy upstream made a change to `core/metacling` to make this case work. I have opened a PR suggesting the same change to ROOT. Let's see if it works. At least the problem is understood!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:10,deployability,updat,updates,10,"Okay, the updates to CallFunc would be too controversial. See also: https://github.com/root-project/root/pull/14426. Also, I don't like it that the `unique_ptr` overload is wrongly chosen, even if it doesn't harm in you example. I suggest to disable the implicit promotion to smart pointers now:. https://github.com/root-project/root/pull/15125. Then the behavior of PyROOT is the same as in ROOT 6.30 for your reproducer, which I think is safest. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:200,reliability,doe,doesn,200,"Okay, the updates to CallFunc would be too controversial. See also: https://github.com/root-project/root/pull/14426. Also, I don't like it that the `unique_ptr` overload is wrongly chosen, even if it doesn't harm in you example. I suggest to disable the implicit promotion to smart pointers now:. https://github.com/root-project/root/pull/15125. Then the behavior of PyROOT is the same as in ROOT 6.30 for your reproducer, which I think is safest. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:10,safety,updat,updates,10,"Okay, the updates to CallFunc would be too controversial. See also: https://github.com/root-project/root/pull/14426. Also, I don't like it that the `unique_ptr` overload is wrongly chosen, even if it doesn't harm in you example. I suggest to disable the implicit promotion to smart pointers now:. https://github.com/root-project/root/pull/15125. Then the behavior of PyROOT is the same as in ROOT 6.30 for your reproducer, which I think is safest. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:440,safety,safe,safest,440,"Okay, the updates to CallFunc would be too controversial. See also: https://github.com/root-project/root/pull/14426. Also, I don't like it that the `unique_ptr` overload is wrongly chosen, even if it doesn't harm in you example. I suggest to disable the implicit promotion to smart pointers now:. https://github.com/root-project/root/pull/15125. Then the behavior of PyROOT is the same as in ROOT 6.30 for your reproducer, which I think is safest. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:10,security,updat,updates,10,"Okay, the updates to CallFunc would be too controversial. See also: https://github.com/root-project/root/pull/14426. Also, I don't like it that the `unique_ptr` overload is wrongly chosen, even if it doesn't harm in you example. I suggest to disable the implicit promotion to smart pointers now:. https://github.com/root-project/root/pull/15125. Then the behavior of PyROOT is the same as in ROOT 6.30 for your reproducer, which I think is safest. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:355,usability,behavi,behavior,355,"Okay, the updates to CallFunc would be too controversial. See also: https://github.com/root-project/root/pull/14426. Also, I don't like it that the `unique_ptr` overload is wrongly chosen, even if it doesn't harm in you example. I suggest to disable the implicit promotion to smart pointers now:. https://github.com/root-project/root/pull/15125. Then the behavior of PyROOT is the same as in ROOT 6.30 for your reproducer, which I think is safest. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:408,interoperability,convers,conversion,408,"Thanks for the quick action on this one. Actually looking into #14425, I think this might be considered a duplicate of that. Sorry, I didn't see that before I opened this one. Regarding the proposed changes in #15125, I am OK with that obviously, since it doesn't require work on our end ;) I am not sure how cppyy handles the lifetimes of objects that are referred to via a regular pointer, but an implicit conversion to a smart pointer seems like a good source of all kinds of issues there. So also from that point of view, I think it is safe to not have that conversion. I will report the overload resolution issue upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:562,interoperability,convers,conversion,562,"Thanks for the quick action on this one. Actually looking into #14425, I think this might be considered a duplicate of that. Sorry, I didn't see that before I opened this one. Regarding the proposed changes in #15125, I am OK with that obviously, since it doesn't require work on our end ;) I am not sure how cppyy handles the lifetimes of objects that are referred to via a regular pointer, but an implicit conversion to a smart pointer seems like a good source of all kinds of issues there. So also from that point of view, I think it is safe to not have that conversion. I will report the overload resolution issue upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:256,reliability,doe,doesn,256,"Thanks for the quick action on this one. Actually looking into #14425, I think this might be considered a duplicate of that. Sorry, I didn't see that before I opened this one. Regarding the proposed changes in #15125, I am OK with that obviously, since it doesn't require work on our end ;) I am not sure how cppyy handles the lifetimes of objects that are referred to via a regular pointer, but an implicit conversion to a smart pointer seems like a good source of all kinds of issues there. So also from that point of view, I think it is safe to not have that conversion. I will report the overload resolution issue upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:540,safety,safe,safe,540,"Thanks for the quick action on this one. Actually looking into #14425, I think this might be considered a duplicate of that. Sorry, I didn't see that before I opened this one. Regarding the proposed changes in #15125, I am OK with that obviously, since it doesn't require work on our end ;) I am not sure how cppyy handles the lifetimes of objects that are referred to via a regular pointer, but an implicit conversion to a smart pointer seems like a good source of all kinds of issues there. So also from that point of view, I think it is safe to not have that conversion. I will report the overload resolution issue upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:87,deployability,releas,released,87,"Marked a ""Fixed in: not applicable"" because this was a regression and not a bug in any released version of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:96,deployability,version,version,96,"Marked a ""Fixed in: not applicable"" because this was a regression and not a bug in any released version of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:96,integrability,version,version,96,"Marked a ""Fixed in: not applicable"" because this was a regression and not a bug in any released version of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:96,modifiability,version,version,96,"Marked a ""Fixed in: not applicable"" because this was a regression and not a bug in any released version of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:55,testability,regress,regression,55,"Marked a ""Fixed in: not applicable"" because this was a regression and not a bug in any released version of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:61,availability,sli,slipped,61,Thank you for the reminder @andresailer! Sorry that this one slipped through the cracks,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15117:61,reliability,sli,slipped,61,Thank you for the reminder @andresailer! Sorry that this one slipped through the cracks,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15117
https://github.com/root-project/root/issues/15118:69,availability,avail,available,69,"Sorry! We should have not made the rapidyaml backend for RooFit JSON available in the release. It is not tested and only there for dev purposes. This PR will fix this:. https://github.com/root-project/root/pull/15247. I'll backport it to ROOT 6.32, 6.30 and 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15118
https://github.com/root-project/root/issues/15118:86,deployability,releas,release,86,"Sorry! We should have not made the rapidyaml backend for RooFit JSON available in the release. It is not tested and only there for dev purposes. This PR will fix this:. https://github.com/root-project/root/pull/15247. I'll backport it to ROOT 6.32, 6.30 and 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15118
https://github.com/root-project/root/issues/15118:69,reliability,availab,available,69,"Sorry! We should have not made the rapidyaml backend for RooFit JSON available in the release. It is not tested and only there for dev purposes. This PR will fix this:. https://github.com/root-project/root/pull/15247. I'll backport it to ROOT 6.32, 6.30 and 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15118
https://github.com/root-project/root/issues/15118:69,safety,avail,available,69,"Sorry! We should have not made the rapidyaml backend for RooFit JSON available in the release. It is not tested and only there for dev purposes. This PR will fix this:. https://github.com/root-project/root/pull/15247. I'll backport it to ROOT 6.32, 6.30 and 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15118
https://github.com/root-project/root/issues/15118:105,safety,test,tested,105,"Sorry! We should have not made the rapidyaml backend for RooFit JSON available in the release. It is not tested and only there for dev purposes. This PR will fix this:. https://github.com/root-project/root/pull/15247. I'll backport it to ROOT 6.32, 6.30 and 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15118
https://github.com/root-project/root/issues/15118:69,security,availab,available,69,"Sorry! We should have not made the rapidyaml backend for RooFit JSON available in the release. It is not tested and only there for dev purposes. This PR will fix this:. https://github.com/root-project/root/pull/15247. I'll backport it to ROOT 6.32, 6.30 and 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15118
https://github.com/root-project/root/issues/15118:105,testability,test,tested,105,"Sorry! We should have not made the rapidyaml backend for RooFit JSON available in the release. It is not tested and only there for dev purposes. This PR will fix this:. https://github.com/root-project/root/pull/15247. I'll backport it to ROOT 6.32, 6.30 and 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15118
https://github.com/root-project/root/pull/15120:39,energy efficiency,model,model,39,TensorFlow generators do not work with model.fit,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15120
https://github.com/root-project/root/pull/15120:39,security,model,model,39,TensorFlow generators do not work with model.fit,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15120
https://github.com/root-project/root/pull/15122:0,usability,Close,Closed,0,Closed as duplicate.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15122
https://github.com/root-project/root/pull/15123:12,usability,close,closed,12,can this be closed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15123
https://github.com/root-project/root/pull/15125:116,deployability,build,builds,116,"> Needs a backport to 6.32. Has this already happened? We see the same problem that we saw before now on `dev4` LCG builds. In case the backport has not happened yet we would know why, otherwise we would have to investigate and see if this is a different issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15125
https://github.com/root-project/root/issues/15129:134,deployability,instal,installed,134,I tried it on MacOS 14.4.1 on an M2 machine with ROOT master and it is working fine. I cannot reproduce this issue. Xcode 15.3 . ROOT installed from source (from github),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:67,availability,down,downloaded,67,"Hi @TheCodeEater ,. I have tried on MacOS 14.4.1 and XCode 15.2. I downloaded the `.pkg` binary from https://root.cern/releases/release-63006/ . Your reproducer does not crash on my system:. <img width=""713"" alt=""Screenshot 2024-04-12 at 00 02 18"" src=""https://github.com/root-project/root/assets/15638895/1d23b494-07e5-44b3-acc6-277b18d38710"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:119,deployability,releas,releases,119,"Hi @TheCodeEater ,. I have tried on MacOS 14.4.1 and XCode 15.2. I downloaded the `.pkg` binary from https://root.cern/releases/release-63006/ . Your reproducer does not crash on my system:. <img width=""713"" alt=""Screenshot 2024-04-12 at 00 02 18"" src=""https://github.com/root-project/root/assets/15638895/1d23b494-07e5-44b3-acc6-277b18d38710"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:128,deployability,releas,release-,128,"Hi @TheCodeEater ,. I have tried on MacOS 14.4.1 and XCode 15.2. I downloaded the `.pkg` binary from https://root.cern/releases/release-63006/ . Your reproducer does not crash on my system:. <img width=""713"" alt=""Screenshot 2024-04-12 at 00 02 18"" src=""https://github.com/root-project/root/assets/15638895/1d23b494-07e5-44b3-acc6-277b18d38710"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:161,reliability,doe,does,161,"Hi @TheCodeEater ,. I have tried on MacOS 14.4.1 and XCode 15.2. I downloaded the `.pkg` binary from https://root.cern/releases/release-63006/ . Your reproducer does not crash on my system:. <img width=""713"" alt=""Screenshot 2024-04-12 at 00 02 18"" src=""https://github.com/root-project/root/assets/15638895/1d23b494-07e5-44b3-acc6-277b18d38710"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:73,deployability,instal,install,73,"Hi,. i tried again but still does not work. Since in the past i tried to install root from source and then had to uninstall manually (the compiled files had been scattered in the bin, include and alike system folders) i guess there could be some 6.26 libraries in system search paths, which are loaded by root instead of its own? I will try to further clean my directories or force somehow root to search only in its versions' folder. Thank you all for your feedkback.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:417,deployability,version,versions,417,"Hi,. i tried again but still does not work. Since in the past i tried to install root from source and then had to uninstall manually (the compiled files had been scattered in the bin, include and alike system folders) i guess there could be some 6.26 libraries in system search paths, which are loaded by root instead of its own? I will try to further clean my directories or force somehow root to search only in its versions' folder. Thank you all for your feedkback.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:295,energy efficiency,load,loaded,295,"Hi,. i tried again but still does not work. Since in the past i tried to install root from source and then had to uninstall manually (the compiled files had been scattered in the bin, include and alike system folders) i guess there could be some 6.26 libraries in system search paths, which are loaded by root instead of its own? I will try to further clean my directories or force somehow root to search only in its versions' folder. Thank you all for your feedkback.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:417,integrability,version,versions,417,"Hi,. i tried again but still does not work. Since in the past i tried to install root from source and then had to uninstall manually (the compiled files had been scattered in the bin, include and alike system folders) i guess there could be some 6.26 libraries in system search paths, which are loaded by root instead of its own? I will try to further clean my directories or force somehow root to search only in its versions' folder. Thank you all for your feedkback.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:417,modifiability,version,versions,417,"Hi,. i tried again but still does not work. Since in the past i tried to install root from source and then had to uninstall manually (the compiled files had been scattered in the bin, include and alike system folders) i guess there could be some 6.26 libraries in system search paths, which are loaded by root instead of its own? I will try to further clean my directories or force somehow root to search only in its versions' folder. Thank you all for your feedkback.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:295,performance,load,loaded,295,"Hi,. i tried again but still does not work. Since in the past i tried to install root from source and then had to uninstall manually (the compiled files had been scattered in the bin, include and alike system folders) i guess there could be some 6.26 libraries in system search paths, which are loaded by root instead of its own? I will try to further clean my directories or force somehow root to search only in its versions' folder. Thank you all for your feedkback.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:29,reliability,doe,does,29,"Hi,. i tried again but still does not work. Since in the past i tried to install root from source and then had to uninstall manually (the compiled files had been scattered in the bin, include and alike system folders) i guess there could be some 6.26 libraries in system search paths, which are loaded by root instead of its own? I will try to further clean my directories or force somehow root to search only in its versions' folder. Thank you all for your feedkback.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:90,availability,error,error,90,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:332,availability,error,error,332,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:437,availability,error,error,437,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:797,availability,error,error,797,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:560,deployability,Version,Versions,560,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:353,integrability,messag,message,353,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:560,integrability,Version,Versions,560,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:219,interoperability,distribut,distribution,219,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:353,interoperability,messag,message,353,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:560,modifiability,Version,Versions,560,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:90,performance,error,error,90,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:332,performance,error,error,332,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:437,performance,error,error,437,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:797,performance,error,error,797,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:90,safety,error,error,90,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:332,safety,error,error,332,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:437,safety,error,error,437,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:797,safety,error,error,797,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:90,usability,error,error,90,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:332,usability,error,error,332,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:437,usability,error,error,437,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:797,usability,error,error,797,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:834,usability,user,user,834,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/issues/15129:909,usability,help,help,909,"Hi,. My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 . (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: . a) I run root as regular user from an xterm . b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated. Francesco.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15129
https://github.com/root-project/root/pull/15134:73,interoperability,format,formatting,73,"Te respect the original spirit of the code, as well as not mess with the formatting of the string.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15134
https://github.com/root-project/root/pull/15134:75,interoperability,format,formatting,75,"> Te respect the original spirit of the code, as well as not mess with the formatting of the string. Fair enough",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15134
https://github.com/root-project/root/pull/15135:90,performance,time,time,90,Thanks. If the method had been a templatated one maybe. If not how can you have a compile time warning w/o runtime overhead for a regular method? Would you rather have a runtime warning/exception?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:115,performance,overhead,overhead,115,Thanks. If the method had been a templatated one maybe. If not how can you have a compile time warning w/o runtime overhead for a regular method? Would you rather have a runtime warning/exception?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:186,safety,except,exception,186,Thanks. If the method had been a templatated one maybe. If not how can you have a compile time warning w/o runtime overhead for a regular method? Would you rather have a runtime warning/exception?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:92,performance,time,time,92,"> Thanks. If the method had been a templatated one maybe. If not how can you have a compile time warning w/o runtime overhead for a regular method? Would you rather have a runtime warning/exception? I don't know the magic behind the deprecation macro, but I know that the master is not generating warnings, unless I call explicitly this function, even if this is not templated, @guitargeek may have an explanation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:117,performance,overhead,overhead,117,"> Thanks. If the method had been a templatated one maybe. If not how can you have a compile time warning w/o runtime overhead for a regular method? Would you rather have a runtime warning/exception? I don't know the magic behind the deprecation macro, but I know that the master is not generating warnings, unless I call explicitly this function, even if this is not templated, @guitargeek may have an explanation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:188,safety,except,exception,188,"> Thanks. If the method had been a templatated one maybe. If not how can you have a compile time warning w/o runtime overhead for a regular method? Would you rather have a runtime warning/exception? I don't know the magic behind the deprecation macro, but I know that the master is not generating warnings, unless I call explicitly this function, even if this is not templated, @guitargeek may have an explanation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:161,availability,error,error,161,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:178,deployability,version,versions,178,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:483,deployability,version,version,483,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:475,energy efficiency,current,current,475,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:178,integrability,version,versions,178,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:483,integrability,version,version,483,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:178,modifiability,version,versions,178,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:483,modifiability,version,version,483,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:161,performance,error,error,161,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:161,safety,error,error,161,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:161,usability,error,error,161,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:195,usability,user,user,195,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:369,usability,user,user,369,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:231,safety,compl,completely,231,"Minor comment, it could be replaced with. R__ALWAYS_SUGGEST_ALTERNATIVE(""use now X or Y function"") return 0;. or like in TBufferMerger.h _R__DEPRECATED_LATER(""The queuing mechanism in TBufferMerger was removed in ROOT v6.32""). but completely removing it sounds also good to me. Side comment:. There are quite some more occurrences of this here:. grep -r DEPRECATED roofit/roofitcore/. as well as in the main RootBuildOptions cmake file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:231,security,compl,completely,231,"Minor comment, it could be replaced with. R__ALWAYS_SUGGEST_ALTERNATIVE(""use now X or Y function"") return 0;. or like in TBufferMerger.h _R__DEPRECATED_LATER(""The queuing mechanism in TBufferMerger was removed in ROOT v6.32""). but completely removing it sounds also good to me. Side comment:. There are quite some more occurrences of this here:. grep -r DEPRECATED roofit/roofitcore/. as well as in the main RootBuildOptions cmake file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:178,usability,user,users,178,"Thanks for the comment @ferdymercury! You are right about the RooFit stuff, I will take care of it separately. I deprecated quite a bit in RooFit, maybe too much at once for the users to handle at once :laughing: I will probably only remove half of it and postpone some deprecations to 6.36",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:38,testability,understand,understand,38,"It's maybe just me, but I still don't understand why the ROOT compilation was throwing warnings before this merge in the branch made by @dpiparo since I could not see these warnings before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:40,testability,understand,understand,40,"> It's maybe just me, but I still don't understand why the ROOT compilation was throwing warnings before this merge in the branch made by @dpiparo since I could not see these warnings before. I guess because of:. ```. #if ROOT_VERSION_CODE <= ROOT_VERSION(6,33,0). # define _R__DEPRECATED_634(REASON) _R__DEPRECATED_LATER(REASON). #else. # define _R__DEPRECATED_634(REASON) _R_DEPRECATED_REMOVE_NOW(REASON). #endif. ```. after https://github.com/root-project/root/commit/0e8e8454d09863e2d9e34f59b24081f658c216fc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:72,deployability,version,version,72,"@dpiparo, this needs to be merged now that it was decided that the next version is going to be called 6.34",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:72,integrability,version,version,72,"@dpiparo, this needs to be merged now that it was decided that the next version is going to be called 6.34",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:72,modifiability,version,version,72,"@dpiparo, this needs to be merged now that it was decided that the next version is going to be called 6.34",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:85,deployability,releas,release,85,"Hi @dpiparo, this PR needs conflict resolution, and maybe also a mention in the 6.36 release notes that the code was actually removed now in compliance with #16818.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:141,integrability,complian,compliance,141,"Hi @dpiparo, this PR needs conflict resolution, and maybe also a mention in the 6.36 release notes that the code was actually removed now in compliance with #16818.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:27,interoperability,conflict,conflict,27,"Hi @dpiparo, this PR needs conflict resolution, and maybe also a mention in the 6.36 release notes that the code was actually removed now in compliance with #16818.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:141,safety,compl,compliance,141,"Hi @dpiparo, this PR needs conflict resolution, and maybe also a mention in the 6.36 release notes that the code was actually removed now in compliance with #16818.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/pull/15135:141,security,compl,compliance,141,"Hi @dpiparo, this PR needs conflict resolution, and maybe also a mention in the 6.36 release notes that the code was actually removed now in compliance with #16818.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15135
https://github.com/root-project/root/issues/15136:56,availability,fault,faulty,56,"Adding @vepadulano in the loop, since it looks like the faulty commit could well be [this one](https://github.com/root-project/root/commit/37b06ebc33fe192c20bee5d48a496d51ee591aa0#diff-dd81606cd750b320d9ed46d043eb5e5dceaf7e7dbcf2d4934cae69bbfc27138f). But I'm still trying to find what could be the real issue among all the recent changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:56,energy efficiency,fault,faulty,56,"Adding @vepadulano in the loop, since it looks like the faulty commit could well be [this one](https://github.com/root-project/root/commit/37b06ebc33fe192c20bee5d48a496d51ee591aa0#diff-dd81606cd750b320d9ed46d043eb5e5dceaf7e7dbcf2d4934cae69bbfc27138f). But I'm still trying to find what could be the real issue among all the recent changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:56,performance,fault,faulty,56,"Adding @vepadulano in the loop, since it looks like the faulty commit could well be [this one](https://github.com/root-project/root/commit/37b06ebc33fe192c20bee5d48a496d51ee591aa0#diff-dd81606cd750b320d9ed46d043eb5e5dceaf7e7dbcf2d4934cae69bbfc27138f). But I'm still trying to find what could be the real issue among all the recent changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:56,reliability,fault,faulty,56,"Adding @vepadulano in the loop, since it looks like the faulty commit could well be [this one](https://github.com/root-project/root/commit/37b06ebc33fe192c20bee5d48a496d51ee591aa0#diff-dd81606cd750b320d9ed46d043eb5e5dceaf7e7dbcf2d4934cae69bbfc27138f). But I'm still trying to find what could be the real issue among all the recent changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:56,safety,fault,faulty,56,"Adding @vepadulano in the loop, since it looks like the faulty commit could well be [this one](https://github.com/root-project/root/commit/37b06ebc33fe192c20bee5d48a496d51ee591aa0#diff-dd81606cd750b320d9ed46d043eb5e5dceaf7e7dbcf2d4934cae69bbfc27138f). But I'm still trying to find what could be the real issue among all the recent changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:107,deployability,instal,install,107,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:392,deployability,modul,module,392,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:595,deployability,version,versions,595,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:797,deployability,version,version,797,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:814,deployability,stack,stackoverflow,814,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:871,deployability,version,version-with-virtualenv,871,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:1086,deployability,updat,update,1086,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:595,integrability,version,versions,595,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:797,integrability,version,version,797,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:871,integrability,version,version-with-virtualenv,871,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:280,interoperability,standard,standard,280,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:781,interoperability,specif,specific,781,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:1003,interoperability,specif,specific,1003,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:392,modifiability,modul,module,392,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:595,modifiability,version,versions,595,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:797,modifiability,version,version,797,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:871,modifiability,version,version-with-virtualenv,871,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:392,safety,modul,module,392,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:1086,safety,updat,update,1086,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:1086,security,updat,update,1086,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:206,usability,support,support,206,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:349,usability,hint,hints,349,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:380,usability,help,help,380,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:416,usability,hint,hints,416,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:997,usability,hint,hints,997,"Hi Fons! Thanks for opening this issue. It seems our instructions are out-of-date here:. https://root.cern/install/build_from_source/#root-python-and-pyroot. We don't have any of this multi Python anymore, support for Python 2 is dropped in ROOT 6.32. What we use now is just the standard CMake `find_package(Python3 ...)`, which you can give [some hints](https://cmake.org/cmake/help/latest/module/FindPython3.html#hints) to find python. In your case, the `Python3_ROOT_DIR` should probably do the trick:. `cmake -G Ninja -DPython3_ROOT_DIR=/opt/homebrew/ ..`. Now, if you have multiple Python versions in that directory (I don't know if you do), then I think it will pick the newest one by default. In that case, you might have to [create a virtual environment with your desired specific Python version](https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv), and then pass the directory of the virtual environment as the `Python3_ROOT_DIR` (or via some other hints specific for virtual environments). Let us know what works for you, and then I can update the website accordingly with the right instructions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/issues/15136:0,usability,Close,Closed,0,Closed by: https://github.com/root-project/web/pull/983,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15136
https://github.com/root-project/root/pull/15138:165,integrability,sub,subdirectories,165,"Interesting. @jmcarcell can you check what permissions your `etc/` directory in ROOT's sources has? If it really copies over the permissions from there, I guess the subdirectories would have the same ""wrong"" permissions? Should we then maybe set `DIRECTORY_PERMISSIONS` altogether?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:43,safety,permiss,permissions,43,"Interesting. @jmcarcell can you check what permissions your `etc/` directory in ROOT's sources has? If it really copies over the permissions from there, I guess the subdirectories would have the same ""wrong"" permissions? Should we then maybe set `DIRECTORY_PERMISSIONS` altogether?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:129,safety,permiss,permissions,129,"Interesting. @jmcarcell can you check what permissions your `etc/` directory in ROOT's sources has? If it really copies over the permissions from there, I guess the subdirectories would have the same ""wrong"" permissions? Should we then maybe set `DIRECTORY_PERMISSIONS` altogether?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:208,safety,permiss,permissions,208,"Interesting. @jmcarcell can you check what permissions your `etc/` directory in ROOT's sources has? If it really copies over the permissions from there, I guess the subdirectories would have the same ""wrong"" permissions? Should we then maybe set `DIRECTORY_PERMISSIONS` altogether?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:66,deployability,build,build,66,"Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:439,integrability,sub,subfolders,439,"Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:92,safety,permiss,permissions,92,"Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:282,safety,permiss,permissions,282,"Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:68,deployability,build,build,68,"> Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. Yes, unfortunately I think `git` doesn't track permission settings of directories, so dealing with this on the build system side is probably a good idea. > I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think). But that's what we want, right? All subdirectories of `etc/` should be world-readable, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:432,deployability,build,build,432,"> Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. Yes, unfortunately I think `git` doesn't track permission settings of directories, so dealing with this on the build system side is probably a good idea. > I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think). But that's what we want, right? All subdirectories of `etc/` should be world-readable, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:597,integrability,sub,subfolders,597,"> Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. Yes, unfortunately I think `git` doesn't track permission settings of directories, so dealing with this on the build system side is probably a good idea. > I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think). But that's what we want, right? All subdirectories of `etc/` should be world-readable, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:654,integrability,sub,subdirectories,654,"> Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. Yes, unfortunately I think `git` doesn't track permission settings of directories, so dealing with this on the build system side is probably a good idea. > I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think). But that's what we want, right? All subdirectories of `etc/` should be world-readable, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:354,reliability,doe,doesn,354,"> Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. Yes, unfortunately I think `git` doesn't track permission settings of directories, so dealing with this on the build system side is probably a good idea. > I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think). But that's what we want, right? All subdirectories of `etc/` should be world-readable, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:94,safety,permiss,permissions,94,"> Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. Yes, unfortunately I think `git` doesn't track permission settings of directories, so dealing with this on the build system side is probably a good idea. > I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think). But that's what we want, right? All subdirectories of `etc/` should be world-readable, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:284,safety,permiss,permissions,284,"> Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. Yes, unfortunately I think `git` doesn't track permission settings of directories, so dealing with this on the build system side is probably a good idea. > I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think). But that's what we want, right? All subdirectories of `etc/` should be world-readable, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:368,safety,permiss,permission,368,"> Ha, I thought that I had checked that but I must have been in the build directory where the permissions are correct. In the sources I have 700 for `/etc` (no idea how, I didn't change that and cloning from scratch gives the expected 755). So I guess the answer is to have the right permissions in the source directory. Yes, unfortunately I think `git` doesn't track permission settings of directories, so dealing with this on the build system side is probably a good idea. > I don't need this PR anymore, but if you want I can change it to set the `DIRECTORY_PERMISSIONS` (but this affects also subfolders I think). But that's what we want, right? All subdirectories of `etc/` should be world-readable, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:97,deployability,Instal,Installing,97,I just edited the PR and changed the permissions of several folders that are in the source tree. Installing now keeps the right permissions even if they are not set in the source tree.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:37,safety,permiss,permissions,37,I just edited the PR and changed the permissions of several folders that are in the source tree. Installing now keeps the right permissions even if they are not set in the source tree.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:128,safety,permiss,permissions,128,I just edited the PR and changed the permissions of several folders that are in the source tree. Installing now keeps the right permissions even if they are not set in the source tree.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:57,availability,failur,failures,57,Could this be merged? I just rebased. There were some CI failures before (one month ago) but it all looked unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:57,deployability,fail,failures,57,Could this be merged? I just rebased. There were some CI failures before (one month ago) but it all looked unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:57,performance,failur,failures,57,Could this be merged? I just rebased. There were some CI failures before (one month ago) but it all looked unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/pull/15138:57,reliability,fail,failures,57,Could this be merged? I just rebased. There were some CI failures before (one month ago) but it all looked unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15138
https://github.com/root-project/root/issues/15139:24,availability,error,error,24,FYI I can reproduce the error on Windows,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15139
https://github.com/root-project/root/issues/15139:24,performance,error,error,24,FYI I can reproduce the error on Windows,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15139
https://github.com/root-project/root/issues/15139:24,safety,error,error,24,FYI I can reproduce the error on Windows,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15139
https://github.com/root-project/root/issues/15139:24,usability,error,error,24,FYI I can reproduce the error on Windows,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15139
https://github.com/root-project/root/issues/15139:0,usability,Close,Closed,0,Closed by https://github.com/root-project/root/pull/15155.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15139
https://github.com/root-project/root/pull/15141:58,availability,error,error,58,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:1234,availability,failur,failure,1234,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:1234,deployability,fail,failure,1234,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:1445,deployability,build,build,1445,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:325,integrability,intermediar,intermediary,325,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:1204,interoperability,plug,plugins,1204,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:325,modifiability,interm,intermediary,325,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:58,performance,error,error,58,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:1234,performance,failur,failure,1234,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:726,reliability,doe,does,726,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:1234,reliability,fail,failure,1234,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:58,safety,error,error,58,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:489,security,access,access,489,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:58,usability,error,error,58,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:944,usability,Close,Close,944,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/pull/15141:1365,usability,support,support,1365,"Having this feature on by default seems to allow for some error case to (silently) succeed. For example:. ```. mkdir where_the_data_goes. ... f = TFile::Open(""the_data_goes_here/filename.root""); // Unintentional misspelling. ```. In related use case the linux utility `mkdir` offer both to create or not create the necessary intermediary directories but the default is to not create them (i.e. creation is requested explicitly with the option `-p`). In addition ROOT already provided easy access to the directory creation via [TSystem::mkdir](https://root.cern.ch/doc/master/classTSystem.html#a5bd72c8b0e57e0aed8b418adf4650475):. ```. int TSystem::mkdir(const char *name, bool recursive = false);. ```. `std::filesystem` also does via 2 distinct function (one recursive, one not): `create_directories` and `create_directory`. So in your example you could use:. ```. fs::create_directories(fs::path(F).parent_path());. TFile f(F, ""recreate""); f.Close(); ok(F);. ``` . Externally creating the dictionary might be the right thing but at any rate if we want to introduce this feature in `TFile` itself it would need to:. * become optional (i.e. add a new keyword in the option). * be implemented for all the plugins (at least by adding a failure if the creation is requested, the directory is not existing and the creation is not implemented (i.e. the server might not support directory creation). Thanks,. Philippe. PS/Side-note: ROOT Is now-adays build only with C++17 and later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15141
https://github.com/root-project/root/issues/15144:64,performance,network,network,64,"I agree this would be a nice improvement, for example to detect network glitches, deadlocks and other kind of behaviours. I wonder if this is an issue for ROOT itself, given that we cannot really have control over cmake?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:82,performance,deadlock,deadlocks,82,"I agree this would be a nice improvement, for example to detect network glitches, deadlocks and other kind of behaviours. I wonder if this is an issue for ROOT itself, given that we cannot really have control over cmake?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:57,safety,detect,detect,57,"I agree this would be a nice improvement, for example to detect network glitches, deadlocks and other kind of behaviours. I wonder if this is an issue for ROOT itself, given that we cannot really have control over cmake?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:57,security,detect,detect,57,"I agree this would be a nice improvement, for example to detect network glitches, deadlocks and other kind of behaviours. I wonder if this is an issue for ROOT itself, given that we cannot really have control over cmake?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:64,security,network,network,64,"I agree this would be a nice improvement, for example to detect network glitches, deadlocks and other kind of behaviours. I wonder if this is an issue for ROOT itself, given that we cannot really have control over cmake?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:201,security,control,control,201,"I agree this would be a nice improvement, for example to detect network glitches, deadlocks and other kind of behaviours. I wonder if this is an issue for ROOT itself, given that we cannot really have control over cmake?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:201,testability,control,control,201,"I agree this would be a nice improvement, for example to detect network glitches, deadlocks and other kind of behaviours. I wonder if this is an issue for ROOT itself, given that we cannot really have control over cmake?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:110,usability,behavi,behaviours,110,"I agree this would be a nice improvement, for example to detect network glitches, deadlocks and other kind of behaviours. I wonder if this is an issue for ROOT itself, given that we cannot really have control over cmake?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:204,deployability,stack,stack,204,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:182,performance,time,timeout,182,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:320,performance,time,timeout,320,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:128,safety,test,test,128,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:182,safety,timeout,timeout,182,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:320,safety,timeout,timeout,320,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:408,safety,test,test,408,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:394,security,sign,signal,394,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:128,testability,test,test,128,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:408,testability,test,test,408,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:87,performance,time,timeout,87,The link has the solution/work around doing:. ```. CTest starts the test processes via timeout -sSIGSEGV 55s {TEST_COMMAND}). ```. which may also actually work.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:68,safety,test,test,68,The link has the solution/work around doing:. ```. CTest starts the test processes via timeout -sSIGSEGV 55s {TEST_COMMAND}). ```. which may also actually work.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:87,safety,timeout,timeout,87,The link has the solution/work around doing:. ```. CTest starts the test processes via timeout -sSIGSEGV 55s {TEST_COMMAND}). ```. which may also actually work.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/issues/15144:68,testability,test,test,68,The link has the solution/work around doing:. ```. CTest starts the test processes via timeout -sSIGSEGV 55s {TEST_COMMAND}). ```. which may also actually work.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15144
https://github.com/root-project/root/pull/15148:10,safety,reme,remember,10,"We should remember to comment about this PR https://github.com/root-project/root/pull/15135 if this gets merged, because it won't be needed any more until we actually remove the methods",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15148
https://github.com/root-project/root/pull/15149:608,energy efficiency,CPU,CPU,608,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:227,modifiability,variab,variables,227,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:752,modifiability,pac,package,752,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:185,performance,time,time,185,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:608,performance,CPU,CPU,608,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:258,safety,compl,complaints,258,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:438,safety,detect,detection,438,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:258,security,compl,complaints,258,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:438,security,detect,detection,438,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:892,security,legitim,legitimate,892,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:99,usability,user,user,99,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:616,usability,clear,clearly,616,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:327,availability,avail,available,327,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR). I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:169,deployability,modul,modules,169,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR). I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:169,modifiability,modul,modules,169,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR). I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:327,reliability,availab,available,327,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR). I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:169,safety,modul,modules,169,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR). I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:327,safety,avail,available,327,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR). I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:327,security,availab,available,327,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR). I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:447,testability,plan,plan,447,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR). I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:218,usability,prefer,prefer,218,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR). I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:269,usability,prefer,prefer,269,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR). I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:955,deployability,build,building,955,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:1259,deployability,log,logic,1259,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:608,energy efficiency,CPU,CPU,608,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:975,energy efficiency,gpu,gpu,975,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:1004,energy efficiency,GPU,GPU,1004,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:227,modifiability,variab,variables,227,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:752,modifiability,pac,package,752,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:185,performance,time,time,185,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:608,performance,CPU,CPU,608,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:975,performance,gpu,gpu,975,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:1004,performance,GPU,GPU,1004,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:258,safety,compl,complaints,258,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:438,safety,detect,detection,438,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:920,safety,reme,remembered,920,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:1259,safety,log,logic,1259,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:258,security,compl,complaints,258,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:438,security,detect,detection,438,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:1259,security,log,logic,1259,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:1244,testability,simpl,simplifies,1244,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:1259,testability,log,logic,1259,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:99,usability,user,user,99,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:616,usability,clear,clearly,616,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/pull/15149:1244,usability,simpl,simplifies,1244,"> I don't agree with these changes for two reasons:. > . > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834). > . > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though! I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149
https://github.com/root-project/root/issues/15150:89,reliability,pra,pragma,89,"I am sorry to say, but I think your design needs a revision. ```. cat > sane.hh << EOF. #pragma once. [[deprecated]]. int deprecatedFunction() {. return 123;. }. int saneFunction() {. return 321;. }. EOF. cat > sane.cpp << EOF. #include ""sane.hh"". int main() {. saneFunction();. return 0;. }. EOF. cat > depr.cpp << EOF. #include ""sane.hh"". int main() {. deprecatedFunction();. return 0;. }. EOF. g++ depr.cpp. g++ sane.cpp. ```. One only gets a warning when deprecatedFunction is called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15150
https://github.com/root-project/root/issues/15150:789,deployability,automat,automatic,789,"> One only gets a warning when deprecatedFunction is called. Yes. The idea of the set of macros is (for a function that we no exist in v6.34.00 for example:. 1. Warn in v6.32.xy that the function is deprecated only for code where the function is called. 2. Warn as soon as we start the development cycle of v6.34 that the function (used or not) that we said were going to be removed are removed. (2) is currently implemented by turning on the warning-even-if-not-used in v6.33.01 (i.e. the first day of the v6.34 development cycles. https://github.com/root-project/root/pull/15148 postpone this to the next development tag (6.33.02). As you point out, this system however make it difficult to use the master (eg. with `-Werror`) until we do remove the functions. (Side note, prior to this automatic system we routinely 'forgot' to remove deprecated function when intended)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15150
https://github.com/root-project/root/issues/15150:403,energy efficiency,current,currently,403,"> One only gets a warning when deprecatedFunction is called. Yes. The idea of the set of macros is (for a function that we no exist in v6.34.00 for example:. 1. Warn in v6.32.xy that the function is deprecated only for code where the function is called. 2. Warn as soon as we start the development cycle of v6.34 that the function (used or not) that we said were going to be removed are removed. (2) is currently implemented by turning on the warning-even-if-not-used in v6.33.01 (i.e. the first day of the v6.34 development cycles. https://github.com/root-project/root/pull/15148 postpone this to the next development tag (6.33.02). As you point out, this system however make it difficult to use the master (eg. with `-Werror`) until we do remove the functions. (Side note, prior to this automatic system we routinely 'forgot' to remove deprecated function when intended)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15150
https://github.com/root-project/root/issues/15150:809,integrability,rout,routinely,809,"> One only gets a warning when deprecatedFunction is called. Yes. The idea of the set of macros is (for a function that we no exist in v6.34.00 for example:. 1. Warn in v6.32.xy that the function is deprecated only for code where the function is called. 2. Warn as soon as we start the development cycle of v6.34 that the function (used or not) that we said were going to be removed are removed. (2) is currently implemented by turning on the warning-even-if-not-used in v6.33.01 (i.e. the first day of the v6.34 development cycles. https://github.com/root-project/root/pull/15148 postpone this to the next development tag (6.33.02). As you point out, this system however make it difficult to use the master (eg. with `-Werror`) until we do remove the functions. (Side note, prior to this automatic system we routinely 'forgot' to remove deprecated function when intended)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15150
https://github.com/root-project/root/issues/15150:789,testability,automat,automatic,789,"> One only gets a warning when deprecatedFunction is called. Yes. The idea of the set of macros is (for a function that we no exist in v6.34.00 for example:. 1. Warn in v6.32.xy that the function is deprecated only for code where the function is called. 2. Warn as soon as we start the development cycle of v6.34 that the function (used or not) that we said were going to be removed are removed. (2) is currently implemented by turning on the warning-even-if-not-used in v6.33.01 (i.e. the first day of the v6.34 development cycles. https://github.com/root-project/root/pull/15148 postpone this to the next development tag (6.33.02). As you point out, this system however make it difficult to use the master (eg. with `-Werror`) until we do remove the functions. (Side note, prior to this automatic system we routinely 'forgot' to remove deprecated function when intended)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15150
https://github.com/root-project/root/issues/15150:133,deployability,version,version,133,"Thanks for chiming in @pcanal! Indeed, this is fixed for now by https://github.com/root-project/root/pull/15148. I'll mark the fixed version as ""not applicable"", because this is not relevant for any release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15150
https://github.com/root-project/root/issues/15150:199,deployability,releas,release,199,"Thanks for chiming in @pcanal! Indeed, this is fixed for now by https://github.com/root-project/root/pull/15148. I'll mark the fixed version as ""not applicable"", because this is not relevant for any release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15150
https://github.com/root-project/root/issues/15150:133,integrability,version,version,133,"Thanks for chiming in @pcanal! Indeed, this is fixed for now by https://github.com/root-project/root/pull/15148. I'll mark the fixed version as ""not applicable"", because this is not relevant for any release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15150
https://github.com/root-project/root/issues/15150:133,modifiability,version,version,133,"Thanks for chiming in @pcanal! Indeed, this is fixed for now by https://github.com/root-project/root/pull/15148. I'll mark the fixed version as ""not applicable"", because this is not relevant for any release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15150
https://github.com/root-project/root/pull/15151:86,integrability,repositor,repository,86,Do we keep track of which commit/point-of-development this correspond to in the cppyy repository?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:86,interoperability,repositor,repository,86,Do we keep track of which commit/point-of-development this correspond to in the cppyy repository?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:75,deployability,updat,update,75,"No, we don't, but that's a good idea. Next time we touch the code, we will update the syncing script to use a specific commit from the upstream repositories:. https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/sync-upstream",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:144,integrability,repositor,repositories,144,"No, we don't, but that's a good idea. Next time we touch the code, we will update the syncing script to use a specific commit from the upstream repositories:. https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/sync-upstream",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:110,interoperability,specif,specific,110,"No, we don't, but that's a good idea. Next time we touch the code, we will update the syncing script to use a specific commit from the upstream repositories:. https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/sync-upstream",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:144,interoperability,repositor,repositories,144,"No, we don't, but that's a good idea. Next time we touch the code, we will update the syncing script to use a specific commit from the upstream repositories:. https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/sync-upstream",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:208,interoperability,bind,bindings,208,"No, we don't, but that's a good idea. Next time we touch the code, we will update the syncing script to use a specific commit from the upstream repositories:. https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/sync-upstream",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:208,modifiability,bind,bindings,208,"No, we don't, but that's a good idea. Next time we touch the code, we will update the syncing script to use a specific commit from the upstream repositories:. https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/sync-upstream",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:43,performance,time,time,43,"No, we don't, but that's a good idea. Next time we touch the code, we will update the syncing script to use a specific commit from the upstream repositories:. https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/sync-upstream",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:75,safety,updat,update,75,"No, we don't, but that's a good idea. Next time we touch the code, we will update the syncing script to use a specific commit from the upstream repositories:. https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/sync-upstream",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:75,security,updat,update,75,"No, we don't, but that's a good idea. Next time we touch the code, we will update the syncing script to use a specific commit from the upstream repositories:. https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/sync-upstream",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:104,integrability,repositor,repository,104,"The script seems to be using 'https://github.com/guitargeek/CPyCppyy.git', would it make sense to use a repository within the `root-project` umbrella?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:104,interoperability,repositor,repository,104,"The script seems to be using 'https://github.com/guitargeek/CPyCppyy.git', would it make sense to use a repository within the `root-project` umbrella?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:179,availability,fault,fault,179,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:71,deployability,patch,patches,71,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:179,energy efficiency,fault,fault,179,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:179,performance,fault,fault,179,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:179,reliability,fault,fault,179,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:11,safety,avoid,avoid,11,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:71,safety,patch,patches,71,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:179,safety,fault,fault,179,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:249,safety,test,test,249,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:71,security,patch,patches,71,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:244,testability,unit,unit,244,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/pull/15151:249,testability,test,test,249,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15151
https://github.com/root-project/root/issues/15153:795,availability,avail,available,795,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:660,deployability,contain,contains,660,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:1596,deployability,fail,fails,1596,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:936,energy efficiency,current,current,936,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:892,integrability,sub,subset,892,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:474,interoperability,Specif,Specifically,474,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:538,interoperability,standard,standard,538,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:1318,interoperability,specif,specific,1318,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:440,modifiability,deco,decoded,440,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:758,modifiability,deco,decoding,758,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:974,modifiability,deco,decoding,974,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:408,reliability,pra,practice,408,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:573,reliability,pra,practice,573,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:795,reliability,availab,available,795,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:1012,reliability,doe,does,1012,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:1596,reliability,fail,fails,1596,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:795,safety,avail,available,795,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:844,safety,safe,safe,844,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:968,safety,avoid,avoid,968,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:1279,safety,except,exception,1279,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:795,security,availab,available,795,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:1562,usability,experien,experience,1562,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:1749,usability,efficien,efficient,1749,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:138,deployability,releas,release,138,"Thanks for chiming in here @wlav! @Nowakus, are you happy with this answer? If yes, my suggestion is that I also mention this in the 6.32 release notes so nobody will wonder again if this is intentional or not, and then I close this issue. You agree with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:222,usability,close,close,222,"Thanks for chiming in here @wlav! @Nowakus, are you happy with this answer? If yes, my suggestion is that I also mention this in the 6.32 release notes so nobody will wonder again if this is intentional or not, and then I close this issue. You agree with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:96,deployability,releas,release,96,"Yes, thank you @wlav for a very detailed explanation. I think it may be good to mention this in release notes and maybe even include a link to the explanation here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:227,deployability,automat,automatically,227,"Aside, another difference is that an `std::string` is editable in-place, whereas a Python `str` is immutable. It's probably not common, but some use cases may rely on this and would otherwise be impossible if `std::string` was automatically converted to `str` everywhere (as besides `str` being immutable, it involves a copy). This includes passing an `std::string` return from some function as a non-const reference argument into another function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:99,security,immut,immutable,99,"Aside, another difference is that an `std::string` is editable in-place, whereas a Python `str` is immutable. It's probably not common, but some use cases may rely on this and would otherwise be impossible if `std::string` was automatically converted to `str` everywhere (as besides `str` being immutable, it involves a copy). This includes passing an `std::string` return from some function as a non-const reference argument into another function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:295,security,immut,immutable,295,"Aside, another difference is that an `std::string` is editable in-place, whereas a Python `str` is immutable. It's probably not common, but some use cases may rely on this and would otherwise be impossible if `std::string` was automatically converted to `str` everywhere (as besides `str` being immutable, it involves a copy). This includes passing an `std::string` return from some function as a non-const reference argument into another function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:227,testability,automat,automatically,227,"Aside, another difference is that an `std::string` is editable in-place, whereas a Python `str` is immutable. It's probably not common, but some use cases may rely on this and would otherwise be impossible if `std::string` was automatically converted to `str` everywhere (as besides `str` being immutable, it involves a copy). This includes passing an `std::string` return from some function as a non-const reference argument into another function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:704,availability,consist,consistent,704,"What is somewhat confusing here (ROOT master from Saturday) is that one sees `b'mystring'`, but this is not a `bytes` instance. ```term. source /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Sat/ROOT/HEAD/x86_64-el9-gcc13-dbg/ROOT-env.sh. python -c ""import cppyy; mystr = cppyy.gbl.std.string('mystring'); print(repr(mystr)); print(isinstance(mystr, bytes))"". ```. Gives. ```. b'mystring'. False. ```. So at least some printout messages in existing code are confusing me. As you, @wlav , write as well, `repr` [usually](https://docs.python.org/3/library/functions.html#repr) returns something that let's one construct the object again. So something like `cppyy.gbl.std.string('mystring')` is maybe more consistent with the actual type of the object? Or the type and address in angle brackets, so maybe `<cppyy.gbl.std string object at 0xf22d8f0>`? I saw a print out of `b'something'` and happily coded my `isinstance(.., bytes)` and nothing changed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:429,integrability,messag,messages,429,"What is somewhat confusing here (ROOT master from Saturday) is that one sees `b'mystring'`, but this is not a `bytes` instance. ```term. source /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Sat/ROOT/HEAD/x86_64-el9-gcc13-dbg/ROOT-env.sh. python -c ""import cppyy; mystr = cppyy.gbl.std.string('mystring'); print(repr(mystr)); print(isinstance(mystr, bytes))"". ```. Gives. ```. b'mystring'. False. ```. So at least some printout messages in existing code are confusing me. As you, @wlav , write as well, `repr` [usually](https://docs.python.org/3/library/functions.html#repr) returns something that let's one construct the object again. So something like `cppyy.gbl.std.string('mystring')` is maybe more consistent with the actual type of the object? Or the type and address in angle brackets, so maybe `<cppyy.gbl.std string object at 0xf22d8f0>`? I saw a print out of `b'something'` and happily coded my `isinstance(.., bytes)` and nothing changed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:429,interoperability,messag,messages,429,"What is somewhat confusing here (ROOT master from Saturday) is that one sees `b'mystring'`, but this is not a `bytes` instance. ```term. source /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Sat/ROOT/HEAD/x86_64-el9-gcc13-dbg/ROOT-env.sh. python -c ""import cppyy; mystr = cppyy.gbl.std.string('mystring'); print(repr(mystr)); print(isinstance(mystr, bytes))"". ```. Gives. ```. b'mystring'. False. ```. So at least some printout messages in existing code are confusing me. As you, @wlav , write as well, `repr` [usually](https://docs.python.org/3/library/functions.html#repr) returns something that let's one construct the object again. So something like `cppyy.gbl.std.string('mystring')` is maybe more consistent with the actual type of the object? Or the type and address in angle brackets, so maybe `<cppyy.gbl.std string object at 0xf22d8f0>`? I saw a print out of `b'something'` and happily coded my `isinstance(.., bytes)` and nothing changed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:704,usability,consist,consistent,704,"What is somewhat confusing here (ROOT master from Saturday) is that one sees `b'mystring'`, but this is not a `bytes` instance. ```term. source /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Sat/ROOT/HEAD/x86_64-el9-gcc13-dbg/ROOT-env.sh. python -c ""import cppyy; mystr = cppyy.gbl.std.string('mystring'); print(repr(mystr)); print(isinstance(mystr, bytes))"". ```. Gives. ```. b'mystring'. False. ```. So at least some printout messages in existing code are confusing me. As you, @wlav , write as well, `repr` [usually](https://docs.python.org/3/library/functions.html#repr) returns something that let's one construct the object again. So something like `cppyy.gbl.std.string('mystring')` is maybe more consistent with the actual type of the object? Or the type and address in angle brackets, so maybe `<cppyy.gbl.std string object at 0xf22d8f0>`? I saw a print out of `b'something'` and happily coded my `isinstance(.., bytes)` and nothing changed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:157,deployability,contain,contain,157,"Similar goes for e.g. `np.int64` and Python's builtin `int`: they represent the same with `repr()`, but are different types. The contents of `repr()` do not contain any originating type info, but are, however, sufficient to reconstitute either one. As for `isinstance()`, I'm afraid that's never going to be a solid solution for a language that relies on duck typing (e.g., similarly, both `isinstance(12345, np.int64)` and `isinstance(np.int64(12345), int)` are `False`). Instead, `std::string` is made to be a drop-in replacement for `str` (and `bytes` for that matter as a concession;`str` and `bytes` not being drop-in replacements). I'd be interested to know for what use case this would fail and `isinstance` being the only way out (I/O maybe?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:693,deployability,fail,fail,693,"Similar goes for e.g. `np.int64` and Python's builtin `int`: they represent the same with `repr()`, but are different types. The contents of `repr()` do not contain any originating type info, but are, however, sufficient to reconstitute either one. As for `isinstance()`, I'm afraid that's never going to be a solid solution for a language that relies on duck typing (e.g., similarly, both `isinstance(12345, np.int64)` and `isinstance(np.int64(12345), int)` are `False`). Instead, `std::string` is made to be a drop-in replacement for `str` (and `bytes` for that matter as a concession;`str` and `bytes` not being drop-in replacements). I'd be interested to know for what use case this would fail and `isinstance` being the only way out (I/O maybe?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:129,performance,content,contents,129,"Similar goes for e.g. `np.int64` and Python's builtin `int`: they represent the same with `repr()`, but are different types. The contents of `repr()` do not contain any originating type info, but are, however, sufficient to reconstitute either one. As for `isinstance()`, I'm afraid that's never going to be a solid solution for a language that relies on duck typing (e.g., similarly, both `isinstance(12345, np.int64)` and `isinstance(np.int64(12345), int)` are `False`). Instead, `std::string` is made to be a drop-in replacement for `str` (and `bytes` for that matter as a concession;`str` and `bytes` not being drop-in replacements). I'd be interested to know for what use case this would fail and `isinstance` being the only way out (I/O maybe?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:739,performance,I/O,I/O,739,"Similar goes for e.g. `np.int64` and Python's builtin `int`: they represent the same with `repr()`, but are different types. The contents of `repr()` do not contain any originating type info, but are, however, sufficient to reconstitute either one. As for `isinstance()`, I'm afraid that's never going to be a solid solution for a language that relies on duck typing (e.g., similarly, both `isinstance(12345, np.int64)` and `isinstance(np.int64(12345), int)` are `False`). Instead, `std::string` is made to be a drop-in replacement for `str` (and `bytes` for that matter as a concession;`str` and `bytes` not being drop-in replacements). I'd be interested to know for what use case this would fail and `isinstance` being the only way out (I/O maybe?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/issues/15153:693,reliability,fail,fail,693,"Similar goes for e.g. `np.int64` and Python's builtin `int`: they represent the same with `repr()`, but are different types. The contents of `repr()` do not contain any originating type info, but are, however, sufficient to reconstitute either one. As for `isinstance()`, I'm afraid that's never going to be a solid solution for a language that relies on duck typing (e.g., similarly, both `isinstance(12345, np.int64)` and `isinstance(np.int64(12345), int)` are `False`). Instead, `std::string` is made to be a drop-in replacement for `str` (and `bytes` for that matter as a concession;`str` and `bytes` not being drop-in replacements). I'd be interested to know for what use case this would fail and `isinstance` being the only way out (I/O maybe?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15153
https://github.com/root-project/root/pull/15154:47,deployability,patch,patches,47,"FWIW the plan is to backport this to `v6-32-00-patches` because it seems to provide a significant speedup for RNTuple merging, which is a new feature added in this cycle.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15154
https://github.com/root-project/root/pull/15154:47,safety,patch,patches,47,"FWIW the plan is to backport this to `v6-32-00-patches` because it seems to provide a significant speedup for RNTuple merging, which is a new feature added in this cycle.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15154
https://github.com/root-project/root/pull/15154:47,security,patch,patches,47,"FWIW the plan is to backport this to `v6-32-00-patches` because it seems to provide a significant speedup for RNTuple merging, which is a new feature added in this cycle.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15154
https://github.com/root-project/root/pull/15154:86,security,sign,significant,86,"FWIW the plan is to backport this to `v6-32-00-patches` because it seems to provide a significant speedup for RNTuple merging, which is a new feature added in this cycle.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15154
https://github.com/root-project/root/pull/15154:9,testability,plan,plan,9,"FWIW the plan is to backport this to `v6-32-00-patches` because it seems to provide a significant speedup for RNTuple merging, which is a new feature added in this cycle.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15154
https://github.com/root-project/root/issues/15156:122,usability,help,helps,122,"Maybe changing https://github.com/root-project/root/blob/master/tmva/sofie/inc/TMVA/RModel.hxx#L142 to `ClassDefOverride` helps? In case this is a recurring issue, maybe this check should be added somehow to roottest for all ROOT classes, see https://github.com/root-project/root/pull/14843#issuecomment-1969533678 by @vepadulano. [EDIT]: Ignore this comment, I think there is no override here in this class, so that ClassDefOverride is not needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15156
https://github.com/root-project/root/pull/15158:102,integrability,sub,sub-set,102,I would have many those (GPL/non-GPL) part of the matrix. We do *have to* make sure that a controlled sub-set of ROOT is working without any GPL libraries.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:91,security,control,controlled,91,I would have many those (GPL/non-GPL) part of the matrix. We do *have to* make sure that a controlled sub-set of ROOT is working without any GPL libraries.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:91,testability,control,controlled,91,I would have many those (GPL/non-GPL) part of the matrix. We do *have to* make sure that a controlled sub-set of ROOT is working without any GPL libraries.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:187,deployability,Resourc,Resources,187,"@pcanal has a point. We should also understand what to do with builtins: is it better to cater users that want drop in binaries with all externals, or completely rely on distro packages? Resources are not infinite and perhaps a choice has to be made.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:187,energy efficiency,Resourc,Resources,187,"@pcanal has a point. We should also understand what to do with builtins: is it better to cater users that want drop in binaries with all externals, or completely rely on distro packages? Resources are not infinite and perhaps a choice has to be made.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:177,modifiability,pac,packages,177,"@pcanal has a point. We should also understand what to do with builtins: is it better to cater users that want drop in binaries with all externals, or completely rely on distro packages? Resources are not infinite and perhaps a choice has to be made.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:187,performance,Resourc,Resources,187,"@pcanal has a point. We should also understand what to do with builtins: is it better to cater users that want drop in binaries with all externals, or completely rely on distro packages? Resources are not infinite and perhaps a choice has to be made.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:151,safety,compl,completely,151,"@pcanal has a point. We should also understand what to do with builtins: is it better to cater users that want drop in binaries with all externals, or completely rely on distro packages? Resources are not infinite and perhaps a choice has to be made.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:187,safety,Resourc,Resources,187,"@pcanal has a point. We should also understand what to do with builtins: is it better to cater users that want drop in binaries with all externals, or completely rely on distro packages? Resources are not infinite and perhaps a choice has to be made.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:151,security,compl,completely,151,"@pcanal has a point. We should also understand what to do with builtins: is it better to cater users that want drop in binaries with all externals, or completely rely on distro packages? Resources are not infinite and perhaps a choice has to be made.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:36,testability,understand,understand,36,"@pcanal has a point. We should also understand what to do with builtins: is it better to cater users that want drop in binaries with all externals, or completely rely on distro packages? Resources are not infinite and perhaps a choice has to be made.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:187,testability,Resourc,Resources,187,"@pcanal has a point. We should also understand what to do with builtins: is it better to cater users that want drop in binaries with all externals, or completely rely on distro packages? Resources are not infinite and perhaps a choice has to be made.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:95,usability,user,users,95,"@pcanal has a point. We should also understand what to do with builtins: is it better to cater users that want drop in binaries with all externals, or completely rely on distro packages? Resources are not infinite and perhaps a choice has to be made.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:165,deployability,releas,released,165,"> Great, thanks a lot! We should just not lose the overview in which branch we do what 🙂. 6.26 and 6.28 always were including GSL before the move to GH CI. 6.30 was released w/o already. 6.32/master are not released and give us some space to maneuver.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15158:207,deployability,releas,released,207,"> Great, thanks a lot! We should just not lose the overview in which branch we do what 🙂. 6.26 and 6.28 always were including GSL before the move to GH CI. 6.30 was released w/o already. 6.32/master are not released and give us some space to maneuver.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15158
https://github.com/root-project/root/pull/15160:71,energy efficiency,current,current,71,"@ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:113,safety,test,test,113,"@ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:113,testability,test,test,113,"@ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:384,deployability,build,build,384,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:550,deployability,build,build,550,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:645,deployability,build,build,645,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:73,energy efficiency,current,current,73,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:436,energy efficiency,core,core,436,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:516,interoperability,specif,specify,516,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:115,safety,test,test,115,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:191,safety,test,test,191,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:260,security,Ddo,Ddocu,260,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:115,testability,test,test,115,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:191,testability,test,test,191,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it? It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:379,availability,Error,Error,379,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:344,energy efficiency,core,core,344,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:446,integrability,sub,sub-command,446,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:379,performance,Error,Error,379,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:379,safety,Error,Error,379,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:174,security,Ddo,Ddocu,174,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:102,usability,command,command,102,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:286,usability,User,Users,286,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:379,usability,Error,Error,379,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:388,usability,document,documentation,388,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:450,usability,command,command,450,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:515,usability,command,command,515,"@ferdymercury . I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```. cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. and I get:. ```. CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. command. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:68,deployability,fail,failing,68,"@ferdymercury This seems to be caused by ` gROOT->GetGitBranch\(\)` failing at https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L46 because there is no `root.exe` yet when building doxygen as a step of the ROOT build. . @couet Can you try building without documentation first (`-Ddocu=off`), run `source bin/thisroot.sh`, then build again with `-Ddocu=on`)? This should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:243,deployability,build,building,243,"@ferdymercury This seems to be caused by ` gROOT->GetGitBranch\(\)` failing at https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L46 because there is no `root.exe` yet when building doxygen as a step of the ROOT build. . @couet Can you try building without documentation first (`-Ddocu=off`), run `source bin/thisroot.sh`, then build again with `-Ddocu=on`)? This should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:282,deployability,build,build,282,"@ferdymercury This seems to be caused by ` gROOT->GetGitBranch\(\)` failing at https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L46 because there is no `root.exe` yet when building doxygen as a step of the ROOT build. . @couet Can you try building without documentation first (`-Ddocu=off`), run `source bin/thisroot.sh`, then build again with `-Ddocu=on`)? This should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:310,deployability,build,building,310,"@ferdymercury This seems to be caused by ` gROOT->GetGitBranch\(\)` failing at https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L46 because there is no `root.exe` yet when building doxygen as a step of the ROOT build. . @couet Can you try building without documentation first (`-Ddocu=off`), run `source bin/thisroot.sh`, then build again with `-Ddocu=on`)? This should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:398,deployability,build,build,398,"@ferdymercury This seems to be caused by ` gROOT->GetGitBranch\(\)` failing at https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L46 because there is no `root.exe` yet when building doxygen as a step of the ROOT build. . @couet Can you try building without documentation first (`-Ddocu=off`), run `source bin/thisroot.sh`, then build again with `-Ddocu=on`)? This should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:68,reliability,fail,failing,68,"@ferdymercury This seems to be caused by ` gROOT->GetGitBranch\(\)` failing at https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L46 because there is no `root.exe` yet when building doxygen as a step of the ROOT build. . @couet Can you try building without documentation first (`-Ddocu=off`), run `source bin/thisroot.sh`, then build again with `-Ddocu=on`)? This should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:350,security,Ddo,Ddocu,350,"@ferdymercury This seems to be caused by ` gROOT->GetGitBranch\(\)` failing at https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L46 because there is no `root.exe` yet when building doxygen as a step of the ROOT build. . @couet Can you try building without documentation first (`-Ddocu=off`), run `source bin/thisroot.sh`, then build again with `-Ddocu=on`)? This should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:417,security,Ddo,Ddocu,417,"@ferdymercury This seems to be caused by ` gROOT->GetGitBranch\(\)` failing at https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L46 because there is no `root.exe` yet when building doxygen as a step of the ROOT build. . @couet Can you try building without documentation first (`-Ddocu=off`), run `source bin/thisroot.sh`, then build again with `-Ddocu=on`)? This should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:162,usability,document,documentation,162,"@ferdymercury This seems to be caused by ` gROOT->GetGitBranch\(\)` failing at https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L46 because there is no `root.exe` yet when building doxygen as a step of the ROOT build. . @couet Can you try building without documentation first (`-Ddocu=off`), run `source bin/thisroot.sh`, then build again with `-Ddocu=on`)? This should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:327,usability,document,documentation,327,"@ferdymercury This seems to be caused by ` gROOT->GetGitBranch\(\)` failing at https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L46 because there is no `root.exe` yet when building doxygen as a step of the ROOT build. . @couet Can you try building without documentation first (`-Ddocu=off`), run `source bin/thisroot.sh`, then build again with `-Ddocu=on`)? This should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:362,availability,Error,Error,362,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:566,deployability,depend,dependent,566,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:311,energy efficiency,core,core,311,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:431,integrability,sub,sub-command,431,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:566,integrability,depend,dependent,566,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:667,integrability,repositor,repository,667,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:557,interoperability,platform,platform-dependent,557,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:667,interoperability,repositor,repository,667,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:686,interoperability,conflict,conflicting,686,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:566,modifiability,depend,dependent,566,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:362,performance,Error,Error,362,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:362,safety,Error,Error,362,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:533,safety,review,review,533,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:566,safety,depend,dependent,566,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:141,security,Ddo,Ddocu,141,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:533,testability,review,review,533,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:566,testability,depend,dependent,566,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:61,usability,command,command,61,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:253,usability,User,Users,253,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:362,usability,Error,Error,362,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:371,usability,document,documentation,371,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:435,usability,command,command,435,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:502,usability,command,command,502,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:840,usability,COMMAND,COMMAND,840,"> @ferdymercury I took the branch from #15314 . I issued the command suggested in you previous comment:. > . > ```. > cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". > ```. > . > and I get:. > . > ```. > CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):. > STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to. > command. > ```. Thanks for the review! This might be a platform-dependent issue, it works well in Ubuntu. Or it might be that you are using a tarball instead of git repository? So the conflicting line is:. `STRING(REGEX REPLACE ""^\n\\(const char \\*\\) "" """" ROOT_GIT_VERSION ${ROOT_GIT_VERSION})`. which is called after:. execute_process(COMMAND ${ROOT_root_CMD} -l -b -q -e gROOT->GetGitBranch\(\) OUTPUT_VARIABLE ROOT_GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE). Could you post here the output of ROOT_GIT_VERSION before calling REPLACE ? So that I know what to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:69,deployability,depend,dependency,69,@jolly-chen ohh I see what you mean. Maybe it's better then to add a dependency on root.exe for this ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:69,integrability,depend,dependency,69,@jolly-chen ohh I see what you mean. Maybe it's better then to add a dependency on root.exe for this ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:69,modifiability,depend,dependency,69,@jolly-chen ohh I see what you mean. Maybe it's better then to add a dependency on root.exe for this ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:69,safety,depend,dependency,69,@jolly-chen ohh I see what you mean. Maybe it's better then to add a dependency on root.exe for this ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:69,testability,depend,dependency,69,@jolly-chen ohh I see what you mean. Maybe it's better then to add a dependency on root.exe for this ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:144,usability,document,documentation,144,@ferdymercury Yes I think this would be fixed with this todo https://github.com/root-project/root/blob/eb2d443a5d021500f1085df78ca52701007c263c/documentation/doxygen/CMakeLists.txt#L22,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:81,deployability,version,version,81,I am a bit lost now .. this branch has conflicts ... how to get again the latest version ... ? there is this PR and this one: https://github.com/root-project/root/pull/15314 that's very confusing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:81,integrability,version,version,81,I am a bit lost now .. this branch has conflicts ... how to get again the latest version ... ? there is this PR and this one: https://github.com/root-project/root/pull/15314 that's very confusing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:39,interoperability,conflict,conflicts,39,I am a bit lost now .. this branch has conflicts ... how to get again the latest version ... ? there is this PR and this one: https://github.com/root-project/root/pull/15314 that's very confusing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:81,modifiability,version,version,81,I am a bit lost now .. this branch has conflicts ... how to get again the latest version ... ? there is this PR and this one: https://github.com/root-project/root/pull/15314 that's very confusing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:83,deployability,version,version,83,"> I am a bit lost now .. this branch has conflicts ... how to get again the latest version ... there is this PR and this one #15314 that's very confusing. I've resolved the conflicts now. Try with this one, the other PR is just for later on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:83,integrability,version,version,83,"> I am a bit lost now .. this branch has conflicts ... how to get again the latest version ... there is this PR and this one #15314 that's very confusing. I've resolved the conflicts now. Try with this one, the other PR is just for later on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:41,interoperability,conflict,conflicts,41,"> I am a bit lost now .. this branch has conflicts ... how to get again the latest version ... there is this PR and this one #15314 that's very confusing. I've resolved the conflicts now. Try with this one, the other PR is just for later on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:173,interoperability,conflict,conflicts,173,"> I am a bit lost now .. this branch has conflicts ... how to get again the latest version ... there is this PR and this one #15314 that's very confusing. I've resolved the conflicts now. Try with this one, the other PR is just for later on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:83,modifiability,version,version,83,"> I am a bit lost now .. this branch has conflicts ... how to get again the latest version ... there is this PR and this one #15314 that's very confusing. I've resolved the conflicts now. Try with this one, the other PR is just for later on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:815,availability,Error,Error,815,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:894,availability,Error,Error,894,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:1000,availability,Error,Error,1000,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:415,energy efficiency,core,core,415,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:604,energy efficiency,Cpu,Cpu,604,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:584,performance,Time,Time,584,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:604,performance,Cpu,Cpu,604,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:608,performance,Time,Time,608,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:815,performance,Error,Error,815,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:894,performance,Error,Error,894,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:1000,performance,Error,Error,1000,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:815,safety,Error,Error,815,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:894,safety,Error,Error,894,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:1000,safety,Error,Error,1000,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:250,security,Ddo,Ddocu,250,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:216,usability,command,command,216,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:357,usability,User,Users,357,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:736,usability,command,command,736,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:769,usability,document,documentation,769,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:815,usability,Error,Error,815,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:840,usability,document,documentation,840,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:894,usability,Error,Error,894,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:1000,usability,Error,Error,1000,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:1038,usability,command,command,1038,"So, I cloned the ROOT repo in the folder `docgmake`. Then in that cloned folder I did `gh pr checkout 15160` to get this branch. Then `cd ..; mkdir docgmake-bin; cd docgmake-bin`. And in that bin folder I issued the command:. ```. cmake ../docgmake -Ddocu=ON -DDOCU_LOCATION=~/rootdoc -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core"". ```. then `make -j8`. which gives me:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.23 seconds Cpu Time = 0.08 seconds. (TFile *) 0x7f77c78bd300. [100%] Built target hsimple. /bin/sh: -DROOT_COMMAND=\""ROOT_root_CMD-NOTFOUND\"": command not found. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 127. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [100%] Built target PreparationPyz. make: *** [all] Error 2. ```. So it seems the `gmake` command was wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:149,safety,accid,accidentally,149,@couet can you try again with this commit https://github.com/root-project/root/pull/15160/commits/da41596be8c0c73bf52de6a1d874e67b4c699dea? . (sorry accidentally closed the PR),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:162,usability,close,closed,162,@couet can you try again with this commit https://github.com/root-project/root/pull/15160/commits/da41596be8c0c73bf52de6a1d874e67b4c699dea? . (sorry accidentally closed the PR),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:96,deployability,version,version,96,"I am rebuilding. By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:96,integrability,version,version,96,"I am rebuilding. By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:47,interoperability,specif,specify,47,"I am rebuilding. By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:146,interoperability,specif,specify,146,"I am rebuilding. By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:96,modifiability,version,version,96,"I am rebuilding. By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:159,modifiability,variab,variable,159,"I am rebuilding. By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:83,safety,valid,valid,83,"I am rebuilding. By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:81,deployability,version,version,81,"> By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable. Thanks, good idea. I just added a commit to support that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:81,integrability,version,version,81,"> By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable. Thanks, good idea. I just added a commit to support that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:32,interoperability,specif,specify,32,"> By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable. Thanks, good idea. I just added a commit to support that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:131,interoperability,specif,specify,131,"> By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable. Thanks, good idea. I just added a commit to support that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:81,modifiability,version,version,81,"> By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable. Thanks, good idea. I just added a commit to support that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:144,modifiability,variab,variable,144,"> By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable. Thanks, good idea. I just added a commit to support that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:68,safety,valid,valid,68,"> By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable. Thanks, good idea. I just added a commit to support that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:198,usability,support,support,198,"> By the way, why do we need to specify `DOXYGEN_EXECUTABLE` ? If a valid oxygen version is in `$PATH` we should not be obliged to specify this variable. Thanks, good idea. I just added a commit to support that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:42,interoperability,specif,specifying,42,"> DOCU_LOCATION. Should be fixed now. Not specifying anything defaults to ~/rootdoc. > `DOCU_LOGFILE` dinot exist. If you do not specify it, warnings will be printed to terminal. If specified, warnings will be printed to a file on your disk.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:129,interoperability,specif,specify,129,"> DOCU_LOCATION. Should be fixed now. Not specifying anything defaults to ~/rootdoc. > `DOCU_LOGFILE` dinot exist. If you do not specify it, warnings will be printed to terminal. If specified, warnings will be printed to a file on your disk.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:182,interoperability,specif,specified,182,"> DOCU_LOCATION. Should be fixed now. Not specifying anything defaults to ~/rootdoc. > `DOCU_LOGFILE` dinot exist. If you do not specify it, warnings will be printed to terminal. If specified, warnings will be printed to a file on your disk.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:236,performance,disk,disk,236,"> DOCU_LOCATION. Should be fixed now. Not specifying anything defaults to ~/rootdoc. > `DOCU_LOGFILE` dinot exist. If you do not specify it, warnings will be printed to terminal. If specified, warnings will be printed to a file on your disk.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:259,availability,error,error,259,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:364,availability,error,error,364,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:441,availability,Error,Error,441,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:518,availability,Error,Error,518,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:543,availability,Error,Error,543,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:155,energy efficiency,Cpu,Cpu,155,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:235,integrability,filter,filter,235,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:135,performance,Time,Time,135,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:155,performance,Cpu,Cpu,155,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:159,performance,Time,Time,159,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:259,performance,error,error,259,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:364,performance,error,error,364,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:441,performance,Error,Error,441,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:518,performance,Error,Error,518,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:543,performance,Error,Error,543,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:259,safety,error,error,259,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:364,safety,error,error,364,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:441,safety,Error,Error,441,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:518,safety,Error,Error,518,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:543,safety,Error,Error,543,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:259,usability,error,error,259,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:364,usability,error,error,364,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:395,usability,document,documentation,395,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:441,usability,Error,Error,441,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:464,usability,document,documentation,464,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:518,usability,Error,Error,518,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:543,usability,Error,Error,543,Now I get:. ```. ... [100%] Built target modules_idx. [100%] Generating tutorials/hsimple.root. Processing hsimple.C... hsimple : Real Time = 0.22 seconds Cpu Time = 0.07 seconds. (TFile *) 0x7fccdab5e360. [100%] Built target hsimple. filter.cxx:74:10: fatal error: 'unistd.h' file not found. #include <unistd.h>. ^~~~~~~~~~. [100%] Built target PreparationPyz. 1 error generated. make[2]: *** [documentation/doxygen/CMakeFiles/Preparation] Error 1. make[1]: *** [documentation/doxygen/CMakeFiles/Preparation.dir/all] Error 2. make: *** [all] Error 2. ```. I am on MacOS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:338,availability,error,error-unistd-h-file-not-found,338,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:68,deployability,depend,dependency,68,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:289,deployability,stack,stackoverflow,289,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:68,integrability,depend,dependency,68,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:59,interoperability,platform,platform-dependency,59,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:68,modifiability,depend,dependency,68,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:338,performance,error,error-unistd-h-file-not-found,338,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:68,safety,depend,dependency,68,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:338,safety,error,error-unistd-h-file-not-found,338,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:68,testability,depend,dependency,68,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:338,usability,error,error-unistd-h-file-not-found,338,"> 'unistd.h' file not found. Ok, we might need to add some platform-dependency now. When you run ""cmake"", what is the CXX compiler that is reported in the terminal? Or in other words, what is the value of CMAKE_CXX_COMPILER in your case? In my case it's `c++`. Might be related to https://stackoverflow.com/questions/29357618/clang-fatal-error-unistd-h-file-not-found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:57,availability,error,error,57,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:170,availability,error,error,170,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:249,availability,error,error,249,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:202,deployability,build,building,202,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:275,deployability,log,log,275,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:33,integrability,filter,filter,33,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:57,performance,error,error,57,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:170,performance,error,error,170,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:249,performance,error,error,249,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:57,safety,error,error,57,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:170,safety,error,error,170,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:249,safety,error,error,249,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:275,safety,log,log,275,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:275,security,log,log,275,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:275,testability,log,log,275,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:57,usability,error,error,57,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:170,usability,error,error,170,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:249,usability,error,error,249,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/pull/15160:371,usability,document,documentation,371,> [100%] Built target hsimple. > filter.cxx:74:10: fatal error: 'unistd.h' file not found. > #include <unistd.h>. > ^~~~~~~~~~. > [100%] Built target PreparationPyz. > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see. See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314. The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15160
https://github.com/root-project/root/issues/15161:76,integrability,sub,subscripting,76,"Hi! The new cppyy implements `__getitem__` for every CPPInstance to support subscripting of C-style arrays, like this:. ```Python. import cppyy. cppyy.cppdef("""""". struct Foo {. Foo(int x) : _x{x} {}. int _x = 0;. };. """"""). v = cppyy.gbl.vector[""Foo""]([3, 2, 1]). d = v.data(). print(d[2]._x). ```. I would prefer to not sacrifice this feature, but the `__getitem__` is necessary for it. Can you replace maybe your `hasattr` check with this? ```python. def is_sequence(obj):. try:. obj[0]. return True. except TypeError:. return False. ```. This would be backwards compatible, because if `__getitem__` is not there, it will also raise a TypeError. Let me know if this would work for ATLAS, otherwise let's try to find a different solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:564,interoperability,compatib,compatible,564,"Hi! The new cppyy implements `__getitem__` for every CPPInstance to support subscripting of C-style arrays, like this:. ```Python. import cppyy. cppyy.cppdef("""""". struct Foo {. Foo(int x) : _x{x} {}. int _x = 0;. };. """"""). v = cppyy.gbl.vector[""Foo""]([3, 2, 1]). d = v.data(). print(d[2]._x). ```. I would prefer to not sacrifice this feature, but the `__getitem__` is necessary for it. Can you replace maybe your `hasattr` check with this? ```python. def is_sequence(obj):. try:. obj[0]. return True. except TypeError:. return False. ```. This would be backwards compatible, because if `__getitem__` is not there, it will also raise a TypeError. Let me know if this would work for ATLAS, otherwise let's try to find a different solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:502,safety,except,except,502,"Hi! The new cppyy implements `__getitem__` for every CPPInstance to support subscripting of C-style arrays, like this:. ```Python. import cppyy. cppyy.cppdef("""""". struct Foo {. Foo(int x) : _x{x} {}. int _x = 0;. };. """"""). v = cppyy.gbl.vector[""Foo""]([3, 2, 1]). d = v.data(). print(d[2]._x). ```. I would prefer to not sacrifice this feature, but the `__getitem__` is necessary for it. Can you replace maybe your `hasattr` check with this? ```python. def is_sequence(obj):. try:. obj[0]. return True. except TypeError:. return False. ```. This would be backwards compatible, because if `__getitem__` is not there, it will also raise a TypeError. Let me know if this would work for ATLAS, otherwise let's try to find a different solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:68,usability,support,support,68,"Hi! The new cppyy implements `__getitem__` for every CPPInstance to support subscripting of C-style arrays, like this:. ```Python. import cppyy. cppyy.cppdef("""""". struct Foo {. Foo(int x) : _x{x} {}. int _x = 0;. };. """"""). v = cppyy.gbl.vector[""Foo""]([3, 2, 1]). d = v.data(). print(d[2]._x). ```. I would prefer to not sacrifice this feature, but the `__getitem__` is necessary for it. Can you replace maybe your `hasattr` check with this? ```python. def is_sequence(obj):. try:. obj[0]. return True. except TypeError:. return False. ```. This would be backwards compatible, because if `__getitem__` is not there, it will also raise a TypeError. Let me know if this would work for ATLAS, otherwise let's try to find a different solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:306,usability,prefer,prefer,306,"Hi! The new cppyy implements `__getitem__` for every CPPInstance to support subscripting of C-style arrays, like this:. ```Python. import cppyy. cppyy.cppdef("""""". struct Foo {. Foo(int x) : _x{x} {}. int _x = 0;. };. """"""). v = cppyy.gbl.vector[""Foo""]([3, 2, 1]). d = v.data(). print(d[2]._x). ```. I would prefer to not sacrifice this feature, but the `__getitem__` is necessary for it. Can you replace maybe your `hasattr` check with this? ```python. def is_sequence(obj):. try:. obj[0]. return True. except TypeError:. return False. ```. This would be backwards compatible, because if `__getitem__` is not there, it will also raise a TypeError. Let me know if this would work for ATLAS, otherwise let's try to find a different solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:66,deployability,API,API,66,Thanks a lot @guitargeek. The actual problem is that the Python/C API determines if an object provides sequence control by explicitly checking `__getitem__()` and this behavior is at odds with that:. https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check. One could probably use the check in conjunction with the size/length but that's a bit of a kludge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:231,deployability,api,api,231,Thanks a lot @guitargeek. The actual problem is that the Python/C API determines if an object provides sequence control by explicitly checking `__getitem__()` and this behavior is at odds with that:. https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check. One could probably use the check in conjunction with the size/length but that's a bit of a kludge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:66,integrability,API,API,66,Thanks a lot @guitargeek. The actual problem is that the Python/C API determines if an object provides sequence control by explicitly checking `__getitem__()` and this behavior is at odds with that:. https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check. One could probably use the check in conjunction with the size/length but that's a bit of a kludge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:231,integrability,api,api,231,Thanks a lot @guitargeek. The actual problem is that the Python/C API determines if an object provides sequence control by explicitly checking `__getitem__()` and this behavior is at odds with that:. https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check. One could probably use the check in conjunction with the size/length but that's a bit of a kludge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:66,interoperability,API,API,66,Thanks a lot @guitargeek. The actual problem is that the Python/C API determines if an object provides sequence control by explicitly checking `__getitem__()` and this behavior is at odds with that:. https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check. One could probably use the check in conjunction with the size/length but that's a bit of a kludge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:231,interoperability,api,api,231,Thanks a lot @guitargeek. The actual problem is that the Python/C API determines if an object provides sequence control by explicitly checking `__getitem__()` and this behavior is at odds with that:. https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check. One could probably use the check in conjunction with the size/length but that's a bit of a kludge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:112,security,control,control,112,Thanks a lot @guitargeek. The actual problem is that the Python/C API determines if an object provides sequence control by explicitly checking `__getitem__()` and this behavior is at odds with that:. https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check. One could probably use the check in conjunction with the size/length but that's a bit of a kludge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:112,testability,control,control,112,Thanks a lot @guitargeek. The actual problem is that the Python/C API determines if an object provides sequence control by explicitly checking `__getitem__()` and this behavior is at odds with that:. https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check. One could probably use the check in conjunction with the size/length but that's a bit of a kludge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:168,usability,behavi,behavior,168,Thanks a lot @guitargeek. The actual problem is that the Python/C API determines if an object provides sequence control by explicitly checking `__getitem__()` and this behavior is at odds with that:. https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check. One could probably use the check in conjunction with the size/length but that's a bit of a kludge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:103,deployability,api,api,103,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:720,deployability,fail,fails,720,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:855,deployability,log,logic,855,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:906,deployability,API,API,906,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:103,integrability,api,api,103,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:385,integrability,sub,subclasses,385,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:906,integrability,API,API,906,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:103,interoperability,api,api,103,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:906,interoperability,API,API,906,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:758,modifiability,extens,extension,758,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:790,modifiability,extens,extension,790,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:720,reliability,fail,fails,720,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:942,reliability,doe,does,942,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:855,safety,log,logic,855,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:871,safety,except,except,871,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:804,security,control,control,804,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:855,security,log,logic,855,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1064,security,assess,assess,1064,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:804,testability,control,control,804,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:855,testability,log,logic,855,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:472,usability,support,supports,472,"I have seen your link, and according to the docs the [PySequence_Check](https://docs.python.org/3.12/c-api/sequence.html#c.PySequence_Check) is a kludge itself:. > Note that it returns 1 for Python classes with a [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) method, unless they are [dict](https://docs.python.org/3/library/stdtypes.html#dict) subclasses, since in general it is impossible to determine what type of keys the class supports. There are many other classes in the Python ecosystem that are not dicts and not a sequence, but implement `__getitem__` anyway (Pandas dataframes, uproot files, so many things...). Where is this used exactly? Internally in CPython and it fails there, or in some ATLAS CPython extension? It it's in a CPython extension you control, it should not be hard to re-implement the logic with the `except TypeError` with the CPython API. It it's in CPython itself, how does it happen? In any case, it would be nice to see more info about the usecase (best with some links to code) for me to assess the situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:600,availability,operat,operator,600,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:171,deployability,contain,containers,171,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:935,deployability,fail,fail,935,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:925,energy efficiency,current,currently,925,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1603,energy efficiency,Current,Currently,1603,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:276,integrability,protocol,protocol,276,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:698,integrability,protocol,protocol,698,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:70,interoperability,standard,standard,70,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:276,interoperability,protocol,protocol,276,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:698,interoperability,protocol,protocol,698,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1759,interoperability,specif,specific,1759,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1280,modifiability,exten,extended,1280,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1907,performance,perform,performed,1907,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:935,reliability,fail,fail,935,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1377,reliability,pra,practice,1377,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:486,safety,except,exception,486,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:562,safety,hot,hot,562,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1092,safety,except,except,1092,"` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1828,safety,permiss,permissive,1828,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:391,security,access,access,391,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:2,testability,understand,understand,2,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1473,testability,simpl,simply,1473,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1473,usability,simpl,simply,1473,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1907,usability,perform,performed,1907,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1983,usability,behavi,behavior,1983,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:. ```. import cppyy. cppyy.cppdef(""""""\. struct MyStruct {};. MyStruct* fff = nullptr;. """"""). def is_sequence(obj):. try:. obj[0]. return True. except TypeError as e:. print(e). return False. print(is_sequence(cppyy.gbl.fff)). ```. which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:175,availability,ping,ping,175,"Thanks @wlav! > I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers). Let's ping @amete to ask exactly where it comes from in the context of ATLAS. Knowing how you use PyROOT would help us to make recommendations and if possible improve cppyy for this particular case. I don't think we can converge here without your input. > Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. . In the original reproducer, the `__getitem__` attribute check is done for the instance, so this wouldn't help there right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:86,interoperability,standard,standard,86,"Thanks @wlav! > I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers). Let's ping @amete to ask exactly where it comes from in the context of ATLAS. Knowing how you use PyROOT would help us to make recommendations and if possible improve cppyy for this particular case. I don't think we can converge here without your input. > Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. . In the original reproducer, the `__getitem__` attribute check is done for the instance, so this wouldn't help there right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:542,interoperability,specif,specific,542,"Thanks @wlav! > I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers). Let's ping @amete to ask exactly where it comes from in the context of ATLAS. Knowing how you use PyROOT would help us to make recommendations and if possible improve cppyy for this particular case. I don't think we can converge here without your input. > Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. . In the original reproducer, the `__getitem__` attribute check is done for the instance, so this wouldn't help there right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:416,safety,input,input,416,"Thanks @wlav! > I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers). Let's ping @amete to ask exactly where it comes from in the context of ATLAS. Knowing how you use PyROOT would help us to make recommendations and if possible improve cppyy for this particular case. I don't think we can converge here without your input. > Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. . In the original reproducer, the `__getitem__` attribute check is done for the instance, so this wouldn't help there right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:18,testability,understand,understand,18,"Thanks @wlav! > I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers). Let's ping @amete to ask exactly where it comes from in the context of ATLAS. Knowing how you use PyROOT would help us to make recommendations and if possible improve cppyy for this particular case. I don't think we can converge here without your input. > Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. . In the original reproducer, the `__getitem__` attribute check is done for the instance, so this wouldn't help there right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:229,testability,context,context,229,"Thanks @wlav! > I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers). Let's ping @amete to ask exactly where it comes from in the context of ATLAS. Knowing how you use PyROOT would help us to make recommendations and if possible improve cppyy for this particular case. I don't think we can converge here without your input. > Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. . In the original reproducer, the `__getitem__` attribute check is done for the instance, so this wouldn't help there right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:280,usability,help,help,280,"Thanks @wlav! > I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers). Let's ping @amete to ask exactly where it comes from in the context of ATLAS. Knowing how you use PyROOT would help us to make recommendations and if possible improve cppyy for this particular case. I don't think we can converge here without your input. > Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. . In the original reproducer, the `__getitem__` attribute check is done for the instance, so this wouldn't help there right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:416,usability,input,input,416,"Thanks @wlav! > I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers). Let's ping @amete to ask exactly where it comes from in the context of ATLAS. Knowing how you use PyROOT would help us to make recommendations and if possible improve cppyy for this particular case. I don't think we can converge here without your input. > Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. . In the original reproducer, the `__getitem__` attribute check is done for the instance, so this wouldn't help there right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:659,usability,help,help,659,"Thanks @wlav! > I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers). Let's ping @amete to ask exactly where it comes from in the context of ATLAS. Knowing how you use PyROOT would help us to make recommendations and if possible improve cppyy for this particular case. I don't think we can converge here without your input. > Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. . In the original reproducer, the `__getitem__` attribute check is done for the instance, so this wouldn't help there right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:222,availability,operat,operations,222,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:503,availability,recov,recover,503,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:292,deployability,API,API,292,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:344,deployability,patch,patch,344,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:503,deployability,recov,recover,503,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:561,deployability,version,versions,561,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:292,integrability,API,API,292,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:561,integrability,version,versions,561,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:292,interoperability,API,API,292,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:561,modifiability,version,versions,561,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:394,reliability,pra,practical,394,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:503,reliability,recov,recover,503,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:344,safety,patch,patch,344,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:503,safety,recov,recover,503,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:118,security,Control,Control,118,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:344,security,patch,patch,344,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:503,security,recov,recover,503,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:118,testability,Control,Control,118,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1141,availability,avail,available,1141,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1188,availability,operat,operator,1188,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:267,deployability,fail,fail,267,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:464,deployability,depend,depending,464,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:464,integrability,depend,depending,464,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1027,interoperability,specif,specified,1027,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:464,modifiability,depend,depending,464,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:267,reliability,fail,fail,267,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1141,reliability,availab,available,1141,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:464,safety,depend,depending,464,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1141,safety,avail,available,1141,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1141,security,availab,available,1141,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:289,testability,simpl,simply,289,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:464,testability,depend,depending,464,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:105,usability,help,help,105,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:289,usability,simpl,simply,289,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1283,usability,clear,clear,1283,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right? Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```. int. PySequence_Check(PyObject *s). { . if (PyDict_Check(s)). return 0; . return Py_TYPE(s)->tp_as_sequence &&. Py_TYPE(s)->tp_as_sequence->sq_item != NULL;. }. ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:115,usability,behavi,behaviors,115,"Hmm, `mp_subscript` mostly works: it fixes the `PySequence_Check` thing, works as expected for other `__getitem__` behaviors. But there's one problem: precisely b/c it no longer passes the sequence check, you can't iterate over a builtin array, represented as a pointer, anymore. I.e., this is no way out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:93,availability,operat,operator,93,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:497,availability,operat,operator,497,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:552,deployability,API,API,552,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1399,deployability,API,API,1399,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:552,integrability,API,API,552,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1399,integrability,API,API,1399,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:552,interoperability,API,API,552,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1399,interoperability,API,API,1399,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1350,security,expos,expose,1350,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:346,testability,simpl,simpler,346,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1168,testability,simpl,simpler,1168,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1199,testability,simpl,simplified,1199,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:346,usability,simpl,simpler,346,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1168,usability,simpl,simpler,1168,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:1199,usability,simpl,simplified,1199,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```. import cppyy. import cppyy.types. cppyy.cppdef(""""""\. struct MyStruct1 {};. struct MyStruct2 {. int operator[](int) { return 42; }. };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {. if (CPyCppyy::Instance_Check(obj)) {. PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");. PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");. bool ret = gi1 && gi1 != gi2;. Py_XDECREF(gi2);. Py_XDECREF(gi1);. return ret;. }. return false;. }. """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)). ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:541,availability,robust,robust,541,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:61,deployability,depend,depending,61,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:499,deployability,API,API,499,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:140,energy efficiency,Current,Currently,140,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:598,energy efficiency,current,currently,598,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:61,integrability,depend,depending,61,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:499,integrability,API,API,499,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:499,interoperability,API,API,499,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:61,modifiability,depend,depending,61,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:541,reliability,robust,robust,541,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:61,safety,depend,depending,61,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:541,safety,robust,robust,541,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:450,security,expos,expose,450,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:61,testability,depend,depending,61,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:227,testability,context,context,227,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:283,availability,operat,operator,283,"Added: https://github.com/wlav/CPyCppyy/commit/a02ceeb4c07a16fe084b8f23e979cb19b9347a05 . For convenience, it defaults to `PySequence_Check()` for non-cppyy objects. Note that as the ""TODO"" in that method says, it's possible to further refine `Sequence_Check` by verifying that the `operator[]()` takes and int-like argument and/or that the class defines a `__len__` of sorts. However, `PySequence_Check` doesn't do any of that either, so I've punted on that for now, but I can add if desired. The method does not check for `__iter__` as `PySequence_GetItem()` would fail for otherwise iterable containers (such as `std::list`). Here are some tests showing how I envisage this to work: https://github.com/wlav/cppyy/commit/2ebeacb9aa977497d9dffc8032302f3fc6d418ec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:567,deployability,fail,fail,567,"Added: https://github.com/wlav/CPyCppyy/commit/a02ceeb4c07a16fe084b8f23e979cb19b9347a05 . For convenience, it defaults to `PySequence_Check()` for non-cppyy objects. Note that as the ""TODO"" in that method says, it's possible to further refine `Sequence_Check` by verifying that the `operator[]()` takes and int-like argument and/or that the class defines a `__len__` of sorts. However, `PySequence_Check` doesn't do any of that either, so I've punted on that for now, but I can add if desired. The method does not check for `__iter__` as `PySequence_GetItem()` would fail for otherwise iterable containers (such as `std::list`). Here are some tests showing how I envisage this to work: https://github.com/wlav/cppyy/commit/2ebeacb9aa977497d9dffc8032302f3fc6d418ec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:595,deployability,contain,containers,595,"Added: https://github.com/wlav/CPyCppyy/commit/a02ceeb4c07a16fe084b8f23e979cb19b9347a05 . For convenience, it defaults to `PySequence_Check()` for non-cppyy objects. Note that as the ""TODO"" in that method says, it's possible to further refine `Sequence_Check` by verifying that the `operator[]()` takes and int-like argument and/or that the class defines a `__len__` of sorts. However, `PySequence_Check` doesn't do any of that either, so I've punted on that for now, but I can add if desired. The method does not check for `__iter__` as `PySequence_GetItem()` would fail for otherwise iterable containers (such as `std::list`). Here are some tests showing how I envisage this to work: https://github.com/wlav/cppyy/commit/2ebeacb9aa977497d9dffc8032302f3fc6d418ec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:405,reliability,doe,doesn,405,"Added: https://github.com/wlav/CPyCppyy/commit/a02ceeb4c07a16fe084b8f23e979cb19b9347a05 . For convenience, it defaults to `PySequence_Check()` for non-cppyy objects. Note that as the ""TODO"" in that method says, it's possible to further refine `Sequence_Check` by verifying that the `operator[]()` takes and int-like argument and/or that the class defines a `__len__` of sorts. However, `PySequence_Check` doesn't do any of that either, so I've punted on that for now, but I can add if desired. The method does not check for `__iter__` as `PySequence_GetItem()` would fail for otherwise iterable containers (such as `std::list`). Here are some tests showing how I envisage this to work: https://github.com/wlav/cppyy/commit/2ebeacb9aa977497d9dffc8032302f3fc6d418ec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:505,reliability,doe,does,505,"Added: https://github.com/wlav/CPyCppyy/commit/a02ceeb4c07a16fe084b8f23e979cb19b9347a05 . For convenience, it defaults to `PySequence_Check()` for non-cppyy objects. Note that as the ""TODO"" in that method says, it's possible to further refine `Sequence_Check` by verifying that the `operator[]()` takes and int-like argument and/or that the class defines a `__len__` of sorts. However, `PySequence_Check` doesn't do any of that either, so I've punted on that for now, but I can add if desired. The method does not check for `__iter__` as `PySequence_GetItem()` would fail for otherwise iterable containers (such as `std::list`). Here are some tests showing how I envisage this to work: https://github.com/wlav/cppyy/commit/2ebeacb9aa977497d9dffc8032302f3fc6d418ec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:567,reliability,fail,fail,567,"Added: https://github.com/wlav/CPyCppyy/commit/a02ceeb4c07a16fe084b8f23e979cb19b9347a05 . For convenience, it defaults to `PySequence_Check()` for non-cppyy objects. Note that as the ""TODO"" in that method says, it's possible to further refine `Sequence_Check` by verifying that the `operator[]()` takes and int-like argument and/or that the class defines a `__len__` of sorts. However, `PySequence_Check` doesn't do any of that either, so I've punted on that for now, but I can add if desired. The method does not check for `__iter__` as `PySequence_GetItem()` would fail for otherwise iterable containers (such as `std::list`). Here are some tests showing how I envisage this to work: https://github.com/wlav/cppyy/commit/2ebeacb9aa977497d9dffc8032302f3fc6d418ec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:643,safety,test,tests,643,"Added: https://github.com/wlav/CPyCppyy/commit/a02ceeb4c07a16fe084b8f23e979cb19b9347a05 . For convenience, it defaults to `PySequence_Check()` for non-cppyy objects. Note that as the ""TODO"" in that method says, it's possible to further refine `Sequence_Check` by verifying that the `operator[]()` takes and int-like argument and/or that the class defines a `__len__` of sorts. However, `PySequence_Check` doesn't do any of that either, so I've punted on that for now, but I can add if desired. The method does not check for `__iter__` as `PySequence_GetItem()` would fail for otherwise iterable containers (such as `std::list`). Here are some tests showing how I envisage this to work: https://github.com/wlav/cppyy/commit/2ebeacb9aa977497d9dffc8032302f3fc6d418ec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:263,testability,verif,verifying,263,"Added: https://github.com/wlav/CPyCppyy/commit/a02ceeb4c07a16fe084b8f23e979cb19b9347a05 . For convenience, it defaults to `PySequence_Check()` for non-cppyy objects. Note that as the ""TODO"" in that method says, it's possible to further refine `Sequence_Check` by verifying that the `operator[]()` takes and int-like argument and/or that the class defines a `__len__` of sorts. However, `PySequence_Check` doesn't do any of that either, so I've punted on that for now, but I can add if desired. The method does not check for `__iter__` as `PySequence_GetItem()` would fail for otherwise iterable containers (such as `std::list`). Here are some tests showing how I envisage this to work: https://github.com/wlav/cppyy/commit/2ebeacb9aa977497d9dffc8032302f3fc6d418ec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:643,testability,test,tests,643,"Added: https://github.com/wlav/CPyCppyy/commit/a02ceeb4c07a16fe084b8f23e979cb19b9347a05 . For convenience, it defaults to `PySequence_Check()` for non-cppyy objects. Note that as the ""TODO"" in that method says, it's possible to further refine `Sequence_Check` by verifying that the `operator[]()` takes and int-like argument and/or that the class defines a `__len__` of sorts. However, `PySequence_Check` doesn't do any of that either, so I've punted on that for now, but I can add if desired. The method does not check for `__iter__` as `PySequence_GetItem()` would fail for otherwise iterable containers (such as `std::list`). Here are some tests showing how I envisage this to work: https://github.com/wlav/cppyy/commit/2ebeacb9aa977497d9dffc8032302f3fc6d418ec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:52,deployability,updat,update,52,"Thanks a lot @wlav. @guitargeek, is there a plan to update `cppyy` soon so that we can give this a try? Many thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:52,safety,updat,update,52,"Thanks a lot @wlav. @guitargeek, is there a plan to update `cppyy` soon so that we can give this a try? Many thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:52,security,updat,update,52,"Thanks a lot @wlav. @guitargeek, is there a plan to update `cppyy` soon so that we can give this a try? Many thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/issues/15161:44,testability,plan,plan,44,"Thanks a lot @wlav. @guitargeek, is there a plan to update `cppyy` soon so that we can give this a try? Many thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161
https://github.com/root-project/root/pull/15162:68,energy efficiency,reduc,reduce,68,"This one was a good PR that spearheaded the solution of #15156 . To reduce the noise, feel free to close it in favour of https://github.com/root-project/root/pull/15163 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15162
https://github.com/root-project/root/pull/15162:99,usability,close,close,99,"This one was a good PR that spearheaded the solution of #15156 . To reduce the noise, feel free to close it in favour of https://github.com/root-project/root/pull/15163 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15162
https://github.com/root-project/root/pull/15162:0,usability,Close,Closed,0,Closed since replaced by #15163,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15162
https://github.com/root-project/root/pull/15163:0,usability,Close,Closes,0,Closes https://github.com/root-project/root/issues/15156.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15163
https://github.com/root-project/root/pull/15163:17,deployability,updat,updated,17,"@lmoneta, I have updated the PR with your suggestion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15163
https://github.com/root-project/root/pull/15163:17,safety,updat,updated,17,"@lmoneta, I have updated the PR with your suggestion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15163
https://github.com/root-project/root/pull/15163:17,security,updat,updated,17,"@lmoneta, I have updated the PR with your suggestion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15163
https://github.com/root-project/root/pull/15164:24,safety,test,test,24,"my bad, I need to fix a test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:24,testability,test,test,24,"my bad, I need to fix a test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:12,availability,error,errors,12,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:76,deployability,version,version,76,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:130,deployability,version,version,130,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:147,deployability,contain,contain,147,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:314,deployability,releas,release,314,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:359,deployability,fail,fail,359,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:372,deployability,build,builds,372,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:76,integrability,version,version,76,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:130,integrability,version,version,130,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:76,modifiability,version,version,76,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:130,modifiability,version,version,130,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:12,performance,error,errors,12,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:240,performance,perform,performance,240,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:138,reliability,doe,does,138,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:359,reliability,fail,fail,359,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:12,safety,error,errors,12,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:347,safety,test,tests,347,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:347,testability,test,tests,347,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:12,usability,error,errors,12,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:240,usability,perform,performance,240,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:29,deployability,updat,updated,29,This webpage will have to be updated as well https://root.cern/about/versioning/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:69,deployability,version,versioning,69,This webpage will have to be updated as well https://root.cern/about/versioning/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:69,integrability,version,versioning,69,This webpage will have to be updated as well https://root.cern/about/versioning/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:69,modifiability,version,versioning,69,This webpage will have to be updated as well https://root.cern/about/versioning/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:29,safety,updat,updated,29,This webpage will have to be updated as well https://root.cern/about/versioning/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:29,security,updat,updated,29,This webpage will have to be updated as well https://root.cern/about/versioning/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:219,deployability,updat,updating,219,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:166,energy efficiency,core,core,166,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:436,energy efficiency,adapt,adapting,436,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:436,integrability,adapt,adapting,436,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:436,interoperability,adapt,adapting,436,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:436,modifiability,adapt,adapting,436,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:62,reliability,doe,does,62,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:219,safety,updat,updating,219,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:362,safety,valid,valid,362,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:422,safety,test,testing,422,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:219,security,updat,updating,219,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:422,testability,test,testing,422,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15164:395,usability,confirm,confirm,395,"Found the issue with this PR, the problem is that `TROOT.cxx` does the following:. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/core/base/src/TROOT.cxx#L184-L189. This either needs updating or, better yet, use direct arithmetic. Note that the latter may not be trivial because `ROOT_VERSION_PATCH` may be `08` which isn't a valid octal literal... Edit: can confirm it passes my local testing after adapting the `scanf` invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15164
https://github.com/root-project/root/pull/15169:186,modifiability,reu,reused,186,"> Maybe worth looking if we can start adopting some parts of clang-repl, too? I worry that we duplicate efforts here. Yes, I agree. I will also look into parts of clang-repl that can be reused in cling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15169
https://github.com/root-project/root/pull/15172:201,deployability,fail,failed,201,"Yes, this works: https://github.com/root-project/root/actions/runs/8612110675/job/23600606865?pr=15172 reported `fatal: bad object 0f2bb474117bbdb396b94cead06e437471fe3ca5` (but didn't mark the job as failed?!) while https://github.com/root-project/root/actions/runs/8612131632/job/23600674821?pr=15172 correctly ran `clang-format`. Note that the action is still not ideal because `github.event.pull_request.base.sha` may be an updated commit that is not actually the merge base of the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15172
https://github.com/root-project/root/pull/15172:428,deployability,updat,updated,428,"Yes, this works: https://github.com/root-project/root/actions/runs/8612110675/job/23600606865?pr=15172 reported `fatal: bad object 0f2bb474117bbdb396b94cead06e437471fe3ca5` (but didn't mark the job as failed?!) while https://github.com/root-project/root/actions/runs/8612131632/job/23600674821?pr=15172 correctly ran `clang-format`. Note that the action is still not ideal because `github.event.pull_request.base.sha` may be an updated commit that is not actually the merge base of the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15172
https://github.com/root-project/root/pull/15172:389,integrability,event,event,389,"Yes, this works: https://github.com/root-project/root/actions/runs/8612110675/job/23600606865?pr=15172 reported `fatal: bad object 0f2bb474117bbdb396b94cead06e437471fe3ca5` (but didn't mark the job as failed?!) while https://github.com/root-project/root/actions/runs/8612131632/job/23600674821?pr=15172 correctly ran `clang-format`. Note that the action is still not ideal because `github.event.pull_request.base.sha` may be an updated commit that is not actually the merge base of the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15172
https://github.com/root-project/root/pull/15172:324,interoperability,format,format,324,"Yes, this works: https://github.com/root-project/root/actions/runs/8612110675/job/23600606865?pr=15172 reported `fatal: bad object 0f2bb474117bbdb396b94cead06e437471fe3ca5` (but didn't mark the job as failed?!) while https://github.com/root-project/root/actions/runs/8612131632/job/23600674821?pr=15172 correctly ran `clang-format`. Note that the action is still not ideal because `github.event.pull_request.base.sha` may be an updated commit that is not actually the merge base of the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15172
https://github.com/root-project/root/pull/15172:201,reliability,fail,failed,201,"Yes, this works: https://github.com/root-project/root/actions/runs/8612110675/job/23600606865?pr=15172 reported `fatal: bad object 0f2bb474117bbdb396b94cead06e437471fe3ca5` (but didn't mark the job as failed?!) while https://github.com/root-project/root/actions/runs/8612131632/job/23600674821?pr=15172 correctly ran `clang-format`. Note that the action is still not ideal because `github.event.pull_request.base.sha` may be an updated commit that is not actually the merge base of the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15172
https://github.com/root-project/root/pull/15172:428,safety,updat,updated,428,"Yes, this works: https://github.com/root-project/root/actions/runs/8612110675/job/23600606865?pr=15172 reported `fatal: bad object 0f2bb474117bbdb396b94cead06e437471fe3ca5` (but didn't mark the job as failed?!) while https://github.com/root-project/root/actions/runs/8612131632/job/23600674821?pr=15172 correctly ran `clang-format`. Note that the action is still not ideal because `github.event.pull_request.base.sha` may be an updated commit that is not actually the merge base of the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15172
https://github.com/root-project/root/pull/15172:428,security,updat,updated,428,"Yes, this works: https://github.com/root-project/root/actions/runs/8612110675/job/23600606865?pr=15172 reported `fatal: bad object 0f2bb474117bbdb396b94cead06e437471fe3ca5` (but didn't mark the job as failed?!) while https://github.com/root-project/root/actions/runs/8612131632/job/23600674821?pr=15172 correctly ran `clang-format`. Note that the action is still not ideal because `github.event.pull_request.base.sha` may be an updated commit that is not actually the merge base of the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15172
https://github.com/root-project/root/pull/15173:15,safety,review,review,15,"Thanks for the review! The only tutorial for that feature silently gives wrong results: IMO this is a bugfix, not a new feature. Also considering that there are people who would clearly benefit from this being in 6.32 (analysis grand challenge).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:15,testability,review,review,15,"Thanks for the review! The only tutorial for that feature silently gives wrong results: IMO this is a bugfix, not a new feature. Also considering that there are people who would clearly benefit from this being in 6.32 (analysis grand challenge).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:178,usability,clear,clearly,178,"Thanks for the review! The only tutorial for that feature silently gives wrong results: IMO this is a bugfix, not a new feature. Also considering that there are people who would clearly benefit from this being in 6.32 (analysis grand challenge).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:32,safety,review,review,32,"Hi @vepadulano, thanks for your review comments! I have addressed all of them, except for the CamelCase in the implementation details. I think since this code is copied from an external library and I might want to sync it again at some point, it should be kept as-is for now. Would that be okay for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:79,safety,except,except,79,"Hi @vepadulano, thanks for your review comments! I have addressed all of them, except for the CamelCase in the implementation details. I think since this code is copied from an external library and I might want to sync it again at some point, it should be kept as-is for now. Would that be okay for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:32,testability,review,review,32,"Hi @vepadulano, thanks for your review comments! I have addressed all of them, except for the CamelCase in the implementation details. I think since this code is copied from an external library and I might want to sync it again at some point, it should be kept as-is for now. Would that be okay for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:53,integrability,repositor,repository,53,"> Would that be okay for you? I would still like the repository to use the same casing everywhere, but probably if we look hard enough we can find other examples of functions not strictly following the CamelCase convention. For the purposes of this PR, as long as anything outside of `Internal` namespace or unnamed namespaces in compilation units follows CamelCase, I would be ok with it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:53,interoperability,repositor,repository,53,"> Would that be okay for you? I would still like the repository to use the same casing everywhere, but probably if we look hard enough we can find other examples of functions not strictly following the CamelCase convention. For the purposes of this PR, as long as anything outside of `Internal` namespace or unnamed namespaces in compilation units follows CamelCase, I would be ok with it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:342,testability,unit,units,342,"> Would that be okay for you? I would still like the repository to use the same casing everywhere, but probably if we look hard enough we can find other examples of functions not strictly following the CamelCase convention. For the purposes of this PR, as long as anything outside of `Internal` namespace or unnamed namespaces in compilation units follows CamelCase, I would be ok with it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:120,testability,unit,units,120,"> For the purposes of this PR, as long as anything outside of `Internal` namespace or unnamed namespaces in compilation units follows CamelCase, I would be ok with it. Yep that's the case! Everything not following the convention is in the anonymous namespace.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:23,deployability,instal,installed,23,"By the way, is xgboost installed in the new CI? If not, we are not testing these developments right now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:67,safety,test,testing,67,"By the way, is xgboost installed in the new CI? If not, we are not testing these developments right now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:67,testability,test,testing,67,"By the way, is xgboost installed in the new CI? If not, we are not testing these developments right now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:13,deployability,instal,installed,13,> is xgboost installed in the new CI. If it's not in https://github.com/root-project/root/blob/master/requirements.txt then it's not installed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:133,deployability,instal,installed,133,> is xgboost installed in the new CI. If it's not in https://github.com/root-project/root/blob/master/requirements.txt then it's not installed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:43,deployability,depend,dependencies,43,"But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. Related PR:. * https://github.com/root-project/root/pull/14685",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:43,integrability,depend,dependencies,43,"But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. Related PR:. * https://github.com/root-project/root/pull/14685",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:43,modifiability,depend,dependencies,43,"But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. Related PR:. * https://github.com/root-project/root/pull/14685",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:43,safety,depend,dependencies,43,"But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. Related PR:. * https://github.com/root-project/root/pull/14685",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:43,testability,depend,dependencies,43,"But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. Related PR:. * https://github.com/root-project/root/pull/14685",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:45,deployability,depend,dependencies,45,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:75,deployability,contain,contains,75,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:103,deployability,depend,dependencies,103,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:130,deployability,depend,dependencies,130,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:45,integrability,depend,dependencies,45,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:103,integrability,depend,dependencies,103,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:130,integrability,depend,dependencies,130,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:45,modifiability,depend,dependencies,45,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:103,modifiability,depend,dependencies,103,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:130,modifiability,depend,dependencies,130,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:45,safety,depend,dependencies,45,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:103,safety,depend,dependencies,103,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:130,safety,depend,dependencies,130,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:45,testability,depend,dependencies,45,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:103,testability,depend,dependencies,103,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:130,testability,depend,dependencies,130,> But should we explicitly add optional ROOT dependencies there? That file contains only optional ROOT dependencies (i.e. runtime dependencies),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:45,deployability,depend,dependencies,45,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:153,deployability,depend,dependencies,153,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:194,deployability,instal,installed,194,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:45,integrability,depend,dependencies,45,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:153,integrability,depend,dependencies,153,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:45,modifiability,depend,dependencies,45,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:153,modifiability,depend,dependencies,153,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:45,safety,depend,dependencies,45,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:153,safety,depend,dependencies,153,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:45,testability,depend,dependencies,45,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:153,testability,depend,dependencies,153,"> But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. This won't work, dependencies from `requirements.txt` are installed directly into the CI image which is generated once per night based on `master`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:94,energy efficiency,core,cores,94,"With help from Jonas, I tested this PR in the context of AGC (for now locally on my PC with 8 cores) and it works - the ml histograms are produced.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:24,safety,test,tested,24,"With help from Jonas, I tested this PR in the context of AGC (for now locally on my PC with 8 cores) and it works - the ml histograms are produced.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:24,testability,test,tested,24,"With help from Jonas, I tested this PR in the context of AGC (for now locally on my PC with 8 cores) and it works - the ml histograms are produced.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:46,testability,context,context,46,"With help from Jonas, I tested this PR in the context of AGC (for now locally on my PC with 8 cores) and it works - the ml histograms are produced.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:5,usability,help,help,5,"With help from Jonas, I tested this PR in the context of AGC (for now locally on my PC with 8 cores) and it works - the ml histograms are produced.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:75,deployability,instal,installed,75,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:35,safety,test,tested,35,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:92,safety,Test,Test,92,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:185,safety,Test,Test,185,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:277,safety,Test,Test,277,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:369,safety,Test,Test,369,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:656,safety,valid,validated,656,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:656,security,validat,validated,656,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:35,testability,test,tested,35,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:92,testability,Test,Test,92,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:185,testability,Test,Test,185,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:277,testability,Test,Test,277,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:369,testability,Test,Test,369,"Finally the changes in this PR are tested. The `macOS 13` node had XGBoost installed:. ```. Test #1399: tutorial-tmva-tmva101_Training-py ............................ Passed 22.84 sec. Test #1400: tutorial-tmva-tmva102_Testing-py ............................. Passed 4.02 sec. Test #1083: tutorial-tmva-tmva103_Application ............................ Passed 9.33 sec. Test #390: pyunittests-rbdt-xgboost ..................................... Passed 4.93 sec. ```. The `pyunittests-rbdt-xgboost` that had to be disabled before is passing as well. The tutorials were passing before this PR already, because the BDT scores were only plotted and printed, not validated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:114,testability,understand,understanding,114,"> The only tutorial for that feature silently gives wrong results: IMO this is a bugfix, not a new feature. So my understanding is that this never worked, right? Which also makes me doubt that there are any users that try to use this feature. I think in that case, we should seriously ask ourselves if we should support that at all... In any case, I remain unconvinced that a `+528 −939` PR is appropriate for backporting after branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:207,usability,user,users,207,"> The only tutorial for that feature silently gives wrong results: IMO this is a bugfix, not a new feature. So my understanding is that this never worked, right? Which also makes me doubt that there are any users that try to use this feature. I think in that case, we should seriously ask ourselves if we should support that at all... In any case, I remain unconvinced that a `+528 −939` PR is appropriate for backporting after branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:312,usability,support,support,312,"> The only tutorial for that feature silently gives wrong results: IMO this is a bugfix, not a new feature. So my understanding is that this never worked, right? Which also makes me doubt that there are any users that try to use this feature. I think in that case, we should seriously ask ourselves if we should support that at all... In any case, I remain unconvinced that a `+528 −939` PR is appropriate for backporting after branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:149,energy efficiency,model,models,149,"Thanks Jonas for the valid concern. There are some people who tried to use RBDT, and even people who noticed the problem or wrong values for XGBoost models:. https://root-forum.cern.ch/search?q=Rbdt. Also, the plan to ""consolidate RBDT"" was announced in the PoW 2024 and at several presentations, so at this point dropping the feature is not an option I think. I agree with you that if a feature gave wrong results in the tutorial and nobody opened an issue about it for 5 years: doesn't exactly speak for the relevance of the feature (or maybe we didn't advertise it enough?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:27,modifiability,concern,concern,27,"Thanks Jonas for the valid concern. There are some people who tried to use RBDT, and even people who noticed the problem or wrong values for XGBoost models:. https://root-forum.cern.ch/search?q=Rbdt. Also, the plan to ""consolidate RBDT"" was announced in the PoW 2024 and at several presentations, so at this point dropping the feature is not an option I think. I agree with you that if a feature gave wrong results in the tutorial and nobody opened an issue about it for 5 years: doesn't exactly speak for the relevance of the feature (or maybe we didn't advertise it enough?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:480,reliability,doe,doesn,480,"Thanks Jonas for the valid concern. There are some people who tried to use RBDT, and even people who noticed the problem or wrong values for XGBoost models:. https://root-forum.cern.ch/search?q=Rbdt. Also, the plan to ""consolidate RBDT"" was announced in the PoW 2024 and at several presentations, so at this point dropping the feature is not an option I think. I agree with you that if a feature gave wrong results in the tutorial and nobody opened an issue about it for 5 years: doesn't exactly speak for the relevance of the feature (or maybe we didn't advertise it enough?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:21,safety,valid,valid,21,"Thanks Jonas for the valid concern. There are some people who tried to use RBDT, and even people who noticed the problem or wrong values for XGBoost models:. https://root-forum.cern.ch/search?q=Rbdt. Also, the plan to ""consolidate RBDT"" was announced in the PoW 2024 and at several presentations, so at this point dropping the feature is not an option I think. I agree with you that if a feature gave wrong results in the tutorial and nobody opened an issue about it for 5 years: doesn't exactly speak for the relevance of the feature (or maybe we didn't advertise it enough?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:149,security,model,models,149,"Thanks Jonas for the valid concern. There are some people who tried to use RBDT, and even people who noticed the problem or wrong values for XGBoost models:. https://root-forum.cern.ch/search?q=Rbdt. Also, the plan to ""consolidate RBDT"" was announced in the PoW 2024 and at several presentations, so at this point dropping the feature is not an option I think. I agree with you that if a feature gave wrong results in the tutorial and nobody opened an issue about it for 5 years: doesn't exactly speak for the relevance of the feature (or maybe we didn't advertise it enough?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:27,testability,concern,concern,27,"Thanks Jonas for the valid concern. There are some people who tried to use RBDT, and even people who noticed the problem or wrong values for XGBoost models:. https://root-forum.cern.ch/search?q=Rbdt. Also, the plan to ""consolidate RBDT"" was announced in the PoW 2024 and at several presentations, so at this point dropping the feature is not an option I think. I agree with you that if a feature gave wrong results in the tutorial and nobody opened an issue about it for 5 years: doesn't exactly speak for the relevance of the feature (or maybe we didn't advertise it enough?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:210,testability,plan,plan,210,"Thanks Jonas for the valid concern. There are some people who tried to use RBDT, and even people who noticed the problem or wrong values for XGBoost models:. https://root-forum.cern.ch/search?q=Rbdt. Also, the plan to ""consolidate RBDT"" was announced in the PoW 2024 and at several presentations, so at this point dropping the feature is not an option I think. I agree with you that if a feature gave wrong results in the tutorial and nobody opened an issue about it for 5 years: doesn't exactly speak for the relevance of the feature (or maybe we didn't advertise it enough?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:291,energy efficiency,model,models,291,"On top of your already very valid comments, I wanted to add that one point in favour of the relevance of such a feature is that it was initially present in CMSSW, so evaluation of BDTs in experiment frameworks is still a thing. Providing a thin layer to import the de-facto standard xgboost models into a C++ execution environment just seems the right thing to do. Since this feature was sort-of-present-but-utterly-broken before, it makes sense imho to fix it in our codebase. Then I guess the question of eventually removing the feature completely and have it as a standalone library is still valid (for ROOT7 perhaps).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:507,integrability,event,eventually,507,"On top of your already very valid comments, I wanted to add that one point in favour of the relevance of such a feature is that it was initially present in CMSSW, so evaluation of BDTs in experiment frameworks is still a thing. Providing a thin layer to import the de-facto standard xgboost models into a C++ execution environment just seems the right thing to do. Since this feature was sort-of-present-but-utterly-broken before, it makes sense imho to fix it in our codebase. Then I guess the question of eventually removing the feature completely and have it as a standalone library is still valid (for ROOT7 perhaps).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:274,interoperability,standard,standard,274,"On top of your already very valid comments, I wanted to add that one point in favour of the relevance of such a feature is that it was initially present in CMSSW, so evaluation of BDTs in experiment frameworks is still a thing. Providing a thin layer to import the de-facto standard xgboost models into a C++ execution environment just seems the right thing to do. Since this feature was sort-of-present-but-utterly-broken before, it makes sense imho to fix it in our codebase. Then I guess the question of eventually removing the feature completely and have it as a standalone library is still valid (for ROOT7 perhaps).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:245,modifiability,layer,layer,245,"On top of your already very valid comments, I wanted to add that one point in favour of the relevance of such a feature is that it was initially present in CMSSW, so evaluation of BDTs in experiment frameworks is still a thing. Providing a thin layer to import the de-facto standard xgboost models into a C++ execution environment just seems the right thing to do. Since this feature was sort-of-present-but-utterly-broken before, it makes sense imho to fix it in our codebase. Then I guess the question of eventually removing the feature completely and have it as a standalone library is still valid (for ROOT7 perhaps).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:28,safety,valid,valid,28,"On top of your already very valid comments, I wanted to add that one point in favour of the relevance of such a feature is that it was initially present in CMSSW, so evaluation of BDTs in experiment frameworks is still a thing. Providing a thin layer to import the de-facto standard xgboost models into a C++ execution environment just seems the right thing to do. Since this feature was sort-of-present-but-utterly-broken before, it makes sense imho to fix it in our codebase. Then I guess the question of eventually removing the feature completely and have it as a standalone library is still valid (for ROOT7 perhaps).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:539,safety,compl,completely,539,"On top of your already very valid comments, I wanted to add that one point in favour of the relevance of such a feature is that it was initially present in CMSSW, so evaluation of BDTs in experiment frameworks is still a thing. Providing a thin layer to import the de-facto standard xgboost models into a C++ execution environment just seems the right thing to do. Since this feature was sort-of-present-but-utterly-broken before, it makes sense imho to fix it in our codebase. Then I guess the question of eventually removing the feature completely and have it as a standalone library is still valid (for ROOT7 perhaps).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:595,safety,valid,valid,595,"On top of your already very valid comments, I wanted to add that one point in favour of the relevance of such a feature is that it was initially present in CMSSW, so evaluation of BDTs in experiment frameworks is still a thing. Providing a thin layer to import the de-facto standard xgboost models into a C++ execution environment just seems the right thing to do. Since this feature was sort-of-present-but-utterly-broken before, it makes sense imho to fix it in our codebase. Then I guess the question of eventually removing the feature completely and have it as a standalone library is still valid (for ROOT7 perhaps).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:291,security,model,models,291,"On top of your already very valid comments, I wanted to add that one point in favour of the relevance of such a feature is that it was initially present in CMSSW, so evaluation of BDTs in experiment frameworks is still a thing. Providing a thin layer to import the de-facto standard xgboost models into a C++ execution environment just seems the right thing to do. Since this feature was sort-of-present-but-utterly-broken before, it makes sense imho to fix it in our codebase. Then I guess the question of eventually removing the feature completely and have it as a standalone library is still valid (for ROOT7 perhaps).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:539,security,compl,completely,539,"On top of your already very valid comments, I wanted to add that one point in favour of the relevance of such a feature is that it was initially present in CMSSW, so evaluation of BDTs in experiment frameworks is still a thing. Providing a thin layer to import the de-facto standard xgboost models into a C++ execution environment just seems the right thing to do. Since this feature was sort-of-present-but-utterly-broken before, it makes sense imho to fix it in our codebase. Then I guess the question of eventually removing the feature completely and have it as a standalone library is still valid (for ROOT7 perhaps).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:106,modifiability,pac,packagers,106,"Actually I think users don't use the GitHub issue tracker that much in general. It's mostly used by devs, packagers, and experiment framework developers. So maybe it's normal we didn't hear about the problem there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:17,usability,user,users,17,"Actually I think users don't use the GitHub issue tracker that much in general. It's mostly used by devs, packagers, and experiment framework developers. So maybe it's normal we didn't hear about the problem there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:564,deployability,API,API,564,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:602,deployability,API,API,602,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:22,energy efficiency,current,current,22,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:361,energy efficiency,model,models,361,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:564,integrability,API,API,564,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:602,integrability,API,API,602,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:564,interoperability,API,API,564,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:602,interoperability,API,API,602,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:361,security,model,models,361,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:30,testability,understand,understanding,30,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:540,testability,hook,hook,540,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:293,usability,user,users,293,"I have summarized the current understanding of the situation with RBDT at https://github.com/root-project/root/issues/15197. Given that, I believe we should not merge this at the moment (and thus not push for it being in 6.32). An investigation is required regarding how to provide our Python users with what they probably want in this case: evaluating xgboost models in a ROOT application. This may be served by the changes of this PR. But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:146,deployability,API,API,146,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:184,deployability,API,API,184,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:220,deployability,API,API,220,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:368,deployability,continu,continue,368,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:146,integrability,API,API,146,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:184,integrability,API,API,184,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:220,integrability,API,API,220,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:146,interoperability,API,API,146,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:184,interoperability,API,API,184,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:220,interoperability,API,API,220,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:324,performance,multi-thread,multi-threading,324,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:243,reliability,doe,doesn,243,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:234,safety,safe,safe,234,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:122,testability,hook,hook,122,"Awesome, thanks! > But an alternative is also forgoing an internal implementation a-la RBDT and just try to see if we can hook the xgboost Python API directly into e.g. the RDataFrame API. I don't think that the XGBoost API is thread safe (it doesn't have to be because of the GIL), so that might be a problem with implicit multi-threading in RDataFrame. I'm happy to continue the discussion later, but just for the record my 2 cents: I would still consider this a bugfix for 6.32.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:361,deployability,fail,failing,361,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:335,energy efficiency,green,green,335,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:103,integrability,discover,discovered,103,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:103,interoperability,discover,discovered,103,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:258,interoperability,specif,specific,258,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:414,interoperability,platform,platforms,414,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:361,reliability,fail,failing,361,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:145,safety,avoid,avoid,145,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:369,safety,test,test,369,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:407,safety,test,tested,407,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:48,security,team,team,48,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:369,testability,test,test,369,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:407,testability,test,tested,407,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:103,usability,discov,discovered,103,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:114,availability,failur,failures,114,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:11,deployability,instal,installed,11,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:114,deployability,fail,failures,114,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:242,deployability,version,version,242,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:177,energy efficiency,cpu,cpu,177,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:283,energy efficiency,CPU,CPU,283,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:242,integrability,version,version,242,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:191,interoperability,platform,platform,191,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:242,modifiability,version,version,242,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:114,performance,failur,failures,114,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:177,performance,cpu,cpu,177,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:283,performance,CPU,CPU,283,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:114,reliability,fail,failures,114,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:31,safety,review,review,31,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15173:31,testability,review,review,31,"I have now installed the final review comments about the `fMember` style by @vepadulano. Furthermore, the `alma9` failures should be gone now, because we have deactivated `tmva-cpu` for this platform. Like this, the collision of the openblas version on the system (picked up by TMVA-CPU) and by NumPy should not happen.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173
https://github.com/root-project/root/pull/15176:132,safety,prevent,preventing,132,@will-cern do you have by chance your analysis lying around and can you verify whether the results now look correct? Or are we just preventing the crash but the plot is still wrong?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:132,security,preven,preventing,132,@will-cern do you have by chance your analysis lying around and can you verify whether the results now look correct? Or are we just preventing the crash but the plot is still wrong?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:72,testability,verif,verify,72,@will-cern do you have by chance your analysis lying around and can you verify whether the results now look correct? Or are we just preventing the crash but the plot is still wrong?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:52,interoperability,specif,specific,52,> (i.e. raise an exception). Quick reaction on that specific solution: None of the code in `TTreeFormula` or `TTree` took exceptions in consideration and should consider not exception-safe.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:17,safety,except,exception,17,> (i.e. raise an exception). Quick reaction on that specific solution: None of the code in `TTreeFormula` or `TTree` took exceptions in consideration and should consider not exception-safe.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:122,safety,except,exceptions,122,> (i.e. raise an exception). Quick reaction on that specific solution: None of the code in `TTreeFormula` or `TTree` took exceptions in consideration and should consider not exception-safe.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:174,safety,except,exception-safe,174,> (i.e. raise an exception). Quick reaction on that specific solution: None of the code in `TTreeFormula` or `TTree` took exceptions in consideration and should consider not exception-safe.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:20,deployability,log,logic,20,"I rest my case, the logic in TTreeFormula is better served by the current status of the PR rather than my previous suggestion. My only remaining suggestion is to add a test right away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:66,energy efficiency,current,current,66,"I rest my case, the logic in TTreeFormula is better served by the current status of the PR rather than my previous suggestion. My only remaining suggestion is to add a test right away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:20,safety,log,logic,20,"I rest my case, the logic in TTreeFormula is better served by the current status of the PR rather than my previous suggestion. My only remaining suggestion is to add a test right away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:168,safety,test,test,168,"I rest my case, the logic in TTreeFormula is better served by the current status of the PR rather than my previous suggestion. My only remaining suggestion is to add a test right away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:20,security,log,logic,20,"I rest my case, the logic in TTreeFormula is better served by the current status of the PR rather than my previous suggestion. My only remaining suggestion is to add a test right away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:20,testability,log,logic,20,"I rest my case, the logic in TTreeFormula is better served by the current status of the PR rather than my previous suggestion. My only remaining suggestion is to add a test right away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:168,testability,test,test,168,"I rest my case, the logic in TTreeFormula is better served by the current status of the PR rather than my previous suggestion. My only remaining suggestion is to add a test right away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:74,usability,statu,status,74,"I rest my case, the logic in TTreeFormula is better served by the current status of the PR rather than my previous suggestion. My only remaining suggestion is to add a test right away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:31,safety,review,review,31,> LGTM. Thanks. Thanks for the review @pcanal!! Please remember to close the 3 associated JIRA issues. One of them is closed but needs a change from cannot-reproduce to fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:55,safety,reme,remember,55,> LGTM. Thanks. Thanks for the review @pcanal!! Please remember to close the 3 associated JIRA issues. One of them is closed but needs a change from cannot-reproduce to fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:31,testability,review,review,31,> LGTM. Thanks. Thanks for the review @pcanal!! Please remember to close the 3 associated JIRA issues. One of them is closed but needs a change from cannot-reproduce to fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:67,usability,close,close,67,> LGTM. Thanks. Thanks for the review @pcanal!! Please remember to close the 3 associated JIRA issues. One of them is closed but needs a change from cannot-reproduce to fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15176:118,usability,close,closed,118,> LGTM. Thanks. Thanks for the review @pcanal!! Please remember to close the 3 associated JIRA issues. One of them is closed but needs a change from cannot-reproduce to fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15176
https://github.com/root-project/root/pull/15177:21,availability,error,errors,21,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:45,availability,Error,Error,45,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:122,availability,error,error,122,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:15,deployability,build,build,15,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:21,performance,error,errors,21,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:45,performance,Error,Error,45,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:122,performance,error,error,122,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:21,safety,error,errors,21,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:45,safety,Error,Error,45,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:122,safety,error,error,122,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:21,usability,error,errors,21,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:45,usability,Error,Error,45,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:122,usability,error,error,122,"There are some build errors in the CI:. ```. Error: /github/home/ROOT-CI/src/roofit/xroofit/src/xRooNode.cxx:97:10: fatal error: TFitParametersDialog.h: No such file or directory. 97 | #include ""TFitParametersDialog.h"". | ^~~~~~~~~~~~~~~~~~~~~~~~. ```. Did you forget to push this file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:59,deployability,depend,dependency,59,"> Did you forget to push this file? I think it's a missing dependency of libFitPanel.so (https://root.cern.ch/doc/master/classTFitParametersDialog.html), I tried adding it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:59,integrability,depend,dependency,59,"> Did you forget to push this file? I think it's a missing dependency of libFitPanel.so (https://root.cern.ch/doc/master/classTFitParametersDialog.html), I tried adding it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:59,modifiability,depend,dependency,59,"> Did you forget to push this file? I think it's a missing dependency of libFitPanel.so (https://root.cern.ch/doc/master/classTFitParametersDialog.html), I tried adding it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:59,safety,depend,dependency,59,"> Did you forget to push this file? I think it's a missing dependency of libFitPanel.so (https://root.cern.ch/doc/master/classTFitParametersDialog.html), I tried adding it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/pull/15177:59,testability,depend,dependency,59,"> Did you forget to push this file? I think it's a missing dependency of libFitPanel.so (https://root.cern.ch/doc/master/classTFitParametersDialog.html), I tried adding it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15177
https://github.com/root-project/root/issues/15178:28,deployability,releas,releases,28,This one: https://root.cern/releases/release-63006/#source-distribution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15178
https://github.com/root-project/root/issues/15178:37,deployability,releas,release-,37,This one: https://root.cern/releases/release-63006/#source-distribution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15178
https://github.com/root-project/root/issues/15178:59,interoperability,distribut,distribution,59,This one: https://root.cern/releases/release-63006/#source-distribution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15178
https://github.com/root-project/root/issues/15178:48,deployability,build,builds,48,We this this problem also in ATLAS AnalysisBase builds that use the source code tarball of 6.32/02 - is there a recommended work-around ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15178
https://github.com/root-project/root/pull/15180:8,availability,failur,failures,8,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:42,availability,FAILUR,FAILURES,42,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:8,deployability,fail,failures,8,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:42,deployability,FAIL,FAILURES,42,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:225,deployability,loader,loadernotapp-build,225,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:269,deployability,loader,loadernotapp,269,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:338,deployability,build,build,338,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:225,energy efficiency,load,loadernotapp-build,225,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:269,energy efficiency,load,loadernotapp,269,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:8,performance,failur,failures,8,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:42,performance,FAILUR,FAILURES,42,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:225,performance,load,loadernotapp-build,225,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:269,performance,load,loadernotapp,269,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:8,reliability,fail,failures,8,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:42,reliability,FAIL,FAILURES,42,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:37,safety,TEST,TEST,37,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:37,testability,TEST,TEST,37,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15180:325,testability,emul,emulatePairs-build,325,Windows failures unrelated:. ```txt. TEST FAILURES:. 1330:roottest-cling-template-runtemplatefriend. 1736:roottest-root-io-transient-base-WriteFile. 1737:roottest-root-io-transient-base-hadd_autoload. 1785:roottest-root-meta-loadernotapp-build. 1786:roottest-root-meta-loadernotapp. 2090:roottest-root-meta-tclass-issue-6840-emulatePairs-build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15180
https://github.com/root-project/root/pull/15182:94,performance,Cach,Cache,94,"As a stand alone function, it works as expected, but applying it before other actions, namely Cache and Foreach, distorts them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15182
https://github.com/root-project/root/pull/15182:241,performance,Cach,Cache,241,"Made the requested changes, added a test. This function has nothing to do with `Foreach` as previously reported. It only works with dataframes that are made out of `TTree` or `TChain` as intended, thus, it does not with a dataframe that is `Cache`d.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15182
https://github.com/root-project/root/pull/15182:206,reliability,doe,does,206,"Made the requested changes, added a test. This function has nothing to do with `Foreach` as previously reported. It only works with dataframes that are made out of `TTree` or `TChain` as intended, thus, it does not with a dataframe that is `Cache`d.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15182
https://github.com/root-project/root/pull/15182:36,safety,test,test,36,"Made the requested changes, added a test. This function has nothing to do with `Foreach` as previously reported. It only works with dataframes that are made out of `TTree` or `TChain` as intended, thus, it does not with a dataframe that is `Cache`d.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15182
https://github.com/root-project/root/pull/15182:36,testability,test,test,36,"Made the requested changes, added a test. This function has nothing to do with `Foreach` as previously reported. It only works with dataframes that are made out of `TTree` or `TChain` as intended, thus, it does not with a dataframe that is `Cache`d.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15182
https://github.com/root-project/root/pull/15183:20,deployability,fail,fail,20,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:478,deployability,instal,installation,478,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:625,deployability,instal,installed,625,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:6,interoperability,platform,platform,6,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:413,interoperability,platform,platforms,413,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:358,modifiability,pac,packages,358,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:498,modifiability,pac,package,498,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:617,modifiability,pac,package,617,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:20,reliability,fail,fail,20,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:328,safety,test,test,328,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:323,testability,unit,unit,323,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:328,testability,test,test,328,"Every platform will fail for the following reasons:. * On linux, because the images at https://github.com/root-project/root-ci-images only pick up the requirements.txt file from master, and are rebuilt nightly. The changes in this PR are not picked up by the linux images, but they are seen by the `dependency_versions.py` unit test which checks for all the packages present in the `requirements.txt`. * On other platforms, also because this addition will not trigger an actual installation of the package. The issue here is that if we merge this as-is, our nightlies will go red until every non-linux node gets this package installed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:34,deployability,instal,installing,34,"Thank you so much @vepadulano for installing the packages on the mac nodes! The existing RBDT tests are failing, which is good to see so that means they are executed. It's probably the first time ever they get run with XGBoost 2.0 on any CI. I will add a commit that fixes the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:104,deployability,fail,failing,104,"Thank you so much @vepadulano for installing the packages on the mac nodes! The existing RBDT tests are failing, which is good to see so that means they are executed. It's probably the first time ever they get run with XGBoost 2.0 on any CI. I will add a commit that fixes the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:49,modifiability,pac,packages,49,"Thank you so much @vepadulano for installing the packages on the mac nodes! The existing RBDT tests are failing, which is good to see so that means they are executed. It's probably the first time ever they get run with XGBoost 2.0 on any CI. I will add a commit that fixes the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:191,performance,time,time,191,"Thank you so much @vepadulano for installing the packages on the mac nodes! The existing RBDT tests are failing, which is good to see so that means they are executed. It's probably the first time ever they get run with XGBoost 2.0 on any CI. I will add a commit that fixes the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:104,reliability,fail,failing,104,"Thank you so much @vepadulano for installing the packages on the mac nodes! The existing RBDT tests are failing, which is good to see so that means they are executed. It's probably the first time ever they get run with XGBoost 2.0 on any CI. I will add a commit that fixes the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:94,safety,test,tests,94,"Thank you so much @vepadulano for installing the packages on the mac nodes! The existing RBDT tests are failing, which is good to see so that means they are executed. It's probably the first time ever they get run with XGBoost 2.0 on any CI. I will add a commit that fixes the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:277,safety,test,tests,277,"Thank you so much @vepadulano for installing the packages on the mac nodes! The existing RBDT tests are failing, which is good to see so that means they are executed. It's probably the first time ever they get run with XGBoost 2.0 on any CI. I will add a commit that fixes the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:94,testability,test,tests,94,"Thank you so much @vepadulano for installing the packages on the mac nodes! The existing RBDT tests are failing, which is good to see so that means they are executed. It's probably the first time ever they get run with XGBoost 2.0 on any CI. I will add a commit that fixes the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:277,testability,test,tests,277,"Thank you so much @vepadulano for installing the packages on the mac nodes! The existing RBDT tests are failing, which is good to see so that means they are executed. It's probably the first time ever they get run with XGBoost 2.0 on any CI. I will add a commit that fixes the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:26,performance,time,time,26,> It's probably the first time ever they get run with XGBoost 2.0 on any CI. It is the first time ever they are run! https://github.com/root-project/root/blob/e3aecd6e49fe19a323c1fcc56572eb99c6f1b46e/tmva/tmva/test/CMakeLists.txt#L34-L39,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:93,performance,time,time,93,> It's probably the first time ever they get run with XGBoost 2.0 on any CI. It is the first time ever they are run! https://github.com/root-project/root/blob/e3aecd6e49fe19a323c1fcc56572eb99c6f1b46e/tmva/tmva/test/CMakeLists.txt#L34-L39,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:210,safety,test,test,210,> It's probably the first time ever they get run with XGBoost 2.0 on any CI. It is the first time ever they are run! https://github.com/root-project/root/blob/e3aecd6e49fe19a323c1fcc56572eb99c6f1b46e/tmva/tmva/test/CMakeLists.txt#L34-L39,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:210,testability,test,test,210,> It's probably the first time ever they get run with XGBoost 2.0 on any CI. It is the first time ever they are run! https://github.com/root-project/root/blob/e3aecd6e49fe19a323c1fcc56572eb99c6f1b46e/tmva/tmva/test/CMakeLists.txt#L34-L39,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:142,deployability,releas,released,142,Great that we see the result of these tests now. I added a commit to fix them (the breakage was because of some major changes in the recently-released XGBoost 2.0).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:38,safety,test,tests,38,Great that we see the result of these tests now. I added a commit to fix them (the breakage was because of some major changes in the recently-released XGBoost 2.0).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:38,testability,test,tests,38,Great that we see the result of these tests now. I added a commit to fix them (the breakage was because of some major changes in the recently-released XGBoost 2.0).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:95,availability,error,errors,95,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1084,availability,operat,operator,1084,"ies of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1257,deployability,FAIL,FAIL,1257,"XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1963,deployability,Version,Versions,1963,"[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2380,deployability,Version,Versions,2380," binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test sh",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1366,energy efficiency,model,model,1366,"""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1963,integrability,Version,Versions,1963,"[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2380,integrability,Version,Versions,2380," binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test sh",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:568,interoperability,format,format,568,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2731,interoperability,Mismatch,Mismatched,2731,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1963,modifiability,Version,Versions,1963,"[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2149,modifiability,pac,packages,2149,"number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2380,modifiability,Version,Versions,2380," binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test sh",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2566,modifiability,pac,packages,2566,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:95,performance,error,errors,95,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1257,reliability,FAIL,FAIL,1257,"XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:27,safety,test,tested,27,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:95,safety,error,errors,95,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:110,safety,test,test,110,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:218,safety,test,test,218,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:434,safety,test,test,434,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:542,safety,test,testXGBRegression,542,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:660,safety,test,testing,660,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:873,safety,test,testing,873,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1332,safety,Test,Test,1332,"ssForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/pyt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1576,safety,test,test,1576,"el), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/num",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1783,safety,test,test,1783," len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1838,safety,test,testing,1838,"/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.783111",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2164,safety,test,testing,2164,"eType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.55582",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2581,safety,test,testing,2581,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:3283,safety,test,test,3283,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:3328,safety,test,test,3328,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:3337,safety,avoid,avoid,3337,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:3377,safety,test,test,3377,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1366,security,model,model,1366,"""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:27,testability,test,tested,27,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:110,testability,test,test,110,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:121,testability,Trace,Traceback,121,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:218,testability,test,test,218,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:434,testability,test,test,434,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:542,testability,test,testXGBRegression,542,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:660,testability,test,testing,660,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:873,testability,test,testing,873,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1332,testability,Test,Test,1332,"ssForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/pyt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1479,testability,Trace,Traceback,1479,"sion. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1576,testability,test,test,1576,"el), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/num",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1783,testability,test,test,1783," len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1838,testability,test,testing,1838,"/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.783111",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1992,testability,context,contextlib,1992,"de[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2164,testability,test,testing,2164,"eType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.55582",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2409,testability,context,contextlib,2409,"---------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by htt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2581,testability,test,testing,2581,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2650,testability,Assert,AssertionError,2650,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2671,testability,Assert,AssertionError,2671,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:3283,testability,test,test,3283,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:3328,testability,test,test,3328,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:3377,testability,test,test,3377,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:95,usability,error,errors,95,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:164,usability,User,Users,164,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:380,usability,User,Users,380,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:606,usability,User,Users,606,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:819,usability,User,Users,819,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test. ```. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless. _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1522,usability,User,Users,1522,"xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:1729,usability,User,Users,1729,"aveXGBoost. fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree). File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays. thresholds[thresholds_base + index] = node[""leaf""]. ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. M",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2083,usability,User,Users,2083,"erator[](vector<float>::size_type __n) =>. TypeError: must be real number, not NoneType. ```. ```. ======================================================================. FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless). Test BranchlessForest backend for model trained with binary XGBClassifier. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.8127",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:2500,usability,User,Users,2500,"all last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behav",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15183:3498,usability,behavi,behaviour,3498,"last):. File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless. _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""). File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary. np.testing.assert_array_almost_equal(y_xgb, y_bdt). File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal. assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,. File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner. return func(*args, **kwds). ^^^^^^^^^^^^^^^^^^^. File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare. raise AssertionError(msg). AssertionError:. Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%). Max absolute difference: 0.34220904. Max relative difference: 0.78311133. x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,. 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,. 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,... y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,. 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,. 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,... ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15183
https://github.com/root-project/root/pull/15191:152,integrability,configur,configure,152,"Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? @bellenot you already implemented such a CMakeLists.txt for Windows, right? Would it be doable also for the other platforms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:284,interoperability,platform,platforms,284,"Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? @bellenot you already implemented such a CMakeLists.txt for Windows, right? Would it be doable also for the other platforms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:152,modifiability,configur,configure,152,"Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? @bellenot you already implemented such a CMakeLists.txt for Windows, right? Would it be doable also for the other platforms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:152,security,configur,configure,152,"Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? @bellenot you already implemented such a CMakeLists.txt for Windows, right? Would it be doable also for the other platforms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:116,interoperability,platform,platforms,116,"> @bellenot you already implemented such a CMakeLists.txt for Windows, right? Would it be doable also for the other platforms? I guess so",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:205,deployability,build,build,205,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:319,deployability,configurat,configuration,319,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:505,deployability,build,build,505,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:654,deployability,build,build,654,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:154,integrability,configur,configure,154,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:319,integrability,configur,configuration,319,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:415,integrability,configur,configure,415,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:479,interoperability,convers,conversion,479,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:589,interoperability,platform,platforms,589,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:154,modifiability,configur,configure,154,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:319,modifiability,configur,configuration,319,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:415,modifiability,configur,configure,415,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:357,reliability,doe,does,357,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:154,security,configur,configure,154,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:319,security,configur,configuration,319,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:415,security,configur,configure,415,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:366,usability,support,support,366,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:378,usability,custom,customizations,378,"> Thanks a lot for this @ellert ! Out of curiosity: have you explored if it's feasible to migrate towards a CMakeLists and add_subdirectory, instead of a configure script? libAfterImage uses two different build systems, one for windows (nmake) and one for the rest (autotools). The one for windows uses a pre-generated configuration file win32/config.h and does not support any customizations. The other one uses a configure script to generate the config.h from config,h,in. The conversion of the windows build to cmake is easy, since there is no need to generate any files. For the other platforms one has to generate config.h, which makes changing the build system a bigger task in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6142,availability,error,error,6142,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6278,availability,Error,Error,6278,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6373,availability,Error,Error,6373,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:234,deployability,configurat,configuration,234,"Unfortunately, this broke things on macOS beta occasionally:. https://github.com/root-project/root/actions/runs/9177178669/job/25234168412. Note that this doesn't happen every time, to it might as well be an inconsistency in the node configuration. ```txt. 2024-05-21T15:30:21.5677370Z Undefined symbols for architecture arm64:. 2024-05-21T15:30:21.5679910Z ""_AddExtensionBlock"", referenced from:. 2024-05-21T15:30:21.5680410Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5681620Z ""_DGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5682200Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5682650Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5683040Z _gif2ASImage in libAfterImage.a[77](import.o). 2024-05-21T15:30:21.5683320Z ""_DGifGetExtension"", referenced from:. 2024-05-21T15:30:21.5683610Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5684190Z ""_DGifGetExtensionNext"", referenced from:. 2024-05-21T15:30:21.5684600Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5685300Z ""_DGifGetImageDesc"", referenced from:. 2024-05-21T15:30:21.5685720Z _get_gif_image_desc in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5686420Z ""_DGifGetLine"", referenced from:. 2024-05-21T15:30:21.5686680Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689120Z ""_DGifGetRecordType"", referenced from:. 2024-05-21T15:30:21.5689450Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689740Z ""_DGifOpen"", referenced from:. 2024-05-21T15:30:21.5690010Z _open_gif_read in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5691170Z ""_EGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5691590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5694000Z ""_EGifOpenFileHandle"", referenced from:. 2024-05-21T15:30:21.5694590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5695030Z _ASImage2gif i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:5336,deployability,Build,Building,5336,"30:21.5719430Z _get_gif_image_desc in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5719690Z ... 2024-05-21T15:30:21.5719850Z ""_GifErrorString"", referenced from:. 2024-05-21T15:30:21.5720130Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6164,deployability,fail,failed,6164,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6521,deployability,build,build,6521,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6527,deployability,artifact,artifacts,6527,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:234,integrability,configur,configuration,234,"Unfortunately, this broke things on macOS beta occasionally:. https://github.com/root-project/root/actions/runs/9177178669/job/25234168412. Note that this doesn't happen every time, to it might as well be an inconsistency in the node configuration. ```txt. 2024-05-21T15:30:21.5677370Z Undefined symbols for architecture arm64:. 2024-05-21T15:30:21.5679910Z ""_AddExtensionBlock"", referenced from:. 2024-05-21T15:30:21.5680410Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5681620Z ""_DGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5682200Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5682650Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5683040Z _gif2ASImage in libAfterImage.a[77](import.o). 2024-05-21T15:30:21.5683320Z ""_DGifGetExtension"", referenced from:. 2024-05-21T15:30:21.5683610Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5684190Z ""_DGifGetExtensionNext"", referenced from:. 2024-05-21T15:30:21.5684600Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5685300Z ""_DGifGetImageDesc"", referenced from:. 2024-05-21T15:30:21.5685720Z _get_gif_image_desc in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5686420Z ""_DGifGetLine"", referenced from:. 2024-05-21T15:30:21.5686680Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689120Z ""_DGifGetRecordType"", referenced from:. 2024-05-21T15:30:21.5689450Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689740Z ""_DGifOpen"", referenced from:. 2024-05-21T15:30:21.5690010Z _open_gif_read in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5691170Z ""_EGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5691590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5694000Z ""_EGifOpenFileHandle"", referenced from:. 2024-05-21T15:30:21.5694590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5695030Z _ASImage2gif i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:308,interoperability,architectur,architecture,308,"Unfortunately, this broke things on macOS beta occasionally:. https://github.com/root-project/root/actions/runs/9177178669/job/25234168412. Note that this doesn't happen every time, to it might as well be an inconsistency in the node configuration. ```txt. 2024-05-21T15:30:21.5677370Z Undefined symbols for architecture arm64:. 2024-05-21T15:30:21.5679910Z ""_AddExtensionBlock"", referenced from:. 2024-05-21T15:30:21.5680410Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5681620Z ""_DGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5682200Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5682650Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5683040Z _gif2ASImage in libAfterImage.a[77](import.o). 2024-05-21T15:30:21.5683320Z ""_DGifGetExtension"", referenced from:. 2024-05-21T15:30:21.5683610Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5684190Z ""_DGifGetExtensionNext"", referenced from:. 2024-05-21T15:30:21.5684600Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5685300Z ""_DGifGetImageDesc"", referenced from:. 2024-05-21T15:30:21.5685720Z _get_gif_image_desc in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5686420Z ""_DGifGetLine"", referenced from:. 2024-05-21T15:30:21.5686680Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689120Z ""_DGifGetRecordType"", referenced from:. 2024-05-21T15:30:21.5689450Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689740Z ""_DGifOpen"", referenced from:. 2024-05-21T15:30:21.5690010Z _open_gif_read in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5691170Z ""_EGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5691590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5694000Z ""_EGifOpenFileHandle"", referenced from:. 2024-05-21T15:30:21.5694590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5695030Z _ASImage2gif i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6086,interoperability,architectur,architecture,6086,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:234,modifiability,configur,configuration,234,"Unfortunately, this broke things on macOS beta occasionally:. https://github.com/root-project/root/actions/runs/9177178669/job/25234168412. Note that this doesn't happen every time, to it might as well be an inconsistency in the node configuration. ```txt. 2024-05-21T15:30:21.5677370Z Undefined symbols for architecture arm64:. 2024-05-21T15:30:21.5679910Z ""_AddExtensionBlock"", referenced from:. 2024-05-21T15:30:21.5680410Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5681620Z ""_DGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5682200Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5682650Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5683040Z _gif2ASImage in libAfterImage.a[77](import.o). 2024-05-21T15:30:21.5683320Z ""_DGifGetExtension"", referenced from:. 2024-05-21T15:30:21.5683610Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5684190Z ""_DGifGetExtensionNext"", referenced from:. 2024-05-21T15:30:21.5684600Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5685300Z ""_DGifGetImageDesc"", referenced from:. 2024-05-21T15:30:21.5685720Z _get_gif_image_desc in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5686420Z ""_DGifGetLine"", referenced from:. 2024-05-21T15:30:21.5686680Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689120Z ""_DGifGetRecordType"", referenced from:. 2024-05-21T15:30:21.5689450Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689740Z ""_DGifOpen"", referenced from:. 2024-05-21T15:30:21.5690010Z _open_gif_read in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5691170Z ""_EGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5691590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5694000Z ""_EGifOpenFileHandle"", referenced from:. 2024-05-21T15:30:21.5694590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5695030Z _ASImage2gif i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:176,performance,time,time,176,"Unfortunately, this broke things on macOS beta occasionally:. https://github.com/root-project/root/actions/runs/9177178669/job/25234168412. Note that this doesn't happen every time, to it might as well be an inconsistency in the node configuration. ```txt. 2024-05-21T15:30:21.5677370Z Undefined symbols for architecture arm64:. 2024-05-21T15:30:21.5679910Z ""_AddExtensionBlock"", referenced from:. 2024-05-21T15:30:21.5680410Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5681620Z ""_DGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5682200Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5682650Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5683040Z _gif2ASImage in libAfterImage.a[77](import.o). 2024-05-21T15:30:21.5683320Z ""_DGifGetExtension"", referenced from:. 2024-05-21T15:30:21.5683610Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5684190Z ""_DGifGetExtensionNext"", referenced from:. 2024-05-21T15:30:21.5684600Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5685300Z ""_DGifGetImageDesc"", referenced from:. 2024-05-21T15:30:21.5685720Z _get_gif_image_desc in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5686420Z ""_DGifGetLine"", referenced from:. 2024-05-21T15:30:21.5686680Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689120Z ""_DGifGetRecordType"", referenced from:. 2024-05-21T15:30:21.5689450Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689740Z ""_DGifOpen"", referenced from:. 2024-05-21T15:30:21.5690010Z _open_gif_read in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5691170Z ""_EGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5691590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5694000Z ""_EGifOpenFileHandle"", referenced from:. 2024-05-21T15:30:21.5694590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5695030Z _ASImage2gif i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6142,performance,error,error,6142,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6278,performance,Error,Error,6278,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6373,performance,Error,Error,6373,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:155,reliability,doe,doesn,155,"Unfortunately, this broke things on macOS beta occasionally:. https://github.com/root-project/root/actions/runs/9177178669/job/25234168412. Note that this doesn't happen every time, to it might as well be an inconsistency in the node configuration. ```txt. 2024-05-21T15:30:21.5677370Z Undefined symbols for architecture arm64:. 2024-05-21T15:30:21.5679910Z ""_AddExtensionBlock"", referenced from:. 2024-05-21T15:30:21.5680410Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5681620Z ""_DGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5682200Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5682650Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5683040Z _gif2ASImage in libAfterImage.a[77](import.o). 2024-05-21T15:30:21.5683320Z ""_DGifGetExtension"", referenced from:. 2024-05-21T15:30:21.5683610Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5684190Z ""_DGifGetExtensionNext"", referenced from:. 2024-05-21T15:30:21.5684600Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5685300Z ""_DGifGetImageDesc"", referenced from:. 2024-05-21T15:30:21.5685720Z _get_gif_image_desc in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5686420Z ""_DGifGetLine"", referenced from:. 2024-05-21T15:30:21.5686680Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689120Z ""_DGifGetRecordType"", referenced from:. 2024-05-21T15:30:21.5689450Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689740Z ""_DGifOpen"", referenced from:. 2024-05-21T15:30:21.5690010Z _open_gif_read in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5691170Z ""_EGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5691590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5694000Z ""_EGifOpenFileHandle"", referenced from:. 2024-05-21T15:30:21.5694590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5695030Z _ASImage2gif i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6164,reliability,fail,failed,6164,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6142,safety,error,error,6142,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6278,safety,Error,Error,6278,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6373,safety,Error,Error,6373,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6478,safety,hot,hotfixed,6478,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:234,security,configur,configuration,234,"Unfortunately, this broke things on macOS beta occasionally:. https://github.com/root-project/root/actions/runs/9177178669/job/25234168412. Note that this doesn't happen every time, to it might as well be an inconsistency in the node configuration. ```txt. 2024-05-21T15:30:21.5677370Z Undefined symbols for architecture arm64:. 2024-05-21T15:30:21.5679910Z ""_AddExtensionBlock"", referenced from:. 2024-05-21T15:30:21.5680410Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5681620Z ""_DGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5682200Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5682650Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5683040Z _gif2ASImage in libAfterImage.a[77](import.o). 2024-05-21T15:30:21.5683320Z ""_DGifGetExtension"", referenced from:. 2024-05-21T15:30:21.5683610Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5684190Z ""_DGifGetExtensionNext"", referenced from:. 2024-05-21T15:30:21.5684600Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5685300Z ""_DGifGetImageDesc"", referenced from:. 2024-05-21T15:30:21.5685720Z _get_gif_image_desc in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5686420Z ""_DGifGetLine"", referenced from:. 2024-05-21T15:30:21.5686680Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689120Z ""_DGifGetRecordType"", referenced from:. 2024-05-21T15:30:21.5689450Z _get_gif_saved_images in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5689740Z ""_DGifOpen"", referenced from:. 2024-05-21T15:30:21.5690010Z _open_gif_read in libAfterImage.a[80](ungif.o). 2024-05-21T15:30:21.5691170Z ""_EGifCloseFile"", referenced from:. 2024-05-21T15:30:21.5691590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5694000Z ""_EGifOpenFileHandle"", referenced from:. 2024-05-21T15:30:21.5694590Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5695030Z _ASImage2gif i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6142,usability,error,error,6142,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6156,usability,command,command,6156,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6278,usability,Error,Error,6278,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15191:6373,usability,Error,Error,6373,"ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720420Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5720700Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721000Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721280Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721550Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5721830Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722110Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722390Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722680Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5722920Z ... 2024-05-21T15:30:21.5723160Z [ 85%] Building CXX object gui/gui/CMakeFiles/Gui.dir/src/TGGC.cxx.o. 2024-05-21T15:30:21.5723490Z ""_MakeMapObject"", referenced from:. 2024-05-21T15:30:21.5723750Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724340Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5724780Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725050Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725330Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725610Z _ASImage2gif in libAfterImage.a[75](export.o). 2024-05-21T15:30:21.5725850Z ... 2024-05-21T15:30:21.5726030Z ld: symbol(s) not found for architecture arm64. 2024-05-21T15:30:21.5726600Z clang: error: linker command failed with exit code 1 (use -v to see invocation). 2024-05-21T15:30:21.5738220Z make[2]: *** [lib/libASImage.so] Error 1. 2024-05-21T15:30:21.5741270Z make[1]: *** [graf2d/asimage/CMakeFiles/ASImage.dir/all] Error 2. 2024-05-21T15:30:21.5742270Z make[1]: *** Waiting for unfinished jobs.... ```. This needs to be hotfixed, or maybe it's a problem with the build artifacts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15191
https://github.com/root-project/root/pull/15192:0,availability,Failur,Failures,0,"Failures are unrelated, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15192
https://github.com/root-project/root/pull/15192:0,deployability,Fail,Failures,0,"Failures are unrelated, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15192
https://github.com/root-project/root/pull/15192:0,performance,Failur,Failures,0,"Failures are unrelated, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15192
https://github.com/root-project/root/pull/15192:0,reliability,Fail,Failures,0,"Failures are unrelated, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15192
