id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/6148:587,testability,Test,TestMethodDNNValidationSize,587,"Fix TMVA tests: #elif without expression and typo; fixes the following:. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:48:14: error: #elif with no expression. 48 | #elif DNNCUDA. | ^. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:51:2: error: #error ""This should not happen. Can only compile with CPU or CUDA implementations."". 51 | #error ""This should not happen. Can only compile with CPU or CUDA implementations."". | ^~~~~. ```. and. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx: In member function ‘size_t TMVA::TestMethodDNNValidationSize::GetProcessedValidationOption(TString)’:. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:54:80: error: ‘defualtOptions’ was not declared in this scope. 54 | IMethod *m = fFactory->BookMethod(fDataLoader.get(), Types::kDNN, ""DNN"", defualtOptions + options);. | ^~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6148
https://github.com/root-project/root/pull/6148:653,testability,Test,TestMethodDNNValidationSize,653,"Fix TMVA tests: #elif without expression and typo; fixes the following:. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:48:14: error: #elif with no expression. 48 | #elif DNNCUDA. | ^. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:51:2: error: #error ""This should not happen. Can only compile with CPU or CUDA implementations."". 51 | #error ""This should not happen. Can only compile with CPU or CUDA implementations."". | ^~~~~. ```. and. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx: In member function ‘size_t TMVA::TestMethodDNNValidationSize::GetProcessedValidationOption(TString)’:. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:54:80: error: ‘defualtOptions’ was not declared in this scope. 54 | IMethod *m = fFactory->BookMethod(fDataLoader.get(), Types::kDNN, ""DNN"", defualtOptions + options);. | ^~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6148
https://github.com/root-project/root/pull/6148:767,testability,test,test,767,"Fix TMVA tests: #elif without expression and typo; fixes the following:. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:48:14: error: #elif with no expression. 48 | #elif DNNCUDA. | ^. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:51:2: error: #error ""This should not happen. Can only compile with CPU or CUDA implementations."". 51 | #error ""This should not happen. Can only compile with CPU or CUDA implementations."". | ^~~~~. ```. and. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx: In member function ‘size_t TMVA::TestMethodDNNValidationSize::GetProcessedValidationOption(TString)’:. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:54:80: error: ‘defualtOptions’ was not declared in this scope. 54 | IMethod *m = fFactory->BookMethod(fDataLoader.get(), Types::kDNN, ""DNN"", defualtOptions + options);. | ^~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6148
https://github.com/root-project/root/pull/6148:779,testability,Test,TestMethodDNNValidationSize,779,"Fix TMVA tests: #elif without expression and typo; fixes the following:. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:48:14: error: #elif with no expression. 48 | #elif DNNCUDA. | ^. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:51:2: error: #error ""This should not happen. Can only compile with CPU or CUDA implementations."". 51 | #error ""This should not happen. Can only compile with CPU or CUDA implementations."". | ^~~~~. ```. and. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx: In member function ‘size_t TMVA::TestMethodDNNValidationSize::GetProcessedValidationOption(TString)’:. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:54:80: error: ‘defualtOptions’ was not declared in this scope. 54 | IMethod *m = fFactory->BookMethod(fDataLoader.get(), Types::kDNN, ""DNN"", defualtOptions + options);. | ^~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6148
https://github.com/root-project/root/pull/6148:173,usability,error,error,173,"Fix TMVA tests: #elif without expression and typo; fixes the following:. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:48:14: error: #elif with no expression. 48 | #elif DNNCUDA. | ^. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:51:2: error: #error ""This should not happen. Can only compile with CPU or CUDA implementations."". 51 | #error ""This should not happen. Can only compile with CPU or CUDA implementations."". | ^~~~~. ```. and. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx: In member function ‘size_t TMVA::TestMethodDNNValidationSize::GetProcessedValidationOption(TString)’:. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:54:80: error: ‘defualtOptions’ was not declared in this scope. 54 | IMethod *m = fFactory->BookMethod(fDataLoader.get(), Types::kDNN, ""DNN"", defualtOptions + options);. | ^~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6148
https://github.com/root-project/root/pull/6148:325,usability,error,error,325,"Fix TMVA tests: #elif without expression and typo; fixes the following:. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:48:14: error: #elif with no expression. 48 | #elif DNNCUDA. | ^. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:51:2: error: #error ""This should not happen. Can only compile with CPU or CUDA implementations."". 51 | #error ""This should not happen. Can only compile with CPU or CUDA implementations."". | ^~~~~. ```. and. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx: In member function ‘size_t TMVA::TestMethodDNNValidationSize::GetProcessedValidationOption(TString)’:. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:54:80: error: ‘defualtOptions’ was not declared in this scope. 54 | IMethod *m = fFactory->BookMethod(fDataLoader.get(), Types::kDNN, ""DNN"", defualtOptions + options);. | ^~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6148
https://github.com/root-project/root/pull/6148:333,usability,error,error,333,"Fix TMVA tests: #elif without expression and typo; fixes the following:. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:48:14: error: #elif with no expression. 48 | #elif DNNCUDA. | ^. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:51:2: error: #error ""This should not happen. Can only compile with CPU or CUDA implementations."". 51 | #error ""This should not happen. Can only compile with CPU or CUDA implementations."". | ^~~~~. ```. and. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx: In member function ‘size_t TMVA::TestMethodDNNValidationSize::GetProcessedValidationOption(TString)’:. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:54:80: error: ‘defualtOptions’ was not declared in this scope. 54 | IMethod *m = fFactory->BookMethod(fDataLoader.get(), Types::kDNN, ""DNN"", defualtOptions + options);. | ^~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6148
https://github.com/root-project/root/pull/6148:423,usability,error,error,423,"Fix TMVA tests: #elif without expression and typo; fixes the following:. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:48:14: error: #elif with no expression. 48 | #elif DNNCUDA. | ^. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:51:2: error: #error ""This should not happen. Can only compile with CPU or CUDA implementations."". 51 | #error ""This should not happen. Can only compile with CPU or CUDA implementations."". | ^~~~~. ```. and. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx: In member function ‘size_t TMVA::TestMethodDNNValidationSize::GetProcessedValidationOption(TString)’:. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:54:80: error: ‘defualtOptions’ was not declared in this scope. 54 | IMethod *m = fFactory->BookMethod(fDataLoader.get(), Types::kDNN, ""DNN"", defualtOptions + options);. | ^~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6148
https://github.com/root-project/root/pull/6148:818,usability,error,error,818,"Fix TMVA tests: #elif without expression and typo; fixes the following:. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:48:14: error: #elif with no expression. 48 | #elif DNNCUDA. | ^. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:51:2: error: #error ""This should not happen. Can only compile with CPU or CUDA implementations."". 51 | #error ""This should not happen. Can only compile with CPU or CUDA implementations."". | ^~~~~. ```. and. ```. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx: In member function ‘size_t TMVA::TestMethodDNNValidationSize::GetProcessedValidationOption(TString)’:. /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:54:80: error: ‘defualtOptions’ was not declared in this scope. 54 | IMethod *m = fFactory->BookMethod(fDataLoader.get(), Types::kDNN, ""DNN"", defualtOptions + options);. | ^~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6148
https://github.com/root-project/root/pull/6149:221,energy efficiency,load,loaded,221,"[ntuple, tutorials] Remove ifdef around R__LOAD_LIBRARY; As discussed with @Axel-Naumann, in the interest of more concise RNTuple tutorials this PR removes the ifdef around `R__LOAD_LIBRARY`. The library is simply always loaded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6149
https://github.com/root-project/root/pull/6149:221,performance,load,loaded,221,"[ntuple, tutorials] Remove ifdef around R__LOAD_LIBRARY; As discussed with @Axel-Naumann, in the interest of more concise RNTuple tutorials this PR removes the ifdef around `R__LOAD_LIBRARY`. The library is simply always loaded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6149
https://github.com/root-project/root/pull/6149:207,testability,simpl,simply,207,"[ntuple, tutorials] Remove ifdef around R__LOAD_LIBRARY; As discussed with @Axel-Naumann, in the interest of more concise RNTuple tutorials this PR removes the ifdef around `R__LOAD_LIBRARY`. The library is simply always loaded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6149
https://github.com/root-project/root/pull/6149:207,usability,simpl,simply,207,"[ntuple, tutorials] Remove ifdef around R__LOAD_LIBRARY; As discussed with @Axel-Naumann, in the interest of more concise RNTuple tutorials this PR removes the ifdef around `R__LOAD_LIBRARY`. The library is simply always loaded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6149
https://github.com/root-project/root/pull/6150:28,availability,avail,available,28,dynamically ask cuDNN about available number of algorithms; as the title says @lmoneta,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6150
https://github.com/root-project/root/pull/6150:28,reliability,availab,available,28,dynamically ask cuDNN about available number of algorithms; as the title says @lmoneta,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6150
https://github.com/root-project/root/pull/6150:28,safety,avail,available,28,dynamically ask cuDNN about available number of algorithms; as the title says @lmoneta,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6150
https://github.com/root-project/root/pull/6150:28,security,availab,available,28,dynamically ask cuDNN about available number of algorithms; as the title says @lmoneta,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6150
https://github.com/root-project/root/pull/6151:80,deployability,version,version,80,"Backport cudnn v8; Backport fixes from #6058, #6148, #6079 for supporting cudnn version 8 in 6.22 patches",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6151
https://github.com/root-project/root/pull/6151:98,deployability,patch,patches,98,"Backport cudnn v8; Backport fixes from #6058, #6148, #6079 for supporting cudnn version 8 in 6.22 patches",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6151
https://github.com/root-project/root/pull/6151:80,integrability,version,version,80,"Backport cudnn v8; Backport fixes from #6058, #6148, #6079 for supporting cudnn version 8 in 6.22 patches",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6151
https://github.com/root-project/root/pull/6151:80,modifiability,version,version,80,"Backport cudnn v8; Backport fixes from #6058, #6148, #6079 for supporting cudnn version 8 in 6.22 patches",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6151
https://github.com/root-project/root/pull/6151:98,safety,patch,patches,98,"Backport cudnn v8; Backport fixes from #6058, #6148, #6079 for supporting cudnn version 8 in 6.22 patches",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6151
https://github.com/root-project/root/pull/6151:98,security,patch,patches,98,"Backport cudnn v8; Backport fixes from #6058, #6148, #6079 for supporting cudnn version 8 in 6.22 patches",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6151
https://github.com/root-project/root/pull/6151:63,usability,support,supporting,63,"Backport cudnn v8; Backport fixes from #6058, #6148, #6079 for supporting cudnn version 8 in 6.22 patches",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6151
https://github.com/root-project/root/pull/6152:34,deployability,INSTAL,INSTALL,34,[skip-ci][DOCS] Freshen up README/INSTALL; I think it's useful/user-friendly to have basic installation instructions in-source. I removed the outdated content and added pointers to root.cern/install/build_from_source and similar. This fixes ROOT-10964 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6152
https://github.com/root-project/root/pull/6152:91,deployability,instal,installation,91,[skip-ci][DOCS] Freshen up README/INSTALL; I think it's useful/user-friendly to have basic installation instructions in-source. I removed the outdated content and added pointers to root.cern/install/build_from_source and similar. This fixes ROOT-10964 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6152
https://github.com/root-project/root/pull/6152:191,deployability,instal,install,191,[skip-ci][DOCS] Freshen up README/INSTALL; I think it's useful/user-friendly to have basic installation instructions in-source. I removed the outdated content and added pointers to root.cern/install/build_from_source and similar. This fixes ROOT-10964 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6152
https://github.com/root-project/root/pull/6152:151,performance,content,content,151,[skip-ci][DOCS] Freshen up README/INSTALL; I think it's useful/user-friendly to have basic installation instructions in-source. I removed the outdated content and added pointers to root.cern/install/build_from_source and similar. This fixes ROOT-10964 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6152
https://github.com/root-project/root/pull/6152:63,usability,user,user-friendly,63,[skip-ci][DOCS] Freshen up README/INSTALL; I think it's useful/user-friendly to have basic installation instructions in-source. I removed the outdated content and added pointers to root.cern/install/build_from_source and similar. This fixes ROOT-10964 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6152
https://github.com/root-project/root/pull/6153:239,availability,error,error,239,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:602,availability,Error,Error,602,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:665,availability,failur,failure,665,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:852,availability,Error,Error,852,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:34,deployability,log,logic,34,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:44,deployability,depend,dependencies,44,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:74,deployability,build,build,74,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:98,deployability,modul,module,98,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:366,deployability,modul,modules,366,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:561,deployability,modul,module,561,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:622,deployability,build,builds,622,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:665,deployability,fail,failure,665,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:687,deployability,build,builds,687,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:803,deployability,build,build,803,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:44,integrability,depend,dependencies,44,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:44,modifiability,depend,dependencies,44,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:98,modifiability,modul,module,98,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:366,modifiability,modul,modules,366,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:561,modifiability,modul,module,561,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:239,performance,error,error,239,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:602,performance,Error,Error,602,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:665,performance,failur,failure,665,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:852,performance,Error,Error,852,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:665,reliability,fail,failure,665,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:34,safety,log,logic,34,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:44,safety,depend,dependencies,44,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:98,safety,modul,module,98,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:239,safety,error,error,239,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:366,safety,modul,modules,366,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:561,safety,modul,module,561,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:602,safety,Error,Error,602,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:852,safety,Error,Error,852,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:34,security,log,logic,34,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:34,testability,log,logic,34,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:44,testability,depend,dependencies,44,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:239,usability,error,error,239,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:602,usability,Error,Error,602,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6153:852,usability,Error,Error,852,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""; It broke C++17 build of ROOT with:. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: error: 'std::__uniq_ptr_data<RooDataSet, std::default_delete<RooDataSet>, true, true>' has different definitions. in different modules; defined here. struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>. ^. /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/../../../../include/c++/10.1.0/bits/unique_ptr.h:207:12: note: definition in module 'std.condition_variable' is here. Error: /home/stefan/builds/root-dev/bin/rootcling: compilation failure (/home/stefan/builds/root-dev/lib/libRooStats03cff1ce95_dictUmbrella.h). make[2]: *** [roofit/roostats/CMakeFiles/G__RooStats.dir/build.make:222: roofit/roostats/G__RooStats.cxx] Error 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6153
https://github.com/root-project/root/pull/6154:207,availability,error,errors,207,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:81,deployability,contain,contain,81,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:143,deployability,fail,fails,143,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:239,deployability,modul,modules,239,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:133,energy efficiency,current,currently,133,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:116,interoperability,Format,Format,116,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:341,interoperability,format,format,341,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:239,modifiability,modul,modules,239,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:207,performance,error,errors,207,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:143,reliability,fail,fails,143,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:207,safety,error,errors,207,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:239,safety,modul,modules,239,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:152,testability,understand,understand,152,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6154:207,usability,error,errors,207,"Teach DLM to recognise symbols in COFF Object Files.; On Windows, the .dll files contain symbol information in COFF Format which DLM currently fails to understand properly. This leads to unrecognized symbol errors while starting ROOT with modules. This commit teaches DLM to correctly read symbols when the Object File is in COFF executable format. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6154
https://github.com/root-project/root/pull/6155:320,availability,redund,redundant,320,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:320,deployability,redundan,redundant,320,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:400,deployability,instal,installed,400,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:814,deployability,instal,installed,814,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:844,deployability,Instal,Install,844,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:1043,deployability,instal,installation,1043,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:1146,deployability,instal,installation,1146,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:1225,deployability,instal,installation,1225,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:988,energy efficiency,current,current,988,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:1192,energy efficiency,current,current,1192,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:877,interoperability,share,share,877,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:1277,modifiability,refact,refactor,1277,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:1277,performance,refactor,refactor,1277,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:320,reliability,redundan,redundant,320,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:320,safety,redund,redundant,320,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:377,usability,behavi,behaviour,377,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:764,usability,custom,custom,764,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:996,usability,behavi,behaviour,996,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6155:1247,usability,behavi,behaviour,1247,"[JupyROOT] Make jupyter working without root --notebook; Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder. 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`. 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`. 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6155
https://github.com/root-project/root/pull/6156:185,availability,error,error,185,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6156:207,availability,error,error,207,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6156:111,deployability,contain,containing,111,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6156:185,performance,error,error,185,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6156:207,performance,error,error,207,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6156:185,safety,error,error,185,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6156:207,safety,error,error,207,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6156:234,safety,input,input,234,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6156:185,usability,error,error,185,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6156:207,usability,error,error,207,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6156:234,usability,input,input,234,"Fix Jira issue #ROOT-10969 Can not compile ROOT macro on Win10; Skip all DLL in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And an even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156
https://github.com/root-project/root/pull/6157:249,availability,error,error,249,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:652,energy efficiency,load,load,652,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:995,energy efficiency,load,load,995,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:1340,energy efficiency,load,load,1340,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:479,integrability,interfac,interface,479,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:543,integrability,pub,public,543,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:824,integrability,interfac,interface,824,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:888,integrability,pub,public,888,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:1168,integrability,interfac,interface,1168,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:1232,integrability,pub,public,1232,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:479,interoperability,interfac,interface,479,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:675,interoperability,share,shared,675,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:824,interoperability,interfac,interface,824,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:1018,interoperability,share,shared,1018,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:1168,interoperability,interfac,interface,1168,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:1363,interoperability,share,shared,1363,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:479,modifiability,interfac,interface,479,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:824,modifiability,interfac,interface,824,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:1168,modifiability,interfac,interface,1168,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:249,performance,error,error,249,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:652,performance,load,load,652,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:995,performance,load,load,995,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:1340,performance,load,load,1340,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:249,safety,error,error,249,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6157:249,usability,error,error,249,"Add R__DLLEXPORT to export the static constexpr class members of RColor; . Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:. ```. Processing box.cxx... IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed. Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]! You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue. Maybe you need to load the corresponding shared library? ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6157
https://github.com/root-project/root/pull/6158:36,availability,robust,robust,36,"[RS] Make HypoTestInverterPlot more robust against failed fits.; When a fit fails, a CLs of -1 is returned. This can throw off the. HypoTestInverter. Now, such points are skipped, and a warning is issued.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6158
https://github.com/root-project/root/pull/6158:51,deployability,fail,failed,51,"[RS] Make HypoTestInverterPlot more robust against failed fits.; When a fit fails, a CLs of -1 is returned. This can throw off the. HypoTestInverter. Now, such points are skipped, and a warning is issued.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6158
https://github.com/root-project/root/pull/6158:76,deployability,fail,fails,76,"[RS] Make HypoTestInverterPlot more robust against failed fits.; When a fit fails, a CLs of -1 is returned. This can throw off the. HypoTestInverter. Now, such points are skipped, and a warning is issued.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6158
https://github.com/root-project/root/pull/6158:36,reliability,robust,robust,36,"[RS] Make HypoTestInverterPlot more robust against failed fits.; When a fit fails, a CLs of -1 is returned. This can throw off the. HypoTestInverter. Now, such points are skipped, and a warning is issued.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6158
https://github.com/root-project/root/pull/6158:51,reliability,fail,failed,51,"[RS] Make HypoTestInverterPlot more robust against failed fits.; When a fit fails, a CLs of -1 is returned. This can throw off the. HypoTestInverter. Now, such points are skipped, and a warning is issued.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6158
https://github.com/root-project/root/pull/6158:76,reliability,fail,fails,76,"[RS] Make HypoTestInverterPlot more robust against failed fits.; When a fit fails, a CLs of -1 is returned. This can throw off the. HypoTestInverter. Now, such points are skipped, and a warning is issued.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6158
https://github.com/root-project/root/pull/6158:36,safety,robust,robust,36,"[RS] Make HypoTestInverterPlot more robust against failed fits.; When a fit fails, a CLs of -1 is returned. This can throw off the. HypoTestInverter. Now, such points are skipped, and a warning is issued.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6158
https://github.com/root-project/root/pull/6159:41,deployability,fail,fails,41,[cling] Remove fwddecl files; RUN: often fails.; ```. -rw-r--r-- 1 sftnight sf 75006 Aug 10 16:42 __cling_fwd_ctgmath. -rw-r--r-- 1 sftnight sf 181352 Aug 10 16:42 __cling_fwd_math.h.skipped. -rw-r--r-- 1 sftnight sf 25998 Aug 10 16:42 __cling_fwd_math.h. -rw-r--r-- 1 sftnight sf 193528 Aug 10 16:42 __cling_fwd_memory.skipped. -rw-r--r-- 1 sftnight sf 79106 Aug 10 16:42 __cling_fwd_memory. -rw-r--r-- 1 sftnight sf 52 Aug 10 16:42 __cling_fwd_string_view.skipped. -rw-r--r-- 1 sftnight sf 203 Aug 10 16:42 __cling_fwd_string_view. -rw-r--r-- 1 sftnight sf 200002 Aug 10 16:42 __cling_fwd_iomanip.skipped. -rw-r--r-- 1 sftnight sf 74800 Aug 10 16:42 __cling_fwd_iomanip. -rw-r--r-- 1 sftnight sf 161645 Aug 10 16:42 __cling_fwd_bitset.skipped. -rw-r--r-- 1 sftnight sf 61686 Aug 10 16:42 __cling_fwd_bitset. -rw-r--r-- 1 sftnight sf 25986 Aug 10 16:42 __cling_fwd_vector.skipped. -rw-r--r-- 1 sftnight sf 19389 Aug 10 16:42 __cling_fwd_vector. -rw-r--r-- 1 sftnight sf 201867 Aug 10 16:42 __cling_fwd_thread.skipped. -rw-r--r-- 1 sftnight sf 90082 Aug 10 16:42 __cling_fwd_thread. -rw-r--r-- 1 sftnight sf 222 Aug 10 16:42 __cling_fwd_limits.skipped. -rw-r--r-- 1 sftnight sf 610 Aug 10 16:42 __cling_fwd_limits. -rw-r--r-- 1 sftnight sf 44 Aug 10 16:42 __cling_fwd_any.skipped. -rw-r--r-- 1 sftnight sf 203 Aug 10 16:42 __cling_fwd_any. -rw-r--r-- 1 sftnight sf 888 Aug 10 16:42 __cling_fwd_clocale.skipped. -rw-r--r-- 1 sftnight sf 1065 Aug 10 16:42 __cling_fwd_clocale. ```. ...and more...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6159
https://github.com/root-project/root/pull/6159:41,reliability,fail,fails,41,[cling] Remove fwddecl files; RUN: often fails.; ```. -rw-r--r-- 1 sftnight sf 75006 Aug 10 16:42 __cling_fwd_ctgmath. -rw-r--r-- 1 sftnight sf 181352 Aug 10 16:42 __cling_fwd_math.h.skipped. -rw-r--r-- 1 sftnight sf 25998 Aug 10 16:42 __cling_fwd_math.h. -rw-r--r-- 1 sftnight sf 193528 Aug 10 16:42 __cling_fwd_memory.skipped. -rw-r--r-- 1 sftnight sf 79106 Aug 10 16:42 __cling_fwd_memory. -rw-r--r-- 1 sftnight sf 52 Aug 10 16:42 __cling_fwd_string_view.skipped. -rw-r--r-- 1 sftnight sf 203 Aug 10 16:42 __cling_fwd_string_view. -rw-r--r-- 1 sftnight sf 200002 Aug 10 16:42 __cling_fwd_iomanip.skipped. -rw-r--r-- 1 sftnight sf 74800 Aug 10 16:42 __cling_fwd_iomanip. -rw-r--r-- 1 sftnight sf 161645 Aug 10 16:42 __cling_fwd_bitset.skipped. -rw-r--r-- 1 sftnight sf 61686 Aug 10 16:42 __cling_fwd_bitset. -rw-r--r-- 1 sftnight sf 25986 Aug 10 16:42 __cling_fwd_vector.skipped. -rw-r--r-- 1 sftnight sf 19389 Aug 10 16:42 __cling_fwd_vector. -rw-r--r-- 1 sftnight sf 201867 Aug 10 16:42 __cling_fwd_thread.skipped. -rw-r--r-- 1 sftnight sf 90082 Aug 10 16:42 __cling_fwd_thread. -rw-r--r-- 1 sftnight sf 222 Aug 10 16:42 __cling_fwd_limits.skipped. -rw-r--r-- 1 sftnight sf 610 Aug 10 16:42 __cling_fwd_limits. -rw-r--r-- 1 sftnight sf 44 Aug 10 16:42 __cling_fwd_any.skipped. -rw-r--r-- 1 sftnight sf 203 Aug 10 16:42 __cling_fwd_any. -rw-r--r-- 1 sftnight sf 888 Aug 10 16:42 __cling_fwd_clocale.skipped. -rw-r--r-- 1 sftnight sf 1065 Aug 10 16:42 __cling_fwd_clocale. ```. ...and more...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6159
https://github.com/root-project/root/pull/6160:210,interoperability,conflict,conflict,210,"[PyROOT] Do not compile Cppyy's TPyArg; ...since it not used anywhere in Cppyy's code. It used to be used. in TPyClassGenerator.cxx, but the code in that file was completely. commented out. This will prevent a conflict with a class of the same name that. exists in TPython, as reported by the address sanitizer. Thanks to @hageboeck for the heads up!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6160
https://github.com/root-project/root/pull/6160:163,safety,compl,completely,163,"[PyROOT] Do not compile Cppyy's TPyArg; ...since it not used anywhere in Cppyy's code. It used to be used. in TPyClassGenerator.cxx, but the code in that file was completely. commented out. This will prevent a conflict with a class of the same name that. exists in TPython, as reported by the address sanitizer. Thanks to @hageboeck for the heads up!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6160
https://github.com/root-project/root/pull/6160:200,safety,prevent,prevent,200,"[PyROOT] Do not compile Cppyy's TPyArg; ...since it not used anywhere in Cppyy's code. It used to be used. in TPyClassGenerator.cxx, but the code in that file was completely. commented out. This will prevent a conflict with a class of the same name that. exists in TPython, as reported by the address sanitizer. Thanks to @hageboeck for the heads up!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6160
https://github.com/root-project/root/pull/6160:301,safety,sanit,sanitizer,301,"[PyROOT] Do not compile Cppyy's TPyArg; ...since it not used anywhere in Cppyy's code. It used to be used. in TPyClassGenerator.cxx, but the code in that file was completely. commented out. This will prevent a conflict with a class of the same name that. exists in TPython, as reported by the address sanitizer. Thanks to @hageboeck for the heads up!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6160
https://github.com/root-project/root/pull/6160:163,security,compl,completely,163,"[PyROOT] Do not compile Cppyy's TPyArg; ...since it not used anywhere in Cppyy's code. It used to be used. in TPyClassGenerator.cxx, but the code in that file was completely. commented out. This will prevent a conflict with a class of the same name that. exists in TPython, as reported by the address sanitizer. Thanks to @hageboeck for the heads up!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6160
https://github.com/root-project/root/pull/6160:200,security,preven,prevent,200,"[PyROOT] Do not compile Cppyy's TPyArg; ...since it not used anywhere in Cppyy's code. It used to be used. in TPyClassGenerator.cxx, but the code in that file was completely. commented out. This will prevent a conflict with a class of the same name that. exists in TPython, as reported by the address sanitizer. Thanks to @hageboeck for the heads up!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6160
https://github.com/root-project/root/pull/6160:301,security,sanit,sanitizer,301,"[PyROOT] Do not compile Cppyy's TPyArg; ...since it not used anywhere in Cppyy's code. It used to be used. in TPyClassGenerator.cxx, but the code in that file was completely. commented out. This will prevent a conflict with a class of the same name that. exists in TPython, as reported by the address sanitizer. Thanks to @hageboeck for the heads up!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6160
https://github.com/root-project/root/pull/6161:8,deployability,updat,updating,8,"Fix EST updating in clang::ASTReader; When reading an evaluated EST, make sure we provide *that* to the. update object, instead of leaving the EST to be used for the. update uninitialized. Remove the now unused (and due to two FuncDecls fairly ambiguous). ctor from a FuncDecl. Instead, set ShouldUpdateESI explicitly in. the only case where it matters. This fixes 30ecf72, and as that. points out, should become irrelevant once. llvm-mirror/clang@5d50602. is merged into ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6161
https://github.com/root-project/root/pull/6161:105,deployability,updat,update,105,"Fix EST updating in clang::ASTReader; When reading an evaluated EST, make sure we provide *that* to the. update object, instead of leaving the EST to be used for the. update uninitialized. Remove the now unused (and due to two FuncDecls fairly ambiguous). ctor from a FuncDecl. Instead, set ShouldUpdateESI explicitly in. the only case where it matters. This fixes 30ecf72, and as that. points out, should become irrelevant once. llvm-mirror/clang@5d50602. is merged into ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6161
https://github.com/root-project/root/pull/6161:167,deployability,updat,update,167,"Fix EST updating in clang::ASTReader; When reading an evaluated EST, make sure we provide *that* to the. update object, instead of leaving the EST to be used for the. update uninitialized. Remove the now unused (and due to two FuncDecls fairly ambiguous). ctor from a FuncDecl. Instead, set ShouldUpdateESI explicitly in. the only case where it matters. This fixes 30ecf72, and as that. points out, should become irrelevant once. llvm-mirror/clang@5d50602. is merged into ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6161
https://github.com/root-project/root/pull/6161:8,safety,updat,updating,8,"Fix EST updating in clang::ASTReader; When reading an evaluated EST, make sure we provide *that* to the. update object, instead of leaving the EST to be used for the. update uninitialized. Remove the now unused (and due to two FuncDecls fairly ambiguous). ctor from a FuncDecl. Instead, set ShouldUpdateESI explicitly in. the only case where it matters. This fixes 30ecf72, and as that. points out, should become irrelevant once. llvm-mirror/clang@5d50602. is merged into ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6161
https://github.com/root-project/root/pull/6161:105,safety,updat,update,105,"Fix EST updating in clang::ASTReader; When reading an evaluated EST, make sure we provide *that* to the. update object, instead of leaving the EST to be used for the. update uninitialized. Remove the now unused (and due to two FuncDecls fairly ambiguous). ctor from a FuncDecl. Instead, set ShouldUpdateESI explicitly in. the only case where it matters. This fixes 30ecf72, and as that. points out, should become irrelevant once. llvm-mirror/clang@5d50602. is merged into ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6161
https://github.com/root-project/root/pull/6161:167,safety,updat,update,167,"Fix EST updating in clang::ASTReader; When reading an evaluated EST, make sure we provide *that* to the. update object, instead of leaving the EST to be used for the. update uninitialized. Remove the now unused (and due to two FuncDecls fairly ambiguous). ctor from a FuncDecl. Instead, set ShouldUpdateESI explicitly in. the only case where it matters. This fixes 30ecf72, and as that. points out, should become irrelevant once. llvm-mirror/clang@5d50602. is merged into ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6161
https://github.com/root-project/root/pull/6161:8,security,updat,updating,8,"Fix EST updating in clang::ASTReader; When reading an evaluated EST, make sure we provide *that* to the. update object, instead of leaving the EST to be used for the. update uninitialized. Remove the now unused (and due to two FuncDecls fairly ambiguous). ctor from a FuncDecl. Instead, set ShouldUpdateESI explicitly in. the only case where it matters. This fixes 30ecf72, and as that. points out, should become irrelevant once. llvm-mirror/clang@5d50602. is merged into ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6161
https://github.com/root-project/root/pull/6161:105,security,updat,update,105,"Fix EST updating in clang::ASTReader; When reading an evaluated EST, make sure we provide *that* to the. update object, instead of leaving the EST to be used for the. update uninitialized. Remove the now unused (and due to two FuncDecls fairly ambiguous). ctor from a FuncDecl. Instead, set ShouldUpdateESI explicitly in. the only case where it matters. This fixes 30ecf72, and as that. points out, should become irrelevant once. llvm-mirror/clang@5d50602. is merged into ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6161
https://github.com/root-project/root/pull/6161:167,security,updat,update,167,"Fix EST updating in clang::ASTReader; When reading an evaluated EST, make sure we provide *that* to the. update object, instead of leaving the EST to be used for the. update uninitialized. Remove the now unused (and due to two FuncDecls fairly ambiguous). ctor from a FuncDecl. Instead, set ShouldUpdateESI explicitly in. the only case where it matters. This fixes 30ecf72, and as that. points out, should become irrelevant once. llvm-mirror/clang@5d50602. is merged into ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6161
https://github.com/root-project/root/pull/6162:240,availability,error,error-handling,240,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:360,deployability,resourc,resources,360,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:360,energy efficiency,resourc,resources,360,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:295,integrability,sub,submission,295,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:306,integrability,queue,queue,306,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:312,integrability,event,event,312,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:318,integrability,batch,batching,318,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:499,integrability,queue,queue,499,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:144,performance,perform,performs,144,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:240,performance,error,error-handling,240,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:306,performance,queue,queue,306,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:318,performance,batch,batching,318,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:353,performance,memor,memory,353,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:360,performance,resourc,resources,360,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:499,performance,queue,queue,499,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:240,safety,error,error-handling,240,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:360,safety,resourc,resources,360,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:547,safety,test,test,547,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:579,safety,test,test,579,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:610,safety,test,test,610,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:233,testability,simpl,simple,233,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:360,testability,resourc,resources,360,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:547,testability,test,test,547,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:579,testability,test,test,579,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:610,testability,test,test,610,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:144,usability,perform,performs,144,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:233,usability,simpl,simple,233,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:240,usability,error,error-handling,240,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6162:353,usability,memor,memory,353,"[io] io_uring ReadV implementation; Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. . Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: . * simple error-handling . * no interrupt considerations. * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6162
https://github.com/root-project/root/pull/6163:189,availability,error,error,189,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6163:211,availability,error,error,211,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6163:115,deployability,contain,containing,115,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6163:189,performance,error,error,189,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6163:211,performance,error,error,211,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6163:189,safety,error,error,189,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6163:211,safety,error,error,211,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6163:238,safety,input,input,238,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6163:189,usability,error,error,189,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6163:211,usability,error,error,211,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6163:238,usability,input,input,238,"Backport fix for ROOT-10969 (Can not compile ROOT macro) to v6.22; Skip all DLLs in `C:/Program Files...` the path containing spaces is not handled properly anyway, leading to this kind of error:. `LINK : fatal error LNK1181: cannot open input file 'c:\program.obj'`. And a even more fundamental reason is that the matching `.lib` files are usually not along side the DLLs in `C:\Program Files*`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6163
https://github.com/root-project/root/pull/6165:23,deployability,Build,Build,23,"[JupyROOT][ROOT-10884] Build libJupyROOT with undefined Python symbols; For @oshadura : I am following the same strategy that @maxgalli already applied to libROOTPythonizations and libcppyy, which are also Python extension modules. The fix is basically extracted from what was done in the CMakeLists.txt of those two other libraries. For more info on the issue that this fixes, please see:. https://sft.its.cern.ch/jira/browse/ROOT-10884.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6165
https://github.com/root-project/root/pull/6165:223,deployability,modul,modules,223,"[JupyROOT][ROOT-10884] Build libJupyROOT with undefined Python symbols; For @oshadura : I am following the same strategy that @maxgalli already applied to libROOTPythonizations and libcppyy, which are also Python extension modules. The fix is basically extracted from what was done in the CMakeLists.txt of those two other libraries. For more info on the issue that this fixes, please see:. https://sft.its.cern.ch/jira/browse/ROOT-10884.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6165
https://github.com/root-project/root/pull/6165:213,modifiability,extens,extension,213,"[JupyROOT][ROOT-10884] Build libJupyROOT with undefined Python symbols; For @oshadura : I am following the same strategy that @maxgalli already applied to libROOTPythonizations and libcppyy, which are also Python extension modules. The fix is basically extracted from what was done in the CMakeLists.txt of those two other libraries. For more info on the issue that this fixes, please see:. https://sft.its.cern.ch/jira/browse/ROOT-10884.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6165
https://github.com/root-project/root/pull/6165:223,modifiability,modul,modules,223,"[JupyROOT][ROOT-10884] Build libJupyROOT with undefined Python symbols; For @oshadura : I am following the same strategy that @maxgalli already applied to libROOTPythonizations and libcppyy, which are also Python extension modules. The fix is basically extracted from what was done in the CMakeLists.txt of those two other libraries. For more info on the issue that this fixes, please see:. https://sft.its.cern.ch/jira/browse/ROOT-10884.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6165
https://github.com/root-project/root/pull/6165:223,safety,modul,modules,223,"[JupyROOT][ROOT-10884] Build libJupyROOT with undefined Python symbols; For @oshadura : I am following the same strategy that @maxgalli already applied to libROOTPythonizations and libcppyy, which are also Python extension modules. The fix is basically extracted from what was done in the CMakeLists.txt of those two other libraries. For more info on the issue that this fixes, please see:. https://sft.its.cern.ch/jira/browse/ROOT-10884.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6165
https://github.com/root-project/root/pull/6166:61,deployability,fail,fails,61,"[RS] Skip NaNs and infinities in HypoTestInverter.; If a fit fails, it might produce non-finite confidence levels. This can. be a problem for the hypothesis test inversion. Here, all non-finite numbers are skipped, in the hope that this can. stabilise a limit calculation in cases where the failed fits are. irrelevant for finding the 95% CL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6166
https://github.com/root-project/root/pull/6166:291,deployability,fail,failed,291,"[RS] Skip NaNs and infinities in HypoTestInverter.; If a fit fails, it might produce non-finite confidence levels. This can. be a problem for the hypothesis test inversion. Here, all non-finite numbers are skipped, in the hope that this can. stabilise a limit calculation in cases where the failed fits are. irrelevant for finding the 95% CL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6166
https://github.com/root-project/root/pull/6166:61,reliability,fail,fails,61,"[RS] Skip NaNs and infinities in HypoTestInverter.; If a fit fails, it might produce non-finite confidence levels. This can. be a problem for the hypothesis test inversion. Here, all non-finite numbers are skipped, in the hope that this can. stabilise a limit calculation in cases where the failed fits are. irrelevant for finding the 95% CL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6166
https://github.com/root-project/root/pull/6166:242,reliability,stabil,stabilise,242,"[RS] Skip NaNs and infinities in HypoTestInverter.; If a fit fails, it might produce non-finite confidence levels. This can. be a problem for the hypothesis test inversion. Here, all non-finite numbers are skipped, in the hope that this can. stabilise a limit calculation in cases where the failed fits are. irrelevant for finding the 95% CL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6166
https://github.com/root-project/root/pull/6166:291,reliability,fail,failed,291,"[RS] Skip NaNs and infinities in HypoTestInverter.; If a fit fails, it might produce non-finite confidence levels. This can. be a problem for the hypothesis test inversion. Here, all non-finite numbers are skipped, in the hope that this can. stabilise a limit calculation in cases where the failed fits are. irrelevant for finding the 95% CL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6166
https://github.com/root-project/root/pull/6166:157,safety,test,test,157,"[RS] Skip NaNs and infinities in HypoTestInverter.; If a fit fails, it might produce non-finite confidence levels. This can. be a problem for the hypothesis test inversion. Here, all non-finite numbers are skipped, in the hope that this can. stabilise a limit calculation in cases where the failed fits are. irrelevant for finding the 95% CL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6166
https://github.com/root-project/root/pull/6166:157,testability,test,test,157,"[RS] Skip NaNs and infinities in HypoTestInverter.; If a fit fails, it might produce non-finite confidence levels. This can. be a problem for the hypothesis test inversion. Here, all non-finite numbers are skipped, in the hope that this can. stabilise a limit calculation in cases where the failed fits are. irrelevant for finding the 95% CL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6166
https://github.com/root-project/root/pull/6167:37,deployability,Build,Build,37,[JupyROOT][ROOT-10884] Backport 622: Build libJupyROOT with undefined Python symbols; Backport of https://github.com/root-project/root/pull/6165,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6167
https://github.com/root-project/root/pull/6168:149,availability,operat,operator,149,Remove the copy constructor definition and use default one for an internal class in stressHistoFit; This should fix a warning for missing assignment operator definition,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6168
https://github.com/root-project/root/pull/6170:310,deployability,log,logical,310,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:442,deployability,integr,integration,442,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:590,deployability,log,logical,590,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:811,deployability,depend,depending,811,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:1056,deployability,log,logical,1056,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:43,energy efficiency,Current,Currently,43,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:1083,energy efficiency,reduc,reduced,1083,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:442,integrability,integr,integration,442,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:811,integrability,depend,depending,811,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:442,interoperability,integr,integration,442,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:1201,interoperability,specif,specific,1201,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:15,modifiability,polymorph,polymorphic,15,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:442,modifiability,integr,integration,442,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:811,modifiability,depend,depending,811,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:442,reliability,integr,integration,442,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:310,safety,log,logical,310,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:590,safety,log,logical,590,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:811,safety,depend,depending,811,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:1056,safety,log,logical,1056,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:310,security,log,logical,310,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:442,security,integr,integration,442,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:590,security,log,logical,590,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:1056,security,log,logical,1056,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:310,testability,log,logical,310,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:370,testability,simpl,simplified,370,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:442,testability,integr,integration,442,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:576,testability,simpl,simplify,576,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:590,testability,log,logical,590,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:811,testability,depend,depending,811,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:1056,testability,log,logical,1056,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:1172,testability,simpl,simpler,1172,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:370,usability,simpl,simplified,370,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:576,usability,simpl,simplify,576,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6170:1172,usability,simpl,simpler,1172,"[DF] Switch to polymorphic column readers; Currently RDF reads all column values via a single RColumnValue type,. which knows how to deal with TTreeReaderValues, TTreeReaderArrays,. datasource columns and defined columns. Not only that's too many hats. for a single type, but this design requires some runtime logical branching. to decide which path to take that can be simplified. Finally and most importantly, going forward we want smarter integration. with RDataSource, and we will require RDataSource-specialized column readers. In order to allow this latter use-case and simplify some logical. branching, instead of a single RColumnValue type we add specialized. column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values. via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,. and RDSColumnReader reads values from a datasource. A given computation graph will only make use of one between. RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:. - logical branching has been reduced (for now, at the cost of introducing a. virtual call). - the new design makes it simpler to insert datasource-specific column. readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6170
https://github.com/root-project/root/pull/6171:125,availability,sli,slightly,125,WIP: Add (symmetric) double-sided Crystal Ball shape to RooFit; `RooCBShape` is commonly used in HEP analyses. This adds its slightly less common extrapolations `RooDSCBShape` and `RooSDSCBShape`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6171
https://github.com/root-project/root/pull/6171:125,reliability,sli,slightly,125,WIP: Add (symmetric) double-sided Crystal Ball shape to RooFit; `RooCBShape` is commonly used in HEP analyses. This adds its slightly less common extrapolations `RooDSCBShape` and `RooSDSCBShape`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6171
https://github.com/root-project/root/pull/6172:120,availability,sli,slightly,120,Add (symmetric) double-sided Crystal Ball shape to RooFit; `RooCBShape` is commonly used in HEP analyses. This adds its slightly less common extrapolations `RooDSCBShape` and `RooSDSCBShape`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6172
https://github.com/root-project/root/pull/6172:120,reliability,sli,slightly,120,Add (symmetric) double-sided Crystal Ball shape to RooFit; `RooCBShape` is commonly used in HEP analyses. This adds its slightly less common extrapolations `RooDSCBShape` and `RooSDSCBShape`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6172
https://github.com/root-project/root/pull/6174:18,deployability,Updat,Update,18,"TBB Compatibility Update, master branch (2020.08.12.); Removed the forward declaration of [tbb::task_arena](https://software.intel.com/en-us/node/506359), as the ""real class"" is (a bit surprisingly) called `tbb::d1::task_arena` in [oneAPI](https://software.intel.com/oneapi)'s latest beta. https://github.com/oneapi-src/oneTBB/blob/onetbb_2021/include/tbb/task_arena.h. In any case, hardcoding a name like `tbb::interface7::task_arena` just doesn't seem like a good idea...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6174
https://github.com/root-project/root/pull/6174:4,interoperability,Compatib,Compatibility,4,"TBB Compatibility Update, master branch (2020.08.12.); Removed the forward declaration of [tbb::task_arena](https://software.intel.com/en-us/node/506359), as the ""real class"" is (a bit surprisingly) called `tbb::d1::task_arena` in [oneAPI](https://software.intel.com/oneapi)'s latest beta. https://github.com/oneapi-src/oneTBB/blob/onetbb_2021/include/tbb/task_arena.h. In any case, hardcoding a name like `tbb::interface7::task_arena` just doesn't seem like a good idea...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6174
https://github.com/root-project/root/pull/6174:441,reliability,doe,doesn,441,"TBB Compatibility Update, master branch (2020.08.12.); Removed the forward declaration of [tbb::task_arena](https://software.intel.com/en-us/node/506359), as the ""real class"" is (a bit surprisingly) called `tbb::d1::task_arena` in [oneAPI](https://software.intel.com/oneapi)'s latest beta. https://github.com/oneapi-src/oneTBB/blob/onetbb_2021/include/tbb/task_arena.h. In any case, hardcoding a name like `tbb::interface7::task_arena` just doesn't seem like a good idea...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6174
https://github.com/root-project/root/pull/6174:18,safety,Updat,Update,18,"TBB Compatibility Update, master branch (2020.08.12.); Removed the forward declaration of [tbb::task_arena](https://software.intel.com/en-us/node/506359), as the ""real class"" is (a bit surprisingly) called `tbb::d1::task_arena` in [oneAPI](https://software.intel.com/oneapi)'s latest beta. https://github.com/oneapi-src/oneTBB/blob/onetbb_2021/include/tbb/task_arena.h. In any case, hardcoding a name like `tbb::interface7::task_arena` just doesn't seem like a good idea...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6174
https://github.com/root-project/root/pull/6174:18,security,Updat,Update,18,"TBB Compatibility Update, master branch (2020.08.12.); Removed the forward declaration of [tbb::task_arena](https://software.intel.com/en-us/node/506359), as the ""real class"" is (a bit surprisingly) called `tbb::d1::task_arena` in [oneAPI](https://software.intel.com/oneapi)'s latest beta. https://github.com/oneapi-src/oneTBB/blob/onetbb_2021/include/tbb/task_arena.h. In any case, hardcoding a name like `tbb::interface7::task_arena` just doesn't seem like a good idea...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6174
https://github.com/root-project/root/pull/6174:383,security,hardcod,hardcoding,383,"TBB Compatibility Update, master branch (2020.08.12.); Removed the forward declaration of [tbb::task_arena](https://software.intel.com/en-us/node/506359), as the ""real class"" is (a bit surprisingly) called `tbb::d1::task_arena` in [oneAPI](https://software.intel.com/oneapi)'s latest beta. https://github.com/oneapi-src/oneTBB/blob/onetbb_2021/include/tbb/task_arena.h. In any case, hardcoding a name like `tbb::interface7::task_arena` just doesn't seem like a good idea...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6174
https://github.com/root-project/root/pull/6176:185,availability,Error,ErrorType,185,[roofit] fix gcc10 warning with uninitialized variables; roofit/roofitcore/src/RooVectorDataStore.cxx: In member function. ‘virtual Double_t RooVectorDataStore::weightError(RooAbsData::ErrorType). const’:. roofit/roofitcore/src/RooVectorDataStore.cxx:574:15:. warning: ‘lo’ may be used uninitialized in this function. [-Wmaybe-uninitialized]. 574 | return (lo+hi)/2 ;. | ~~~^~~~. roofit/roofitcore/src/RooVectorDataStore.cxx:574:15: warning: ‘hi’ may. be used uninitialized in this function [-Wmaybe-uninitialized],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6176
https://github.com/root-project/root/pull/6176:46,modifiability,variab,variables,46,[roofit] fix gcc10 warning with uninitialized variables; roofit/roofitcore/src/RooVectorDataStore.cxx: In member function. ‘virtual Double_t RooVectorDataStore::weightError(RooAbsData::ErrorType). const’:. roofit/roofitcore/src/RooVectorDataStore.cxx:574:15:. warning: ‘lo’ may be used uninitialized in this function. [-Wmaybe-uninitialized]. 574 | return (lo+hi)/2 ;. | ~~~^~~~. roofit/roofitcore/src/RooVectorDataStore.cxx:574:15: warning: ‘hi’ may. be used uninitialized in this function [-Wmaybe-uninitialized],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6176
https://github.com/root-project/root/pull/6176:185,performance,Error,ErrorType,185,[roofit] fix gcc10 warning with uninitialized variables; roofit/roofitcore/src/RooVectorDataStore.cxx: In member function. ‘virtual Double_t RooVectorDataStore::weightError(RooAbsData::ErrorType). const’:. roofit/roofitcore/src/RooVectorDataStore.cxx:574:15:. warning: ‘lo’ may be used uninitialized in this function. [-Wmaybe-uninitialized]. 574 | return (lo+hi)/2 ;. | ~~~^~~~. roofit/roofitcore/src/RooVectorDataStore.cxx:574:15: warning: ‘hi’ may. be used uninitialized in this function [-Wmaybe-uninitialized],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6176
https://github.com/root-project/root/pull/6176:185,safety,Error,ErrorType,185,[roofit] fix gcc10 warning with uninitialized variables; roofit/roofitcore/src/RooVectorDataStore.cxx: In member function. ‘virtual Double_t RooVectorDataStore::weightError(RooAbsData::ErrorType). const’:. roofit/roofitcore/src/RooVectorDataStore.cxx:574:15:. warning: ‘lo’ may be used uninitialized in this function. [-Wmaybe-uninitialized]. 574 | return (lo+hi)/2 ;. | ~~~^~~~. roofit/roofitcore/src/RooVectorDataStore.cxx:574:15: warning: ‘hi’ may. be used uninitialized in this function [-Wmaybe-uninitialized],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6176
https://github.com/root-project/root/pull/6176:185,usability,Error,ErrorType,185,[roofit] fix gcc10 warning with uninitialized variables; roofit/roofitcore/src/RooVectorDataStore.cxx: In member function. ‘virtual Double_t RooVectorDataStore::weightError(RooAbsData::ErrorType). const’:. roofit/roofitcore/src/RooVectorDataStore.cxx:574:15:. warning: ‘lo’ may be used uninitialized in this function. [-Wmaybe-uninitialized]. 574 | return (lo+hi)/2 ;. | ~~~^~~~. roofit/roofitcore/src/RooVectorDataStore.cxx:574:15: warning: ‘hi’ may. be used uninitialized in this function [-Wmaybe-uninitialized],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6176
https://github.com/root-project/root/pull/6178:458,deployability,depend,depend,458,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:493,deployability,observ,observables,493,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:752,deployability,Automat,Automatic,752,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:857,deployability,build,build,857,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:69,integrability,batch,batch,69,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:142,integrability,batch,batch,142,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:148,integrability,interfac,interface,148,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:458,integrability,depend,depend,458,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:148,interoperability,interfac,interface,148,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:148,modifiability,interfac,interface,148,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:458,modifiability,depend,depend,458,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:468,modifiability,paramet,parameters,468,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:69,performance,batch,batch,69,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:142,performance,batch,batch,142,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:113,reliability,doe,doesn,113,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:450,reliability,doe,doesn,450,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:458,safety,depend,depend,458,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:629,safety,test,test,629,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:821,safety,test,test,821,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:458,testability,depend,depend,458,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:493,testability,observ,observables,493,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:629,testability,test,test,629,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:752,testability,Automat,Automatic,752,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6178:821,testability,test,test,821,"[RF] Fix ROOT-10987.; Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. **NB**:. The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come). Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6178
https://github.com/root-project/root/pull/6179:36,deployability,modul,modules,36,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:132,deployability,Modul,Module,132,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:139,deployability,build,builds,139,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:16,integrability,Configur,Configure,16,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:16,modifiability,Configur,Configure,16,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:36,modifiability,modul,modules,36,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:132,modifiability,Modul,Module,132,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:26,safety,test,tests,26,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:36,safety,modul,modules,36,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:101,safety,test,tests,101,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:132,safety,Modul,Module,132,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:16,security,Configur,Configure,16,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:26,testability,test,tests,26,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:101,testability,test,tests,101,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6179:88,usability,behavi,behaviour,88,[wincxxmodules] Configure tests for modules on Windows; This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6179
https://github.com/root-project/root/pull/6180:195,deployability,fail,fails,195,"[jupyterlab] do not use require.js with JSROOT; require.js was used in jupyter notebook by default, therefore was used. also for JSROOT. In jupyter lab one can load JSROOT direcrtly. . If JSROOT fails to load from static location, default. https://root.cern/js/notebook/ version will be used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6180
https://github.com/root-project/root/pull/6180:271,deployability,version,version,271,"[jupyterlab] do not use require.js with JSROOT; require.js was used in jupyter notebook by default, therefore was used. also for JSROOT. In jupyter lab one can load JSROOT direcrtly. . If JSROOT fails to load from static location, default. https://root.cern/js/notebook/ version will be used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6180
https://github.com/root-project/root/pull/6180:160,energy efficiency,load,load,160,"[jupyterlab] do not use require.js with JSROOT; require.js was used in jupyter notebook by default, therefore was used. also for JSROOT. In jupyter lab one can load JSROOT direcrtly. . If JSROOT fails to load from static location, default. https://root.cern/js/notebook/ version will be used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6180
https://github.com/root-project/root/pull/6180:204,energy efficiency,load,load,204,"[jupyterlab] do not use require.js with JSROOT; require.js was used in jupyter notebook by default, therefore was used. also for JSROOT. In jupyter lab one can load JSROOT direcrtly. . If JSROOT fails to load from static location, default. https://root.cern/js/notebook/ version will be used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6180
https://github.com/root-project/root/pull/6180:271,integrability,version,version,271,"[jupyterlab] do not use require.js with JSROOT; require.js was used in jupyter notebook by default, therefore was used. also for JSROOT. In jupyter lab one can load JSROOT direcrtly. . If JSROOT fails to load from static location, default. https://root.cern/js/notebook/ version will be used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6180
https://github.com/root-project/root/pull/6180:271,modifiability,version,version,271,"[jupyterlab] do not use require.js with JSROOT; require.js was used in jupyter notebook by default, therefore was used. also for JSROOT. In jupyter lab one can load JSROOT direcrtly. . If JSROOT fails to load from static location, default. https://root.cern/js/notebook/ version will be used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6180
https://github.com/root-project/root/pull/6180:160,performance,load,load,160,"[jupyterlab] do not use require.js with JSROOT; require.js was used in jupyter notebook by default, therefore was used. also for JSROOT. In jupyter lab one can load JSROOT direcrtly. . If JSROOT fails to load from static location, default. https://root.cern/js/notebook/ version will be used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6180
https://github.com/root-project/root/pull/6180:204,performance,load,load,204,"[jupyterlab] do not use require.js with JSROOT; require.js was used in jupyter notebook by default, therefore was used. also for JSROOT. In jupyter lab one can load JSROOT direcrtly. . If JSROOT fails to load from static location, default. https://root.cern/js/notebook/ version will be used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6180
https://github.com/root-project/root/pull/6180:195,reliability,fail,fails,195,"[jupyterlab] do not use require.js with JSROOT; require.js was used in jupyter notebook by default, therefore was used. also for JSROOT. In jupyter lab one can load JSROOT direcrtly. . If JSROOT fails to load from static location, default. https://root.cern/js/notebook/ version will be used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6180
https://github.com/root-project/root/pull/6181:200,deployability,version,version,200,"Use the correct way of linking Python libs on Windows; Replace ${PYTHON_LIBRARIES_Development_Main} by ${python_library}, since ${PYTHON_LIBRARIES_Development_Main} always point to the highest python version, but there could be two versions (Python2 and Python3). Thanks to Enric for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6181
https://github.com/root-project/root/pull/6181:232,deployability,version,versions,232,"Use the correct way of linking Python libs on Windows; Replace ${PYTHON_LIBRARIES_Development_Main} by ${python_library}, since ${PYTHON_LIBRARIES_Development_Main} always point to the highest python version, but there could be two versions (Python2 and Python3). Thanks to Enric for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6181
https://github.com/root-project/root/pull/6181:200,integrability,version,version,200,"Use the correct way of linking Python libs on Windows; Replace ${PYTHON_LIBRARIES_Development_Main} by ${python_library}, since ${PYTHON_LIBRARIES_Development_Main} always point to the highest python version, but there could be two versions (Python2 and Python3). Thanks to Enric for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6181
https://github.com/root-project/root/pull/6181:232,integrability,version,versions,232,"Use the correct way of linking Python libs on Windows; Replace ${PYTHON_LIBRARIES_Development_Main} by ${python_library}, since ${PYTHON_LIBRARIES_Development_Main} always point to the highest python version, but there could be two versions (Python2 and Python3). Thanks to Enric for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6181
https://github.com/root-project/root/pull/6181:200,modifiability,version,version,200,"Use the correct way of linking Python libs on Windows; Replace ${PYTHON_LIBRARIES_Development_Main} by ${python_library}, since ${PYTHON_LIBRARIES_Development_Main} always point to the highest python version, but there could be two versions (Python2 and Python3). Thanks to Enric for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6181
https://github.com/root-project/root/pull/6181:232,modifiability,version,versions,232,"Use the correct way of linking Python libs on Windows; Replace ${PYTHON_LIBRARIES_Development_Main} by ${python_library}, since ${PYTHON_LIBRARIES_Development_Main} always point to the highest python version, but there could be two versions (Python2 and Python3). Thanks to Enric for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6181
https://github.com/root-project/root/pull/6183:430,deployability,depend,depend,430,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:465,deployability,observ,observables,465,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:41,integrability,batch,batch,41,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:114,integrability,batch,batch,114,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:120,integrability,interfac,interface,120,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:430,integrability,depend,depend,430,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:120,interoperability,interfac,interface,120,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:120,modifiability,interfac,interface,120,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:430,modifiability,depend,depend,430,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:440,modifiability,paramet,parameters,440,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:41,performance,batch,batch,41,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:114,performance,batch,batch,114,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:85,reliability,doe,doesn,85,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:422,reliability,doe,doesn,422,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:430,safety,depend,depend,430,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:430,testability,depend,depend,430,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6183:465,testability,observ,observables,465,"[RF] Circumvent precalculated values for batch evaluations.; [ROOT-10987] When a PDF doesn't implement the faster batch interface,. RooFit's old, single-value computations have to be used as a fallback. If RooFit, however, tries to precalculate those values, the nodes of. the computation graph will always yield the same wrong value, since. they are switched to ""always clean"". This happens e.g. when a node of the graph doesn't depend on parameters,. but only on observables. To fix this, the global static that inihibits ""always clean"" has to be. set while the computation is running. (cherry picked from commit 47da6c180b7edd69dcb309fe06197cc50ffc538f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6183
https://github.com/root-project/root/pull/6184:441,deployability,API,API,441,"Shift to standard C++ filestreams when generating _rdict files; On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6184
https://github.com/root-project/root/pull/6184:441,integrability,API,API,441,"Shift to standard C++ filestreams when generating _rdict files; On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6184
https://github.com/root-project/root/pull/6184:9,interoperability,standard,standard,9,"Shift to standard C++ filestreams when generating _rdict files; On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6184
https://github.com/root-project/root/pull/6184:351,interoperability,standard,standard,351,"Shift to standard C++ filestreams when generating _rdict files; On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6184
https://github.com/root-project/root/pull/6184:441,interoperability,API,API,441,"Shift to standard C++ filestreams when generating _rdict files; On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6184
https://github.com/root-project/root/pull/6184:256,safety,review,reviews,256,"Shift to standard C++ filestreams when generating _rdict files; On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6184
https://github.com/root-project/root/pull/6184:413,safety,avoid,avoid,413,"Shift to standard C++ filestreams when generating _rdict files; On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6184
https://github.com/root-project/root/pull/6184:256,testability,review,reviews,256,"Shift to standard C++ filestreams when generating _rdict files; On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6184
https://github.com/root-project/root/pull/6185:115,integrability,wrap,wrappers,115,"[PyROOT][ROOT-10872] Fixes for inheritance; This PR includes reverts the previous changes to the generation of C++ wrappers during C++-Python inheritance, and introduces a fix to not mistake a move constructor of the base class for a copy constructor. It also introduces the support for protected methods and data members during the generation of the C++ wrapper. Both fixes were taken from upstream cppyy. The PR relies on a previous fix on ROOT meta: https://github.com/root-project/root/pull/6173",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6185
https://github.com/root-project/root/pull/6185:355,integrability,wrap,wrapper,355,"[PyROOT][ROOT-10872] Fixes for inheritance; This PR includes reverts the previous changes to the generation of C++ wrappers during C++-Python inheritance, and introduces a fix to not mistake a move constructor of the base class for a copy constructor. It also introduces the support for protected methods and data members during the generation of the C++ wrapper. Both fixes were taken from upstream cppyy. The PR relies on a previous fix on ROOT meta: https://github.com/root-project/root/pull/6173",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6185
https://github.com/root-project/root/pull/6185:115,interoperability,wrapper,wrappers,115,"[PyROOT][ROOT-10872] Fixes for inheritance; This PR includes reverts the previous changes to the generation of C++ wrappers during C++-Python inheritance, and introduces a fix to not mistake a move constructor of the base class for a copy constructor. It also introduces the support for protected methods and data members during the generation of the C++ wrapper. Both fixes were taken from upstream cppyy. The PR relies on a previous fix on ROOT meta: https://github.com/root-project/root/pull/6173",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6185
https://github.com/root-project/root/pull/6185:355,interoperability,wrapper,wrapper,355,"[PyROOT][ROOT-10872] Fixes for inheritance; This PR includes reverts the previous changes to the generation of C++ wrappers during C++-Python inheritance, and introduces a fix to not mistake a move constructor of the base class for a copy constructor. It also introduces the support for protected methods and data members during the generation of the C++ wrapper. Both fixes were taken from upstream cppyy. The PR relies on a previous fix on ROOT meta: https://github.com/root-project/root/pull/6173",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6185
https://github.com/root-project/root/pull/6185:31,modifiability,inherit,inheritance,31,"[PyROOT][ROOT-10872] Fixes for inheritance; This PR includes reverts the previous changes to the generation of C++ wrappers during C++-Python inheritance, and introduces a fix to not mistake a move constructor of the base class for a copy constructor. It also introduces the support for protected methods and data members during the generation of the C++ wrapper. Both fixes were taken from upstream cppyy. The PR relies on a previous fix on ROOT meta: https://github.com/root-project/root/pull/6173",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6185
https://github.com/root-project/root/pull/6185:142,modifiability,inherit,inheritance,142,"[PyROOT][ROOT-10872] Fixes for inheritance; This PR includes reverts the previous changes to the generation of C++ wrappers during C++-Python inheritance, and introduces a fix to not mistake a move constructor of the base class for a copy constructor. It also introduces the support for protected methods and data members during the generation of the C++ wrapper. Both fixes were taken from upstream cppyy. The PR relies on a previous fix on ROOT meta: https://github.com/root-project/root/pull/6173",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6185
https://github.com/root-project/root/pull/6185:275,usability,support,support,275,"[PyROOT][ROOT-10872] Fixes for inheritance; This PR includes reverts the previous changes to the generation of C++ wrappers during C++-Python inheritance, and introduces a fix to not mistake a move constructor of the base class for a copy constructor. It also introduces the support for protected methods and data members during the generation of the C++ wrapper. Both fixes were taken from upstream cppyy. The PR relies on a previous fix on ROOT meta: https://github.com/root-project/root/pull/6173",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6185
https://github.com/root-project/root/pull/6186:24,deployability,modul,modulemap,24,[skip-ci] Improve boost modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6186
https://github.com/root-project/root/pull/6186:24,modifiability,modul,modulemap,24,[skip-ci] Improve boost modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6186
https://github.com/root-project/root/pull/6186:24,safety,modul,modulemap,24,[skip-ci] Improve boost modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6186
https://github.com/root-project/root/pull/6187:41,modifiability,inherit,inheritance,41,[PyROOT][TCling] Backport 622: Fixes for inheritance; Backport of https://github.com/root-project/root/pull/6185 and https://github.com/root-project/root/pull/6173,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6187
https://github.com/root-project/root/pull/6189:6,safety,Test,Test,6,[IMT] Test thread safety of task arena and TThreadExecutor.; This proves that ROOT-10762 is not an issue.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6189
https://github.com/root-project/root/pull/6189:18,safety,safe,safety,18,[IMT] Test thread safety of task arena and TThreadExecutor.; This proves that ROOT-10762 is not an issue.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6189
https://github.com/root-project/root/pull/6189:6,testability,Test,Test,6,[IMT] Test thread safety of task arena and TThreadExecutor.; This proves that ROOT-10762 is not an issue.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6189
https://github.com/root-project/root/pull/6190:240,availability,redund,redundant,240,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:22,deployability,modul,modules,22,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:88,deployability,modul,modules,88,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:240,deployability,redundan,redundant,240,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:250,deployability,modul,modules,250,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:13,energy efficiency,load,load,13,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:67,energy efficiency,reduc,reduce,67,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:99,energy efficiency,load,load,99,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:226,energy efficiency,load,loading,226,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:22,modifiability,modul,modules,22,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:88,modifiability,modul,modules,88,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:250,modifiability,modul,modules,250,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:13,performance,load,load,13,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:99,performance,load,load,99,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:174,performance,memor,memory,174,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:226,performance,load,loading,226,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:240,reliability,redundan,redundant,240,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:22,safety,modul,modules,22,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:88,safety,modul,modules,88,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:240,safety,redund,redundant,240,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:250,safety,modul,modules,250,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:42,security,ident,identifier,42,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6190:174,usability,memor,memory,174,[gmi] Do not load all modules for a given identifier.; This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6190
https://github.com/root-project/root/pull/6191:120,deployability,contain,contains,120,"Re-implement TWinNTSystem::GetLibraries(); Re-implement TWinNTSystem::GetLibraries() to make sure the list of libraries contains only existing - and reachable - `.lib` files. - Get the list of DLLs loaded in the current process. - Get the list of directories from the `%LIB%` environment variable. - For every DLL, check if the matching `.lib` file is found in one of the `LIB` directories. - Keep only the found ones and the `/LIBPATH:dir` linker option, if any. This also allows the user to add a directory in the `%LIB%` environment variable if a custon library is needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6191
https://github.com/root-project/root/pull/6191:198,energy efficiency,load,loaded,198,"Re-implement TWinNTSystem::GetLibraries(); Re-implement TWinNTSystem::GetLibraries() to make sure the list of libraries contains only existing - and reachable - `.lib` files. - Get the list of DLLs loaded in the current process. - Get the list of directories from the `%LIB%` environment variable. - For every DLL, check if the matching `.lib` file is found in one of the `LIB` directories. - Keep only the found ones and the `/LIBPATH:dir` linker option, if any. This also allows the user to add a directory in the `%LIB%` environment variable if a custon library is needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6191
https://github.com/root-project/root/pull/6191:212,energy efficiency,current,current,212,"Re-implement TWinNTSystem::GetLibraries(); Re-implement TWinNTSystem::GetLibraries() to make sure the list of libraries contains only existing - and reachable - `.lib` files. - Get the list of DLLs loaded in the current process. - Get the list of directories from the `%LIB%` environment variable. - For every DLL, check if the matching `.lib` file is found in one of the `LIB` directories. - Keep only the found ones and the `/LIBPATH:dir` linker option, if any. This also allows the user to add a directory in the `%LIB%` environment variable if a custon library is needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6191
https://github.com/root-project/root/pull/6191:288,modifiability,variab,variable,288,"Re-implement TWinNTSystem::GetLibraries(); Re-implement TWinNTSystem::GetLibraries() to make sure the list of libraries contains only existing - and reachable - `.lib` files. - Get the list of DLLs loaded in the current process. - Get the list of directories from the `%LIB%` environment variable. - For every DLL, check if the matching `.lib` file is found in one of the `LIB` directories. - Keep only the found ones and the `/LIBPATH:dir` linker option, if any. This also allows the user to add a directory in the `%LIB%` environment variable if a custon library is needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6191
https://github.com/root-project/root/pull/6191:536,modifiability,variab,variable,536,"Re-implement TWinNTSystem::GetLibraries(); Re-implement TWinNTSystem::GetLibraries() to make sure the list of libraries contains only existing - and reachable - `.lib` files. - Get the list of DLLs loaded in the current process. - Get the list of directories from the `%LIB%` environment variable. - For every DLL, check if the matching `.lib` file is found in one of the `LIB` directories. - Keep only the found ones and the `/LIBPATH:dir` linker option, if any. This also allows the user to add a directory in the `%LIB%` environment variable if a custon library is needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6191
https://github.com/root-project/root/pull/6191:198,performance,load,loaded,198,"Re-implement TWinNTSystem::GetLibraries(); Re-implement TWinNTSystem::GetLibraries() to make sure the list of libraries contains only existing - and reachable - `.lib` files. - Get the list of DLLs loaded in the current process. - Get the list of directories from the `%LIB%` environment variable. - For every DLL, check if the matching `.lib` file is found in one of the `LIB` directories. - Keep only the found ones and the `/LIBPATH:dir` linker option, if any. This also allows the user to add a directory in the `%LIB%` environment variable if a custon library is needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6191
https://github.com/root-project/root/pull/6191:485,usability,user,user,485,"Re-implement TWinNTSystem::GetLibraries(); Re-implement TWinNTSystem::GetLibraries() to make sure the list of libraries contains only existing - and reachable - `.lib` files. - Get the list of DLLs loaded in the current process. - Get the list of directories from the `%LIB%` environment variable. - For every DLL, check if the matching `.lib` file is found in one of the `LIB` directories. - Keep only the found ones and the `/LIBPATH:dir` linker option, if any. This also allows the user to add a directory in the `%LIB%` environment variable if a custon library is needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6191
https://github.com/root-project/root/pull/6192:28,safety,test,test,28,[IMT] Remove duplicate unit test.; The IMT tests were both registered with ROOT_ADD_GTEST and. ROOT_ADD_UNITTEST_DIR. The latter was removed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6192
https://github.com/root-project/root/pull/6192:43,safety,test,tests,43,[IMT] Remove duplicate unit test.; The IMT tests were both registered with ROOT_ADD_GTEST and. ROOT_ADD_UNITTEST_DIR. The latter was removed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6192
https://github.com/root-project/root/pull/6192:23,testability,unit,unit,23,[IMT] Remove duplicate unit test.; The IMT tests were both registered with ROOT_ADD_GTEST and. ROOT_ADD_UNITTEST_DIR. The latter was removed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6192
https://github.com/root-project/root/pull/6192:28,testability,test,test,28,[IMT] Remove duplicate unit test.; The IMT tests were both registered with ROOT_ADD_GTEST and. ROOT_ADD_UNITTEST_DIR. The latter was removed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6192
https://github.com/root-project/root/pull/6192:43,testability,test,tests,43,[IMT] Remove duplicate unit test.; The IMT tests were both registered with ROOT_ADD_GTEST and. ROOT_ADD_UNITTEST_DIR. The latter was removed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6192
https://github.com/root-project/root/pull/6194:379,availability,sli,slider,379,"Fix Jira issue #ROOT-8817 Rounding issue with float(entries-1) in TTreeViewer; `TGDoubleSlider`, `TGTripleSlider`: Replace `Float_t` by `Double_t` internally, and provide methods accordingly, keeping the backward compatible ones. `TTreeViewer`: Replace the `Float_t` methods by the `Double_t` ones, allowing to increase precision and range of the ""entries"" left-hand side double slider",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6194
https://github.com/root-project/root/pull/6194:213,interoperability,compatib,compatible,213,"Fix Jira issue #ROOT-8817 Rounding issue with float(entries-1) in TTreeViewer; `TGDoubleSlider`, `TGTripleSlider`: Replace `Float_t` by `Double_t` internally, and provide methods accordingly, keeping the backward compatible ones. `TTreeViewer`: Replace the `Float_t` methods by the `Double_t` ones, allowing to increase precision and range of the ""entries"" left-hand side double slider",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6194
https://github.com/root-project/root/pull/6194:379,reliability,sli,slider,379,"Fix Jira issue #ROOT-8817 Rounding issue with float(entries-1) in TTreeViewer; `TGDoubleSlider`, `TGTripleSlider`: Replace `Float_t` by `Double_t` internally, and provide methods accordingly, keeping the backward compatible ones. `TTreeViewer`: Replace the `Float_t` methods by the `Double_t` ones, allowing to increase precision and range of the ""entries"" left-hand side double slider",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6194
https://github.com/root-project/root/pull/6195:540,availability,consist,consistently,540,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:612,availability,toler,tolerance,612,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:27,energy efficiency,profil,profiling,27,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:134,energy efficiency,profil,profiled,134,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:271,energy efficiency,profil,profiled,271,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:46,modifiability,paramet,parameters,46,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:152,modifiability,paramet,parameters,152,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:27,performance,profil,profiling,27,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:134,performance,profil,profiled,134,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:271,performance,profil,profiled,271,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:612,reliability,toleran,tolerance,612,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:640,safety,test,tests,640,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:0,security,Control,Control,0,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:492,security,control,control,492,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:0,testability,Control,Control,0,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:492,testability,control,control,492,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:640,testability,test,tests,640,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:12,usability,Minim,Minimizer,12,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:105,usability,minim,minimizer,105,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:378,usability,minim,minimizer,378,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:540,usability,consist,consistently,540,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:585,usability,minim,minimizer,585,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6195:698,usability,minim,minimizer,698,"Control the Minimizer when profiling nuisance parameters in the FrequentistCalculator; Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used. Change now to use the static default value, which can be changed and also give possibility to control printlevel. With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6195
https://github.com/root-project/root/pull/6196:500,availability,down,down,500,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:260,deployability,build,build,260,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:360,deployability,updat,update,360,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:266,integrability,event,events,266,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:518,integrability,messag,message,518,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:518,interoperability,messag,message,518,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:233,performance,time,time,233,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:371,performance,time,timestamp,371,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:8,safety,Compl,Complain,8,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:360,safety,updat,update,360,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:8,security,Compl,Complain,8,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:360,security,updat,update,360,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6196:143,usability,support,supports,143,"[cmake] Complain if ninja too new an CMake too old:; Apple has switched to high-resolution timing for APFS, giving mu second resolution. Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,. causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,. to update its timestamp. That means:. On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the. CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6196
https://github.com/root-project/root/pull/6197:151,availability,error,error,151,Remove duplicated semicolon in TVirtualPaveStats; This double semicolon causes compilation with pedantic gcc settings in newer version to stop with an error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6197
https://github.com/root-project/root/pull/6197:127,deployability,version,version,127,Remove duplicated semicolon in TVirtualPaveStats; This double semicolon causes compilation with pedantic gcc settings in newer version to stop with an error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6197
https://github.com/root-project/root/pull/6197:127,integrability,version,version,127,Remove duplicated semicolon in TVirtualPaveStats; This double semicolon causes compilation with pedantic gcc settings in newer version to stop with an error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6197
https://github.com/root-project/root/pull/6197:127,modifiability,version,version,127,Remove duplicated semicolon in TVirtualPaveStats; This double semicolon causes compilation with pedantic gcc settings in newer version to stop with an error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6197
https://github.com/root-project/root/pull/6197:151,performance,error,error,151,Remove duplicated semicolon in TVirtualPaveStats; This double semicolon causes compilation with pedantic gcc settings in newer version to stop with an error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6197
https://github.com/root-project/root/pull/6197:151,safety,error,error,151,Remove duplicated semicolon in TVirtualPaveStats; This double semicolon causes compilation with pedantic gcc settings in newer version to stop with an error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6197
https://github.com/root-project/root/pull/6197:138,usability,stop,stop,138,Remove duplicated semicolon in TVirtualPaveStats; This double semicolon causes compilation with pedantic gcc settings in newer version to stop with an error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6197
https://github.com/root-project/root/pull/6197:151,usability,error,error,151,Remove duplicated semicolon in TVirtualPaveStats; This double semicolon causes compilation with pedantic gcc settings in newer version to stop with an error,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6197
https://github.com/root-project/root/pull/6198:78,security,control,controller,78,Eve-7 Add REveCaloData editor; This change required some restructuring in Ged.controller.js because some class editors need more flexibility in GUI definition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6198
https://github.com/root-project/root/pull/6198:78,testability,control,controller,78,Eve-7 Add REveCaloData editor; This change required some restructuring in Ged.controller.js because some class editors need more flexibility in GUI definition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6198
https://github.com/root-project/root/pull/6199:48,availability,operat,operator,48,[boost] Ignore dinkumware.hpp working around an operator= module mismatch; cc: @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6199
https://github.com/root-project/root/pull/6199:58,deployability,modul,module,58,[boost] Ignore dinkumware.hpp working around an operator= module mismatch; cc: @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6199
https://github.com/root-project/root/pull/6199:65,interoperability,mismatch,mismatch,65,[boost] Ignore dinkumware.hpp working around an operator= module mismatch; cc: @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6199
https://github.com/root-project/root/pull/6199:58,modifiability,modul,module,58,[boost] Ignore dinkumware.hpp working around an operator= module mismatch; cc: @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6199
https://github.com/root-project/root/pull/6199:58,safety,modul,module,58,[boost] Ignore dinkumware.hpp working around an operator= module mismatch; cc: @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6199
https://github.com/root-project/root/pull/6202:35,integrability,messag,message,35,[JupyROOT] Add header with license message; ... plus authors if necessary.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6202
https://github.com/root-project/root/pull/6202:35,interoperability,messag,message,35,[JupyROOT] Add header with license message; ... plus authors if necessary.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6202
https://github.com/root-project/root/pull/6202:53,security,auth,authors,53,[JupyROOT] Add header with license message; ... plus authors if necessary.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6202
https://github.com/root-project/root/pull/6205:11,deployability,instal,installation,11,Fix PyROOT installation on Windows; The `.dll` and `.pyd` files must go into the `%ROOTSYS%\bin` directory on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6205
https://github.com/root-project/root/pull/6206:16,deployability,version,version,16,Cling 157; ROOT version of https://github.com/root-project/cling/pull/157,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6206
https://github.com/root-project/root/pull/6206:16,integrability,version,version,16,Cling 157; ROOT version of https://github.com/root-project/cling/pull/157,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6206
https://github.com/root-project/root/pull/6206:16,modifiability,version,version,16,Cling 157; ROOT version of https://github.com/root-project/cling/pull/157,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6206
https://github.com/root-project/root/pull/6207:51,deployability,releas,release,51,[skip-ci][DOCS] Mention CMAKE_INSTALL_PYTHONDIR in release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6207
https://github.com/root-project/root/pull/6208:267,deployability,log,logic,267,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:465,deployability,Log,Logic,465,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:196,performance,content,contents,196,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:267,safety,log,logic,267,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:465,safety,Log,Logic,465,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:486,safety,avoid,avoid,486,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:210,security,access,accessed,210,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:267,security,log,logic,267,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:465,security,Log,Logic,465,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:557,security,access,accesses,557,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:5,testability,Simpl,Simplify,5,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:267,testability,log,logic,267,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:465,testability,Log,Logic,465,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:474,testability,simpl,simpler,474,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:5,usability,Simpl,Simplify,5,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:474,usability,simpl,simpler,474,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6208:579,usability,close,closer,579,"[DF] Simplify reading of RDataSource columns ; Before this commit, RDataSource columns were treated like a special. kind of Defined columns: they were registered in RBookedCustomColumn. and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns. corresponding to the RDS columns. Instead, we store the RDS column value. pointers in a dedicated std::map and teach RDSColumnReader to directly. use that. Logic is simpler, we avoid an extra function call and an extra. copy upon data-source value accesses, and we move closer to implementing. column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6208
https://github.com/root-project/root/pull/6211:42,interoperability,specif,specified,42,[cling] Fix warnings:; - default argument specified for lambda parameter [-Wpedantic];. - will be initialized after [-Wreorder],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6211
https://github.com/root-project/root/pull/6211:63,modifiability,paramet,parameter,63,[cling] Fix warnings:; - default argument specified for lambda parameter [-Wpedantic];. - will be initialized after [-Wreorder],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6211
https://github.com/root-project/root/pull/6212:323,availability,operat,operator,323,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:428,deployability,stack,stack,428,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:668,deployability,fail,failed,668,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:978,integrability,Sub,Subscribers,978,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:241,modifiability,variab,variable,241,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:668,reliability,fail,failed,668,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:931,safety,Review,Reviewers,931,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:957,safety,Review,Reviewed,957,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:1059,safety,review,reviews,1059,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:112,security,access,access,112,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:383,security,access,accessing,383,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:291,testability,context,context,291,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:647,testability,assert,assertion,647,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:658,testability,Assert,Assertion,658,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:931,testability,Review,Reviewers,931,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:957,testability,Review,Reviewed,957,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6212:1059,testability,review,reviews,1059,"[backport] Fix creating fake definition data for lambdas.; During reading C++ definition data for lambda we can access. CXXRecordDecl representing lambda before we finished reading the. definition data. This can happen by reading a captured variable which is. VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,. then trying to merge redeclarable methods and accessing. enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl. ReadCXXRecordDefinition. VisitVarDecl. VisitCXXMethodDecl. mergeRedeclarable. getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6212
https://github.com/root-project/root/pull/6213:102,usability,custom,custom,102,"tree: Add missing nullptr check in SetLeavesPtr. Fix ROOT-11001.; When checking whether a class has a custom streamer, it can happen that there is no TClass for class. This can happen when the file a collection of object that is always empty",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6213
https://github.com/root-project/root/pull/6214:378,modifiability,pac,packing,378,"[DF] Fix out of bounds access in AddDSColumns; The Aggregate method was calling CheckAndFillDSColumns with an index sequence. of length 2 rather than 1 (the aggregator lambda does take 2 arguments,. but only the second corresponds to an RDF column). This resulted in. a harmless out of bounds access in a vector<bool>: two bits were checked. rather than one, but because of bit-packing the capacity of a vector<bool>. is always a multiple of 8 so this never resulted in access to invalid. memory (and because of zero-initialization, the out-of-bounds values always. happened to read to the harmless, ""correct"" value, `false`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6214
https://github.com/root-project/root/pull/6214:489,performance,memor,memory,489,"[DF] Fix out of bounds access in AddDSColumns; The Aggregate method was calling CheckAndFillDSColumns with an index sequence. of length 2 rather than 1 (the aggregator lambda does take 2 arguments,. but only the second corresponds to an RDF column). This resulted in. a harmless out of bounds access in a vector<bool>: two bits were checked. rather than one, but because of bit-packing the capacity of a vector<bool>. is always a multiple of 8 so this never resulted in access to invalid. memory (and because of zero-initialization, the out-of-bounds values always. happened to read to the harmless, ""correct"" value, `false`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6214
https://github.com/root-project/root/pull/6214:175,reliability,doe,does,175,"[DF] Fix out of bounds access in AddDSColumns; The Aggregate method was calling CheckAndFillDSColumns with an index sequence. of length 2 rather than 1 (the aggregator lambda does take 2 arguments,. but only the second corresponds to an RDF column). This resulted in. a harmless out of bounds access in a vector<bool>: two bits were checked. rather than one, but because of bit-packing the capacity of a vector<bool>. is always a multiple of 8 so this never resulted in access to invalid. memory (and because of zero-initialization, the out-of-bounds values always. happened to read to the harmless, ""correct"" value, `false`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6214
https://github.com/root-project/root/pull/6214:23,security,access,access,23,"[DF] Fix out of bounds access in AddDSColumns; The Aggregate method was calling CheckAndFillDSColumns with an index sequence. of length 2 rather than 1 (the aggregator lambda does take 2 arguments,. but only the second corresponds to an RDF column). This resulted in. a harmless out of bounds access in a vector<bool>: two bits were checked. rather than one, but because of bit-packing the capacity of a vector<bool>. is always a multiple of 8 so this never resulted in access to invalid. memory (and because of zero-initialization, the out-of-bounds values always. happened to read to the harmless, ""correct"" value, `false`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6214
https://github.com/root-project/root/pull/6214:293,security,access,access,293,"[DF] Fix out of bounds access in AddDSColumns; The Aggregate method was calling CheckAndFillDSColumns with an index sequence. of length 2 rather than 1 (the aggregator lambda does take 2 arguments,. but only the second corresponds to an RDF column). This resulted in. a harmless out of bounds access in a vector<bool>: two bits were checked. rather than one, but because of bit-packing the capacity of a vector<bool>. is always a multiple of 8 so this never resulted in access to invalid. memory (and because of zero-initialization, the out-of-bounds values always. happened to read to the harmless, ""correct"" value, `false`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6214
https://github.com/root-project/root/pull/6214:470,security,access,access,470,"[DF] Fix out of bounds access in AddDSColumns; The Aggregate method was calling CheckAndFillDSColumns with an index sequence. of length 2 rather than 1 (the aggregator lambda does take 2 arguments,. but only the second corresponds to an RDF column). This resulted in. a harmless out of bounds access in a vector<bool>: two bits were checked. rather than one, but because of bit-packing the capacity of a vector<bool>. is always a multiple of 8 so this never resulted in access to invalid. memory (and because of zero-initialization, the out-of-bounds values always. happened to read to the harmless, ""correct"" value, `false`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6214
https://github.com/root-project/root/pull/6214:489,usability,memor,memory,489,"[DF] Fix out of bounds access in AddDSColumns; The Aggregate method was calling CheckAndFillDSColumns with an index sequence. of length 2 rather than 1 (the aggregator lambda does take 2 arguments,. but only the second corresponds to an RDF column). This resulted in. a harmless out of bounds access in a vector<bool>: two bits were checked. rather than one, but because of bit-packing the capacity of a vector<bool>. is always a multiple of 8 so this never resulted in access to invalid. memory (and because of zero-initialization, the out-of-bounds values always. happened to read to the harmless, ""correct"" value, `false`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6214
https://github.com/root-project/root/pull/6215:20,deployability,fail,failing,20,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6215:164,deployability,modul,modules,164,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6215:203,deployability,fail,failing,203,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6215:164,modifiability,modul,modules,164,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6215:20,reliability,fail,failing,20,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6215:203,reliability,fail,failing,203,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6215:28,safety,test,tests,28,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6215:164,safety,modul,modules,164,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6215:211,safety,test,tests,211,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6215:28,testability,test,tests,28,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6215:211,testability,test,tests,211,"Fix or disable last failing tests on Windows; Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6215
https://github.com/root-project/root/pull/6216:109,usability,custom,custom,109,"Tree: Add missing nullptr check in SetLeavesPtr. Fix ROOT-11001. (6.22); When checking whether a class has a custom streamer, it can happen that there is no TClass for class. This can happen when the file a collection of object that is always empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6216
https://github.com/root-project/root/pull/6218:90,interoperability,registr,registration,90,Fix initialization of TFormula in multi-threads; Fix both the lazy initialization and the registration of the TFormula in the global list. This fixes both ROOT-10994 and ROOT-10995,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6218
https://github.com/root-project/root/pull/6218:34,performance,multi-thread,multi-threads,34,Fix initialization of TFormula in multi-threads; Fix both the lazy initialization and the registration of the TFormula in the global list. This fixes both ROOT-10994 and ROOT-10995,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6218
https://github.com/root-project/root/pull/6219:5,deployability,Updat,Update,5,"[RS] Update HypoTestInverterResult::ExclusionCleanup.; Update the cleanup routine. Add cleaning up failed fits as well, i.e.,. CLs < 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6219
https://github.com/root-project/root/pull/6219:55,deployability,Updat,Update,55,"[RS] Update HypoTestInverterResult::ExclusionCleanup.; Update the cleanup routine. Add cleaning up failed fits as well, i.e.,. CLs < 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6219
https://github.com/root-project/root/pull/6219:99,deployability,fail,failed,99,"[RS] Update HypoTestInverterResult::ExclusionCleanup.; Update the cleanup routine. Add cleaning up failed fits as well, i.e.,. CLs < 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6219
https://github.com/root-project/root/pull/6219:74,integrability,rout,routine,74,"[RS] Update HypoTestInverterResult::ExclusionCleanup.; Update the cleanup routine. Add cleaning up failed fits as well, i.e.,. CLs < 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6219
https://github.com/root-project/root/pull/6219:99,reliability,fail,failed,99,"[RS] Update HypoTestInverterResult::ExclusionCleanup.; Update the cleanup routine. Add cleaning up failed fits as well, i.e.,. CLs < 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6219
https://github.com/root-project/root/pull/6219:5,safety,Updat,Update,5,"[RS] Update HypoTestInverterResult::ExclusionCleanup.; Update the cleanup routine. Add cleaning up failed fits as well, i.e.,. CLs < 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6219
https://github.com/root-project/root/pull/6219:55,safety,Updat,Update,55,"[RS] Update HypoTestInverterResult::ExclusionCleanup.; Update the cleanup routine. Add cleaning up failed fits as well, i.e.,. CLs < 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6219
https://github.com/root-project/root/pull/6219:5,security,Updat,Update,5,"[RS] Update HypoTestInverterResult::ExclusionCleanup.; Update the cleanup routine. Add cleaning up failed fits as well, i.e.,. CLs < 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6219
https://github.com/root-project/root/pull/6219:55,security,Updat,Update,55,"[RS] Update HypoTestInverterResult::ExclusionCleanup.; Update the cleanup routine. Add cleaning up failed fits as well, i.e.,. CLs < 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6219
https://github.com/root-project/root/pull/6220:228,deployability,log,logic,228,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:426,deployability,contain,contains,426,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:453,deployability,log,logic,453,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:611,energy efficiency,reduc,reduce,611,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:228,safety,log,logic,228,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:338,safety,compl,complex,338,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:453,safety,log,logic,453,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:228,security,log,logic,228,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:338,security,compl,complex,338,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:453,security,log,logic,453,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:228,testability,log,logic,228,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:453,testability,log,logic,453,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:398,usability,help,helper,398,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6220:600,usability,help,helpers,600,"[DF] Unify RAction implementation: no need for 3 different template classes ; Before this commit, we had a generic RAction and two template. specializations for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. Common logic between the three was kept. in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction. class and a helper ActionImpl type that contains the parts of the. logic that needs to differ for `RAction<SnapshotHelper>` and. `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is. used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6220
https://github.com/root-project/root/pull/6221:0,deployability,Integr,Integrate,0,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:46,deployability,Integr,Integrate,46,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:0,integrability,Integr,Integrate,0,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:46,integrability,Integr,Integrate,46,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:0,interoperability,Integr,Integrate,0,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:46,interoperability,Integr,Integrate,46,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:0,modifiability,Integr,Integrate,0,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:46,modifiability,Integr,Integrate,46,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:0,reliability,Integr,Integrate,0,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:46,reliability,Integr,Integrate,46,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:0,security,Integr,Integrate,0,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:46,security,Integr,Integrate,46,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:0,testability,Integr,Integrate,0,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6221:46,testability,Integr,Integrate,46,Integrate Bitshuffle pre-conditioner for LZ4; Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6221
https://github.com/root-project/root/pull/6223:577,deployability,log,logic,577,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:651,deployability,releas,release,651,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1539,energy efficiency,profil,profilings,1539,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:278,integrability,messag,message,278,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1177,integrability,messag,message,1177,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:278,interoperability,messag,message,278,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1177,interoperability,messag,message,1177,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:516,modifiability,refact,refactorings,516,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:751,modifiability,refact,refactorings,751,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1293,modifiability,refact,refactorings,1293,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:516,performance,refactor,refactorings,516,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:695,performance,time,time,695,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:751,performance,refactor,refactorings,751,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1293,performance,refactor,refactorings,1293,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1527,performance,perform,performance,1527,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1539,performance,profil,profilings,1539,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:577,safety,log,logic,577,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1059,safety,compl,complain,1059,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1097,safety,compl,completely,1097,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:577,security,log,logic,577,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1059,security,compl,complain,1059,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1097,security,compl,completely,1097,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:577,testability,log,logic,577,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1144,testability,understand,understand,1144,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:70,usability,Custom,CustomColumn,70,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:108,usability,clear,clearer,108,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:777,usability,support,support,777,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1527,usability,perform,performance,1527,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6223:1575,usability,clear,clearly,1575,"[DF] Better names for things; The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:. * we are at a historical low of RDF-related open bugs -> less backports are expected in the future. * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now. * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes. * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns. or defined columns. Due to recent refactorings, RCustomColumns are now. back to serving only their original purpose: representing Define nodes. in the computation graph. RCustomColumn is a very opaque name, and it crops up when debugging,. reading code and looking at performance profilings. The new name,. RDefine, clearly describes what the class is supposed to do and it is in. line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:. RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes. RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6223
https://github.com/root-project/root/pull/6224:51,testability,Simpl,Simplify,51,[ntuple] Implement RNTupleWriter::Append(TFile &); Simplify writing multiple `RNTuple`s in a single open `TFile`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6224
https://github.com/root-project/root/pull/6224:51,usability,Simpl,Simplify,51,[ntuple] Implement RNTupleWriter::Append(TFile &); Simplify writing multiple `RNTuple`s in a single open `TFile`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6224
https://github.com/root-project/root/pull/6225:213,availability,error,error,213,"[6.20 backport] Compatibility with xrootd 5.; The old client library libXrdClient is removed. Also XrdSysDNS is removed. Do not build the legacy XProofD file server and client (already. disabled by default - give error if someone enables it while building. with xrootd 5). Do not build the old libNetx. Build the new libNetNG without XrdSysDNS, use XrdNetAddr instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6225
https://github.com/root-project/root/pull/6225:128,deployability,build,build,128,"[6.20 backport] Compatibility with xrootd 5.; The old client library libXrdClient is removed. Also XrdSysDNS is removed. Do not build the legacy XProofD file server and client (already. disabled by default - give error if someone enables it while building. with xrootd 5). Do not build the old libNetx. Build the new libNetNG without XrdSysDNS, use XrdNetAddr instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6225
https://github.com/root-project/root/pull/6225:247,deployability,build,building,247,"[6.20 backport] Compatibility with xrootd 5.; The old client library libXrdClient is removed. Also XrdSysDNS is removed. Do not build the legacy XProofD file server and client (already. disabled by default - give error if someone enables it while building. with xrootd 5). Do not build the old libNetx. Build the new libNetNG without XrdSysDNS, use XrdNetAddr instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6225
https://github.com/root-project/root/pull/6225:280,deployability,build,build,280,"[6.20 backport] Compatibility with xrootd 5.; The old client library libXrdClient is removed. Also XrdSysDNS is removed. Do not build the legacy XProofD file server and client (already. disabled by default - give error if someone enables it while building. with xrootd 5). Do not build the old libNetx. Build the new libNetNG without XrdSysDNS, use XrdNetAddr instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6225
https://github.com/root-project/root/pull/6225:303,deployability,Build,Build,303,"[6.20 backport] Compatibility with xrootd 5.; The old client library libXrdClient is removed. Also XrdSysDNS is removed. Do not build the legacy XProofD file server and client (already. disabled by default - give error if someone enables it while building. with xrootd 5). Do not build the old libNetx. Build the new libNetNG without XrdSysDNS, use XrdNetAddr instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6225
https://github.com/root-project/root/pull/6225:16,interoperability,Compatib,Compatibility,16,"[6.20 backport] Compatibility with xrootd 5.; The old client library libXrdClient is removed. Also XrdSysDNS is removed. Do not build the legacy XProofD file server and client (already. disabled by default - give error if someone enables it while building. with xrootd 5). Do not build the old libNetx. Build the new libNetNG without XrdSysDNS, use XrdNetAddr instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6225
https://github.com/root-project/root/pull/6225:213,performance,error,error,213,"[6.20 backport] Compatibility with xrootd 5.; The old client library libXrdClient is removed. Also XrdSysDNS is removed. Do not build the legacy XProofD file server and client (already. disabled by default - give error if someone enables it while building. with xrootd 5). Do not build the old libNetx. Build the new libNetNG without XrdSysDNS, use XrdNetAddr instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6225
https://github.com/root-project/root/pull/6225:213,safety,error,error,213,"[6.20 backport] Compatibility with xrootd 5.; The old client library libXrdClient is removed. Also XrdSysDNS is removed. Do not build the legacy XProofD file server and client (already. disabled by default - give error if someone enables it while building. with xrootd 5). Do not build the old libNetx. Build the new libNetNG without XrdSysDNS, use XrdNetAddr instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6225
https://github.com/root-project/root/pull/6225:213,usability,error,error,213,"[6.20 backport] Compatibility with xrootd 5.; The old client library libXrdClient is removed. Also XrdSysDNS is removed. Do not build the legacy XProofD file server and client (already. disabled by default - give error if someone enables it while building. with xrootd 5). Do not build the old libNetx. Build the new libNetNG without XrdSysDNS, use XrdNetAddr instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6225
https://github.com/root-project/root/pull/6227:50,deployability,modul,moduleMapFile,50,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:133,deployability,modul,modulemap,133,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:152,deployability,modul,moduleMapFile,152,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:185,deployability,fail,fails,185,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:120,interoperability,specif,specify,120,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:50,modifiability,modul,moduleMapFile,50,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:133,modifiability,modul,modulemap,133,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:152,modifiability,modul,moduleMapFile,152,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:185,reliability,fail,fails,185,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:50,safety,modul,moduleMapFile,50,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:133,safety,modul,modulemap,133,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6227:152,safety,modul,moduleMapFile,152,[wincxxmodules] Rename -fmodule-map-file flag to -moduleMapFile; This commit renames the -fmodule-map-file flag used to specify the. modulemap file to -moduleMapFile as ROOT on Windows fails to recognize. the flag. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6227
https://github.com/root-project/root/pull/6229:8,usability,Support,Support,8,"[cling] Support GCC10 type name:; (std::pair<std::__strip_reference_wrapper<const char *>::__type, std::__strip_reference_wrapper<int>::__type>) { ""s"", 10 }. i.e. the array size is not part of the type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6229
https://github.com/root-project/root/pull/6230:240,usability,Visual,Visual,240,"Move the workaround for latest VS2019 from rootcling_impl.cxx to CIFa…; …ctory.cpp. Following [this discussion on GitHub](https://github.com/root-project/cling/commit/df0e84968ab9fe7ea280b4ae78203675f68438f5#), move back the workaround for Visual Studio 2019 v16.7.0 from `rootcling_impl.cxx` to `CIFactory.cpp`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6230
https://github.com/root-project/root/pull/6231:740,availability,servic,services,740,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:932,availability,failur,failures,932,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:957,availability,servic,services,957,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:147,deployability,version,version,147,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:740,deployability,servic,services,740,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:909,deployability,build,builds,909,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:932,deployability,fail,failures,932,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:957,deployability,servic,services,957,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:488,energy efficiency,reduc,reducing,488,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:147,integrability,version,version,147,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:740,integrability,servic,services,740,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:957,integrability,servic,services,957,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:95,interoperability,incompatib,incompatibility,95,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:598,interoperability,incompatib,incompatibility,598,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:62,modifiability,refact,refactoring,62,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:147,modifiability,version,version,147,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:740,modifiability,servic,services,740,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:957,modifiability,servic,services,957,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:62,performance,refactor,refactoring,62,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:655,performance,memor,memory,655,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:932,performance,failur,failures,932,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:677,reliability,doe,does,677,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:932,reliability,fail,failures,932,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:804,safety,test,testReport,804,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:927,safety,test,test,927,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:637,security,access,access,637,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:804,testability,test,testReport,804,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:927,testability,test,test,927,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:565,usability,help,helper,565,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6231:655,usability,memor,memory,655,"[DF] Fix recently introduced crashes with gcc 7.5.0; A recent refactoring in RDF introduced an incompatibility with gcc. 7.5.0: clang and that gcc version disagree on the address of the. std::map argument passed to InitColumnReaders. RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct. address, but InitColumnReaders<...>, the _compiled_ callee, sees a. different address. For reasons known only to gcc 7.5.0, ~~moving the first function. argument to the last position~~ reducing the number of function. arguments (by aggregating some of them in a helper struct) resolves. the ABI incompatibility. Valgrind could see an access to invalid memory before, and it does. not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6231
https://github.com/root-project/root/pull/6232:87,energy efficiency,optim,optimize,87,[ROOT-11007] Fix ROOTBUILD defined in compiledata.h and used by ACLiC…; … to decide to optimize/not the user scripts,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6232
https://github.com/root-project/root/pull/6232:87,performance,optimiz,optimize,87,[ROOT-11007] Fix ROOTBUILD defined in compiledata.h and used by ACLiC…; … to decide to optimize/not the user scripts,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6232
https://github.com/root-project/root/pull/6232:104,usability,user,user,104,[ROOT-11007] Fix ROOTBUILD defined in compiledata.h and used by ACLiC…; … to decide to optimize/not the user scripts,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6232
https://github.com/root-project/root/pull/6233:5,deployability,build,building,5,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:60,deployability,build,build,60,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:66,deployability,depend,dependency,66,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:87,deployability,depend,dependency,87,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:103,deployability,build,building,103,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:129,deployability,version,version,129,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:66,integrability,depend,dependency,66,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:87,integrability,depend,dependency,87,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:129,integrability,version,version,129,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:66,modifiability,depend,dependency,66,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:87,modifiability,depend,dependency,87,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:129,modifiability,version,version,129,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:66,safety,depend,dependency,66,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:87,safety,depend,dependency,87,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:66,testability,depend,dependency,66,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6233:87,testability,depend,dependency,87,"When building ROOT's libGFAL using gfal2, srm-ifce is not a build dependency; It was a dependency when building it using the old version 1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6233
https://github.com/root-project/root/pull/6234:67,performance,content,content,67,Fixing a typo in TH1.cxx documentation; values calculates from bin content -> values calculated from bin content,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6234
https://github.com/root-project/root/pull/6234:105,performance,content,content,105,Fixing a typo in TH1.cxx documentation; values calculates from bin content -> values calculated from bin content,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6234
https://github.com/root-project/root/pull/6234:25,usability,document,documentation,25,Fixing a typo in TH1.cxx documentation; values calculates from bin content -> values calculated from bin content,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6234
https://github.com/root-project/root/pull/6235:12,modifiability,exten,extended,12,TFile::Map 'extended' option to add key name and title;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6235
https://github.com/root-project/root/pull/6236:102,deployability,version,version,102,"Add back line accidentally removed in commit 17bc17715524b4cc6b46324c428845e9ab945684; When --python2-version and --python3-version were added the root-config --usage, some other option were accidentally deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6236
https://github.com/root-project/root/pull/6236:124,deployability,version,version,124,"Add back line accidentally removed in commit 17bc17715524b4cc6b46324c428845e9ab945684; When --python2-version and --python3-version were added the root-config --usage, some other option were accidentally deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6236
https://github.com/root-project/root/pull/6236:102,integrability,version,version,102,"Add back line accidentally removed in commit 17bc17715524b4cc6b46324c428845e9ab945684; When --python2-version and --python3-version were added the root-config --usage, some other option were accidentally deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6236
https://github.com/root-project/root/pull/6236:124,integrability,version,version,124,"Add back line accidentally removed in commit 17bc17715524b4cc6b46324c428845e9ab945684; When --python2-version and --python3-version were added the root-config --usage, some other option were accidentally deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6236
https://github.com/root-project/root/pull/6236:102,modifiability,version,version,102,"Add back line accidentally removed in commit 17bc17715524b4cc6b46324c428845e9ab945684; When --python2-version and --python3-version were added the root-config --usage, some other option were accidentally deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6236
https://github.com/root-project/root/pull/6236:124,modifiability,version,version,124,"Add back line accidentally removed in commit 17bc17715524b4cc6b46324c428845e9ab945684; When --python2-version and --python3-version were added the root-config --usage, some other option were accidentally deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6236
https://github.com/root-project/root/pull/6236:14,safety,accid,accidentally,14,"Add back line accidentally removed in commit 17bc17715524b4cc6b46324c428845e9ab945684; When --python2-version and --python3-version were added the root-config --usage, some other option were accidentally deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6236
https://github.com/root-project/root/pull/6236:191,safety,accid,accidentally,191,"Add back line accidentally removed in commit 17bc17715524b4cc6b46324c428845e9ab945684; When --python2-version and --python3-version were added the root-config --usage, some other option were accidentally deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6236
https://github.com/root-project/root/pull/6237:0,deployability,Instal,Install,0,Install headers with COMPONENT headers; The headers in the new PyROOT are not installed with COMPONENT headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6237
https://github.com/root-project/root/pull/6237:78,deployability,instal,installed,78,Install headers with COMPONENT headers; The headers in the new PyROOT are not installed with COMPONENT headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6237
https://github.com/root-project/root/pull/6237:21,integrability,COMPON,COMPONENT,21,Install headers with COMPONENT headers; The headers in the new PyROOT are not installed with COMPONENT headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6237
https://github.com/root-project/root/pull/6237:93,integrability,COMPON,COMPONENT,93,Install headers with COMPONENT headers; The headers in the new PyROOT are not installed with COMPONENT headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6237
https://github.com/root-project/root/pull/6237:21,interoperability,COMPON,COMPONENT,21,Install headers with COMPONENT headers; The headers in the new PyROOT are not installed with COMPONENT headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6237
https://github.com/root-project/root/pull/6237:93,interoperability,COMPON,COMPONENT,93,Install headers with COMPONENT headers; The headers in the new PyROOT are not installed with COMPONENT headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6237
https://github.com/root-project/root/pull/6237:21,modifiability,COMPON,COMPONENT,21,Install headers with COMPONENT headers; The headers in the new PyROOT are not installed with COMPONENT headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6237
https://github.com/root-project/root/pull/6237:93,modifiability,COMPON,COMPONENT,93,Install headers with COMPONENT headers; The headers in the new PyROOT are not installed with COMPONENT headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6237
https://github.com/root-project/root/pull/6238:44,integrability,sub,subdirectories,44,[TreeProcMT] Fix reading of trees/chains in subdirectories; This PR fixes ROOT-10152. It also adds a better test and a proper fix for ROOT-9563.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6238
https://github.com/root-project/root/pull/6238:108,safety,test,test,108,[TreeProcMT] Fix reading of trees/chains in subdirectories; This PR fixes ROOT-10152. It also adds a better test and a proper fix for ROOT-9563.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6238
https://github.com/root-project/root/pull/6238:108,testability,test,test,108,[TreeProcMT] Fix reading of trees/chains in subdirectories; This PR fixes ROOT-10152. It also adds a better test and a proper fix for ROOT-9563.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6238
https://github.com/root-project/root/pull/6241:221,deployability,releas,release,221,[webgui] Fix CEF/Qt5 WebEngine implementations; 1. Correctly cleanup Qt5WebEngine widgets to let normally exit ROOT. 2. Adjust to latest CEF code. 3. Support ROOT batch mode for CEF (with use of xvfb). 4. Provide hook to release all existing RCanvas on ROOT exit. 5. Update latest JSROOT dev 18/08/2020,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6241
https://github.com/root-project/root/pull/6241:267,deployability,Updat,Update,267,[webgui] Fix CEF/Qt5 WebEngine implementations; 1. Correctly cleanup Qt5WebEngine widgets to let normally exit ROOT. 2. Adjust to latest CEF code. 3. Support ROOT batch mode for CEF (with use of xvfb). 4. Provide hook to release all existing RCanvas on ROOT exit. 5. Update latest JSROOT dev 18/08/2020,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6241
https://github.com/root-project/root/pull/6241:163,integrability,batch,batch,163,[webgui] Fix CEF/Qt5 WebEngine implementations; 1. Correctly cleanup Qt5WebEngine widgets to let normally exit ROOT. 2. Adjust to latest CEF code. 3. Support ROOT batch mode for CEF (with use of xvfb). 4. Provide hook to release all existing RCanvas on ROOT exit. 5. Update latest JSROOT dev 18/08/2020,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6241
https://github.com/root-project/root/pull/6241:163,performance,batch,batch,163,[webgui] Fix CEF/Qt5 WebEngine implementations; 1. Correctly cleanup Qt5WebEngine widgets to let normally exit ROOT. 2. Adjust to latest CEF code. 3. Support ROOT batch mode for CEF (with use of xvfb). 4. Provide hook to release all existing RCanvas on ROOT exit. 5. Update latest JSROOT dev 18/08/2020,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6241
https://github.com/root-project/root/pull/6241:242,reliability,RCa,RCanvas,242,[webgui] Fix CEF/Qt5 WebEngine implementations; 1. Correctly cleanup Qt5WebEngine widgets to let normally exit ROOT. 2. Adjust to latest CEF code. 3. Support ROOT batch mode for CEF (with use of xvfb). 4. Provide hook to release all existing RCanvas on ROOT exit. 5. Update latest JSROOT dev 18/08/2020,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6241
https://github.com/root-project/root/pull/6241:267,safety,Updat,Update,267,[webgui] Fix CEF/Qt5 WebEngine implementations; 1. Correctly cleanup Qt5WebEngine widgets to let normally exit ROOT. 2. Adjust to latest CEF code. 3. Support ROOT batch mode for CEF (with use of xvfb). 4. Provide hook to release all existing RCanvas on ROOT exit. 5. Update latest JSROOT dev 18/08/2020,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6241
https://github.com/root-project/root/pull/6241:267,security,Updat,Update,267,[webgui] Fix CEF/Qt5 WebEngine implementations; 1. Correctly cleanup Qt5WebEngine widgets to let normally exit ROOT. 2. Adjust to latest CEF code. 3. Support ROOT batch mode for CEF (with use of xvfb). 4. Provide hook to release all existing RCanvas on ROOT exit. 5. Update latest JSROOT dev 18/08/2020,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6241
https://github.com/root-project/root/pull/6241:213,testability,hook,hook,213,[webgui] Fix CEF/Qt5 WebEngine implementations; 1. Correctly cleanup Qt5WebEngine widgets to let normally exit ROOT. 2. Adjust to latest CEF code. 3. Support ROOT batch mode for CEF (with use of xvfb). 4. Provide hook to release all existing RCanvas on ROOT exit. 5. Update latest JSROOT dev 18/08/2020,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6241
https://github.com/root-project/root/pull/6241:82,usability,widget,widgets,82,[webgui] Fix CEF/Qt5 WebEngine implementations; 1. Correctly cleanup Qt5WebEngine widgets to let normally exit ROOT. 2. Adjust to latest CEF code. 3. Support ROOT batch mode for CEF (with use of xvfb). 4. Provide hook to release all existing RCanvas on ROOT exit. 5. Update latest JSROOT dev 18/08/2020,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6241
https://github.com/root-project/root/pull/6241:150,usability,Support,Support,150,[webgui] Fix CEF/Qt5 WebEngine implementations; 1. Correctly cleanup Qt5WebEngine widgets to let normally exit ROOT. 2. Adjust to latest CEF code. 3. Support ROOT batch mode for CEF (with use of xvfb). 4. Provide hook to release all existing RCanvas on ROOT exit. 5. Update latest JSROOT dev 18/08/2020,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6241
https://github.com/root-project/root/pull/6242:12,deployability,releas,releasing,12,Prepare for releasing cling v0.7.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6242
https://github.com/root-project/root/pull/6243:239,testability,assert,assert,239,"[RF] Cleanups; While working on a feature, these commits piled up. They could be split off from the feature branch. I hope they are (mostly) NFCs, but small things are changing. For example, floating point computations are reordered, and `assert(0)` are replaced by `throw` and `#include`s are fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6243
https://github.com/root-project/root/pull/6244:375,availability,down,down,375,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:254,deployability,modul,module,254,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:267,deployability,patch,patch,267,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:315,deployability,modul,module,315,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:403,deployability,patch,patch,403,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:38,integrability,sub,submodules,38,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:161,interoperability,specif,specifier,161,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:254,modifiability,modul,module,254,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:315,modifiability,modul,module,315,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:254,safety,modul,module,254,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:267,safety,patch,patch,267,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:315,safety,modul,module,315,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:403,safety,patch,patch,403,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:267,security,patch,patch,267,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6244:403,security,patch,patch,403,"[boost] Do not include all headers as submodules as some are disjoint sets; boost_align and boost_python have umbrella header design, however we cannot use that specifier because then it warns about all the rest of boost not being part of the particular module. This patch just adds align.hpp and python.hpp in the module. This may lead to some duplicates which we will hunt down and fix if needed. The patch should fix cmssw. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6244
https://github.com/root-project/root/pull/6245:196,deployability,contain,contains,196,"[wincxxmodules] Backport D83174 - Teach AttachPreviousImpl to inherit MSInheritanceAttr attribute; This commit teaches ASTDeclReader::attachPreviousDecl to successfully merge. two Decl's when one contains an inheritable attribute like the. MSInheritanceAttr. Usually, attributes that are needed to be present along the. redeclaration chain are attached during ASTReading from. ASTDeclReader::attachPreviousDecl, but no such thing is done for inheritable. attributes. . Differential Revision: https://reviews.llvm.org/D83174. @vgvassilev .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6245
https://github.com/root-project/root/pull/6245:62,modifiability,inherit,inherit,62,"[wincxxmodules] Backport D83174 - Teach AttachPreviousImpl to inherit MSInheritanceAttr attribute; This commit teaches ASTDeclReader::attachPreviousDecl to successfully merge. two Decl's when one contains an inheritable attribute like the. MSInheritanceAttr. Usually, attributes that are needed to be present along the. redeclaration chain are attached during ASTReading from. ASTDeclReader::attachPreviousDecl, but no such thing is done for inheritable. attributes. . Differential Revision: https://reviews.llvm.org/D83174. @vgvassilev .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6245
https://github.com/root-project/root/pull/6245:208,modifiability,inherit,inheritable,208,"[wincxxmodules] Backport D83174 - Teach AttachPreviousImpl to inherit MSInheritanceAttr attribute; This commit teaches ASTDeclReader::attachPreviousDecl to successfully merge. two Decl's when one contains an inheritable attribute like the. MSInheritanceAttr. Usually, attributes that are needed to be present along the. redeclaration chain are attached during ASTReading from. ASTDeclReader::attachPreviousDecl, but no such thing is done for inheritable. attributes. . Differential Revision: https://reviews.llvm.org/D83174. @vgvassilev .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6245
https://github.com/root-project/root/pull/6245:442,modifiability,inherit,inheritable,442,"[wincxxmodules] Backport D83174 - Teach AttachPreviousImpl to inherit MSInheritanceAttr attribute; This commit teaches ASTDeclReader::attachPreviousDecl to successfully merge. two Decl's when one contains an inheritable attribute like the. MSInheritanceAttr. Usually, attributes that are needed to be present along the. redeclaration chain are attached during ASTReading from. ASTDeclReader::attachPreviousDecl, but no such thing is done for inheritable. attributes. . Differential Revision: https://reviews.llvm.org/D83174. @vgvassilev .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6245
https://github.com/root-project/root/pull/6245:500,safety,review,reviews,500,"[wincxxmodules] Backport D83174 - Teach AttachPreviousImpl to inherit MSInheritanceAttr attribute; This commit teaches ASTDeclReader::attachPreviousDecl to successfully merge. two Decl's when one contains an inheritable attribute like the. MSInheritanceAttr. Usually, attributes that are needed to be present along the. redeclaration chain are attached during ASTReading from. ASTDeclReader::attachPreviousDecl, but no such thing is done for inheritable. attributes. . Differential Revision: https://reviews.llvm.org/D83174. @vgvassilev .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6245
https://github.com/root-project/root/pull/6245:500,testability,review,reviews,500,"[wincxxmodules] Backport D83174 - Teach AttachPreviousImpl to inherit MSInheritanceAttr attribute; This commit teaches ASTDeclReader::attachPreviousDecl to successfully merge. two Decl's when one contains an inheritable attribute like the. MSInheritanceAttr. Usually, attributes that are needed to be present along the. redeclaration chain are attached during ASTReading from. ASTDeclReader::attachPreviousDecl, but no such thing is done for inheritable. attributes. . Differential Revision: https://reviews.llvm.org/D83174. @vgvassilev .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6245
https://github.com/root-project/root/pull/6246:9,performance,time,timeout,9,Increase timeout for PPC64; With this change:. 1036/1038 Test #853: tutorial-tmva-TMVA_Higgs_Classification ............................. Passed 1248.66 sec. 1037/1038 Test #854: tutorial-tmva-TMVA_RNN_Classification ............................... Passed 1252.92 sec. 1038/1038 Test #852: tutorial-tmva-TMVA_CNN_Classification ............................... Passed 1273.47 sec. Instead of timing out at 1200 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6246
https://github.com/root-project/root/pull/6246:9,safety,timeout,timeout,9,Increase timeout for PPC64; With this change:. 1036/1038 Test #853: tutorial-tmva-TMVA_Higgs_Classification ............................. Passed 1248.66 sec. 1037/1038 Test #854: tutorial-tmva-TMVA_RNN_Classification ............................... Passed 1252.92 sec. 1038/1038 Test #852: tutorial-tmva-TMVA_CNN_Classification ............................... Passed 1273.47 sec. Instead of timing out at 1200 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6246
https://github.com/root-project/root/pull/6246:57,safety,Test,Test,57,Increase timeout for PPC64; With this change:. 1036/1038 Test #853: tutorial-tmva-TMVA_Higgs_Classification ............................. Passed 1248.66 sec. 1037/1038 Test #854: tutorial-tmva-TMVA_RNN_Classification ............................... Passed 1252.92 sec. 1038/1038 Test #852: tutorial-tmva-TMVA_CNN_Classification ............................... Passed 1273.47 sec. Instead of timing out at 1200 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6246
https://github.com/root-project/root/pull/6246:168,safety,Test,Test,168,Increase timeout for PPC64; With this change:. 1036/1038 Test #853: tutorial-tmva-TMVA_Higgs_Classification ............................. Passed 1248.66 sec. 1037/1038 Test #854: tutorial-tmva-TMVA_RNN_Classification ............................... Passed 1252.92 sec. 1038/1038 Test #852: tutorial-tmva-TMVA_CNN_Classification ............................... Passed 1273.47 sec. Instead of timing out at 1200 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6246
https://github.com/root-project/root/pull/6246:279,safety,Test,Test,279,Increase timeout for PPC64; With this change:. 1036/1038 Test #853: tutorial-tmva-TMVA_Higgs_Classification ............................. Passed 1248.66 sec. 1037/1038 Test #854: tutorial-tmva-TMVA_RNN_Classification ............................... Passed 1252.92 sec. 1038/1038 Test #852: tutorial-tmva-TMVA_CNN_Classification ............................... Passed 1273.47 sec. Instead of timing out at 1200 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6246
https://github.com/root-project/root/pull/6246:57,testability,Test,Test,57,Increase timeout for PPC64; With this change:. 1036/1038 Test #853: tutorial-tmva-TMVA_Higgs_Classification ............................. Passed 1248.66 sec. 1037/1038 Test #854: tutorial-tmva-TMVA_RNN_Classification ............................... Passed 1252.92 sec. 1038/1038 Test #852: tutorial-tmva-TMVA_CNN_Classification ............................... Passed 1273.47 sec. Instead of timing out at 1200 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6246
https://github.com/root-project/root/pull/6246:168,testability,Test,Test,168,Increase timeout for PPC64; With this change:. 1036/1038 Test #853: tutorial-tmva-TMVA_Higgs_Classification ............................. Passed 1248.66 sec. 1037/1038 Test #854: tutorial-tmva-TMVA_RNN_Classification ............................... Passed 1252.92 sec. 1038/1038 Test #852: tutorial-tmva-TMVA_CNN_Classification ............................... Passed 1273.47 sec. Instead of timing out at 1200 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6246
https://github.com/root-project/root/pull/6246:279,testability,Test,Test,279,Increase timeout for PPC64; With this change:. 1036/1038 Test #853: tutorial-tmva-TMVA_Higgs_Classification ............................. Passed 1248.66 sec. 1037/1038 Test #854: tutorial-tmva-TMVA_RNN_Classification ............................... Passed 1252.92 sec. 1038/1038 Test #852: tutorial-tmva-TMVA_CNN_Classification ............................... Passed 1273.47 sec. Instead of timing out at 1200 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6246
https://github.com/root-project/root/pull/6247:5,deployability,version,version,5,Bump version to 0.8~dev.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6247
https://github.com/root-project/root/pull/6247:5,integrability,version,version,5,Bump version to 0.8~dev.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6247
https://github.com/root-project/root/pull/6247:5,modifiability,version,version,5,Bump version to 0.8~dev.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6247
https://github.com/root-project/root/pull/6248:188,availability,failur,failure,188,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:253,availability,servic,services,253,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:397,availability,failur,failure,397,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:473,availability,servic,services,473,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:188,deployability,fail,failure,188,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:209,deployability,build,build,209,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:253,deployability,servic,services,253,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:330,deployability,build,builds,330,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:360,deployability,patch,patch,360,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:397,deployability,fail,failure,397,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:473,deployability,servic,services,473,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:253,integrability,servic,services,253,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:473,integrability,servic,services,473,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:144,interoperability,standard,standard,144,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:158,modifiability,pac,packages,158,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:253,modifiability,servic,services,253,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:473,modifiability,servic,services,473,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:188,performance,failur,failure,188,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:397,performance,failur,failure,397,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:188,reliability,fail,failure,188,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:397,reliability,fail,failure,397,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:360,safety,patch,patch,360,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:538,safety,test,testReport,538,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:360,security,patch,patch,360,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6248:538,testability,test,testReport,538,Create symlink to libJupyROOTX_Y.so when using CMAKE_INSTALL_PYTHONDIR; Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6248
https://github.com/root-project/root/pull/6249:10,modifiability,Exten,Extend,10,[skip-ci] Extend TUUID doc. Address ROOT-8535.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6249
https://github.com/root-project/root/pull/6250:49,deployability,version,versions,49,"[RF] Re-expose RooFormulaVar::formula().; In old versions of RooFormula, one could mutate the internal formula. object from the outside. This was unsafe. Therefore, the visibility of. formula() was reduced. It can, however, be beneficial to have at least read access. Therefore,. a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6250
https://github.com/root-project/root/pull/6250:198,energy efficiency,reduc,reduced,198,"[RF] Re-expose RooFormulaVar::formula().; In old versions of RooFormula, one could mutate the internal formula. object from the outside. This was unsafe. Therefore, the visibility of. formula() was reduced. It can, however, be beneficial to have at least read access. Therefore,. a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6250
https://github.com/root-project/root/pull/6250:49,integrability,version,versions,49,"[RF] Re-expose RooFormulaVar::formula().; In old versions of RooFormula, one could mutate the internal formula. object from the outside. This was unsafe. Therefore, the visibility of. formula() was reduced. It can, however, be beneficial to have at least read access. Therefore,. a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6250
https://github.com/root-project/root/pull/6250:49,modifiability,version,versions,49,"[RF] Re-expose RooFormulaVar::formula().; In old versions of RooFormula, one could mutate the internal formula. object from the outside. This was unsafe. Therefore, the visibility of. formula() was reduced. It can, however, be beneficial to have at least read access. Therefore,. a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6250
https://github.com/root-project/root/pull/6250:146,safety,unsaf,unsafe,146,"[RF] Re-expose RooFormulaVar::formula().; In old versions of RooFormula, one could mutate the internal formula. object from the outside. This was unsafe. Therefore, the visibility of. formula() was reduced. It can, however, be beneficial to have at least read access. Therefore,. a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6250
https://github.com/root-project/root/pull/6250:8,security,expos,expose,8,"[RF] Re-expose RooFormulaVar::formula().; In old versions of RooFormula, one could mutate the internal formula. object from the outside. This was unsafe. Therefore, the visibility of. formula() was reduced. It can, however, be beneficial to have at least read access. Therefore,. a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6250
https://github.com/root-project/root/pull/6250:260,security,access,access,260,"[RF] Re-expose RooFormulaVar::formula().; In old versions of RooFormula, one could mutate the internal formula. object from the outside. This was unsafe. Therefore, the visibility of. formula() was reduced. It can, however, be beneficial to have at least read access. Therefore,. a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6250
https://github.com/root-project/root/pull/6250:340,security,access,access,340,"[RF] Re-expose RooFormulaVar::formula().; In old versions of RooFormula, one could mutate the internal formula. object from the outside. This was unsafe. Therefore, the visibility of. formula() was reduced. It can, however, be beneficial to have at least read access. Therefore,. a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6250
https://github.com/root-project/root/pull/6250:334,usability,user,users,334,"[RF] Re-expose RooFormulaVar::formula().; In old versions of RooFormula, one could mutate the internal formula. object from the outside. This was unsafe. Therefore, the visibility of. formula() was reduced. It can, however, be beneficial to have at least read access. Therefore,. a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6250
https://github.com/root-project/root/pull/6252:71,safety,prevent,prevented,71,"When normalizing template names, don't split inside parenthesis.; This prevented the proper normalizing of template where one of the argument in a function type with more than one. function argument. This fixes ROOT-11013.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6252
https://github.com/root-project/root/pull/6252:71,security,preven,prevented,71,"When normalizing template names, don't split inside parenthesis.; This prevented the proper normalizing of template where one of the argument in a function type with more than one. function argument. This fixes ROOT-11013.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6252
https://github.com/root-project/root/pull/6253:39,availability,redund,redundant,39,[PyMVA] PyKeras minor fixes; Fix minor redundant code in PyKeras,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6253
https://github.com/root-project/root/pull/6253:39,deployability,redundan,redundant,39,[PyMVA] PyKeras minor fixes; Fix minor redundant code in PyKeras,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6253
https://github.com/root-project/root/pull/6253:39,reliability,redundan,redundant,39,[PyMVA] PyKeras minor fixes; Fix minor redundant code in PyKeras,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6253
https://github.com/root-project/root/pull/6253:39,safety,redund,redundant,39,[PyMVA] PyKeras minor fixes; Fix minor redundant code in PyKeras,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6253
https://github.com/root-project/root/pull/6254:228,safety,review,review,228,"HS3 RooFit JSON/YML import/export [reworked]; This is a rebase of this [MR](https://github.com/root-project/root/pull/5324). While this is still WIP, this MR is really intended to be mergeable in the end. Please give a detailed review of the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6254
https://github.com/root-project/root/pull/6254:228,testability,review,review,228,"HS3 RooFit JSON/YML import/export [reworked]; This is a rebase of this [MR](https://github.com/root-project/root/pull/5324). While this is still WIP, this MR is really intended to be mergeable in the end. Please give a detailed review of the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6254
https://github.com/root-project/root/pull/6255:151,deployability,manag,managed,151,Avoid a double delete of histograms in TFractionFitter (ROOT-10752); Call SetDirectory(0) for the internal histogram ( plot + MC prediction templates) managed by TFractionFitter. This avoids double-delete when deleting TFractionFitter and gDirectory and fixes ROOT-10752,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6255
https://github.com/root-project/root/pull/6255:129,energy efficiency,predict,prediction,129,Avoid a double delete of histograms in TFractionFitter (ROOT-10752); Call SetDirectory(0) for the internal histogram ( plot + MC prediction templates) managed by TFractionFitter. This avoids double-delete when deleting TFractionFitter and gDirectory and fixes ROOT-10752,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6255
https://github.com/root-project/root/pull/6255:151,energy efficiency,manag,managed,151,Avoid a double delete of histograms in TFractionFitter (ROOT-10752); Call SetDirectory(0) for the internal histogram ( plot + MC prediction templates) managed by TFractionFitter. This avoids double-delete when deleting TFractionFitter and gDirectory and fixes ROOT-10752,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6255
https://github.com/root-project/root/pull/6255:0,safety,Avoid,Avoid,0,Avoid a double delete of histograms in TFractionFitter (ROOT-10752); Call SetDirectory(0) for the internal histogram ( plot + MC prediction templates) managed by TFractionFitter. This avoids double-delete when deleting TFractionFitter and gDirectory and fixes ROOT-10752,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6255
https://github.com/root-project/root/pull/6255:129,safety,predict,prediction,129,Avoid a double delete of histograms in TFractionFitter (ROOT-10752); Call SetDirectory(0) for the internal histogram ( plot + MC prediction templates) managed by TFractionFitter. This avoids double-delete when deleting TFractionFitter and gDirectory and fixes ROOT-10752,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6255
https://github.com/root-project/root/pull/6255:151,safety,manag,managed,151,Avoid a double delete of histograms in TFractionFitter (ROOT-10752); Call SetDirectory(0) for the internal histogram ( plot + MC prediction templates) managed by TFractionFitter. This avoids double-delete when deleting TFractionFitter and gDirectory and fixes ROOT-10752,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6255
https://github.com/root-project/root/pull/6255:184,safety,avoid,avoids,184,Avoid a double delete of histograms in TFractionFitter (ROOT-10752); Call SetDirectory(0) for the internal histogram ( plot + MC prediction templates) managed by TFractionFitter. This avoids double-delete when deleting TFractionFitter and gDirectory and fixes ROOT-10752,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6255
https://github.com/root-project/root/pull/6256:51,deployability,build,builds,51,"[webgui] support true headless mode with CEF ozone builds; When CEF build with ozone support (which is by far not trivial), one can use true headless mode for batch mode image generation. In readme short instruction provided how such CEF build can be produced, but main documentation is on CEF website. Remove support of older CEF, while extra files copied now into different location as before. Also enable pseudo-headless mode for Qt5WebEngine, but it requires X11 - either native or via Xvfb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6256
https://github.com/root-project/root/pull/6256:68,deployability,build,build,68,"[webgui] support true headless mode with CEF ozone builds; When CEF build with ozone support (which is by far not trivial), one can use true headless mode for batch mode image generation. In readme short instruction provided how such CEF build can be produced, but main documentation is on CEF website. Remove support of older CEF, while extra files copied now into different location as before. Also enable pseudo-headless mode for Qt5WebEngine, but it requires X11 - either native or via Xvfb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6256
https://github.com/root-project/root/pull/6256:238,deployability,build,build,238,"[webgui] support true headless mode with CEF ozone builds; When CEF build with ozone support (which is by far not trivial), one can use true headless mode for batch mode image generation. In readme short instruction provided how such CEF build can be produced, but main documentation is on CEF website. Remove support of older CEF, while extra files copied now into different location as before. Also enable pseudo-headless mode for Qt5WebEngine, but it requires X11 - either native or via Xvfb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6256
https://github.com/root-project/root/pull/6256:159,integrability,batch,batch,159,"[webgui] support true headless mode with CEF ozone builds; When CEF build with ozone support (which is by far not trivial), one can use true headless mode for batch mode image generation. In readme short instruction provided how such CEF build can be produced, but main documentation is on CEF website. Remove support of older CEF, while extra files copied now into different location as before. Also enable pseudo-headless mode for Qt5WebEngine, but it requires X11 - either native or via Xvfb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6256
https://github.com/root-project/root/pull/6256:159,performance,batch,batch,159,"[webgui] support true headless mode with CEF ozone builds; When CEF build with ozone support (which is by far not trivial), one can use true headless mode for batch mode image generation. In readme short instruction provided how such CEF build can be produced, but main documentation is on CEF website. Remove support of older CEF, while extra files copied now into different location as before. Also enable pseudo-headless mode for Qt5WebEngine, but it requires X11 - either native or via Xvfb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6256
https://github.com/root-project/root/pull/6256:9,usability,support,support,9,"[webgui] support true headless mode with CEF ozone builds; When CEF build with ozone support (which is by far not trivial), one can use true headless mode for batch mode image generation. In readme short instruction provided how such CEF build can be produced, but main documentation is on CEF website. Remove support of older CEF, while extra files copied now into different location as before. Also enable pseudo-headless mode for Qt5WebEngine, but it requires X11 - either native or via Xvfb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6256
https://github.com/root-project/root/pull/6256:85,usability,support,support,85,"[webgui] support true headless mode with CEF ozone builds; When CEF build with ozone support (which is by far not trivial), one can use true headless mode for batch mode image generation. In readme short instruction provided how such CEF build can be produced, but main documentation is on CEF website. Remove support of older CEF, while extra files copied now into different location as before. Also enable pseudo-headless mode for Qt5WebEngine, but it requires X11 - either native or via Xvfb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6256
https://github.com/root-project/root/pull/6256:270,usability,document,documentation,270,"[webgui] support true headless mode with CEF ozone builds; When CEF build with ozone support (which is by far not trivial), one can use true headless mode for batch mode image generation. In readme short instruction provided how such CEF build can be produced, but main documentation is on CEF website. Remove support of older CEF, while extra files copied now into different location as before. Also enable pseudo-headless mode for Qt5WebEngine, but it requires X11 - either native or via Xvfb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6256
https://github.com/root-project/root/pull/6256:310,usability,support,support,310,"[webgui] support true headless mode with CEF ozone builds; When CEF build with ozone support (which is by far not trivial), one can use true headless mode for batch mode image generation. In readme short instruction provided how such CEF build can be produced, but main documentation is on CEF website. Remove support of older CEF, while extra files copied now into different location as before. Also enable pseudo-headless mode for Qt5WebEngine, but it requires X11 - either native or via Xvfb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6256
https://github.com/root-project/root/pull/6257:150,deployability,log,log,150,"Add possibility to pass an external generator when generating random numbers in TF1,2,3 and TH1,2,3 classes; . Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF. used for generating the random numbers. This fixes ROOT-9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6257
https://github.com/root-project/root/pull/6257:162,deployability,scale,scale,162,"Add possibility to pass an external generator when generating random numbers in TF1,2,3 and TH1,2,3 classes; . Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF. used for generating the random numbers. This fixes ROOT-9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6257
https://github.com/root-project/root/pull/6257:162,energy efficiency,scale,scale,162,"Add possibility to pass an external generator when generating random numbers in TF1,2,3 and TH1,2,3 classes; . Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF. used for generating the random numbers. This fixes ROOT-9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6257
https://github.com/root-project/root/pull/6257:162,modifiability,scal,scale,162,"Add possibility to pass an external generator when generating random numbers in TF1,2,3 and TH1,2,3 classes; . Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF. used for generating the random numbers. This fixes ROOT-9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6257
https://github.com/root-project/root/pull/6257:162,performance,scale,scale,162,"Add possibility to pass an external generator when generating random numbers in TF1,2,3 and TH1,2,3 classes; . Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF. used for generating the random numbers. This fixes ROOT-9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6257
https://github.com/root-project/root/pull/6257:150,safety,log,log,150,"Add possibility to pass an external generator when generating random numbers in TF1,2,3 and TH1,2,3 classes; . Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF. used for generating the random numbers. This fixes ROOT-9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6257
https://github.com/root-project/root/pull/6257:142,security,control,control,142,"Add possibility to pass an external generator when generating random numbers in TF1,2,3 and TH1,2,3 classes; . Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF. used for generating the random numbers. This fixes ROOT-9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6257
https://github.com/root-project/root/pull/6257:150,security,log,log,150,"Add possibility to pass an external generator when generating random numbers in TF1,2,3 and TH1,2,3 classes; . Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF. used for generating the random numbers. This fixes ROOT-9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6257
https://github.com/root-project/root/pull/6257:142,testability,control,control,142,"Add possibility to pass an external generator when generating random numbers in TF1,2,3 and TH1,2,3 classes; . Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF. used for generating the random numbers. This fixes ROOT-9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6257
https://github.com/root-project/root/pull/6257:150,testability,log,log,150,"Add possibility to pass an external generator when generating random numbers in TF1,2,3 and TH1,2,3 classes; . Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF. used for generating the random numbers. This fixes ROOT-9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6257
https://github.com/root-project/root/pull/6260:196,availability,Error,Error,196,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:84,deployability,version,version,84,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:84,integrability,version,version,84,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:127,integrability,translat,translate,127,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:189,integrability,batch,batch,189,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:127,interoperability,translat,translate,127,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:84,modifiability,version,version,84,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:189,performance,batch,batch,189,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:196,performance,Error,Error,196,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:107,reliability,doe,does,107,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:196,safety,Error,Error,196,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:137,usability,command,command,137,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6260:196,usability,Error,Error,196,"[cmake] workaround for Ubuntu 20.04 to search chrome browser; In Ubuntu snap chrome version is used and it does not correctly. translate command line arguments, making problem to use it in batch. Error already communicated by Axel:. https://bugs.launchpad.net/ubuntu/+source/snap/+bug/1893020. Once it is fixed, this commit can be reverted",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6260
https://github.com/root-project/root/pull/6261:224,interoperability,specif,specified,224,"[geom] fix pcon/pgon TBuffer3D filling (ROOT-11015); Special algorithm is used now to produce pcon/pgon shape polygons. without inner surface (rmin==0). Where was mistake, which causes problem. when more than 2 z layers was specified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6261
https://github.com/root-project/root/pull/6261:213,modifiability,layer,layers,213,"[geom] fix pcon/pgon TBuffer3D filling (ROOT-11015); Special algorithm is used now to produce pcon/pgon shape polygons. without inner surface (rmin==0). Where was mistake, which causes problem. when more than 2 z layers was specified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6261
https://github.com/root-project/root/pull/6263:95,deployability,contain,contains,95,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:659,deployability,updat,updates,659,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:325,energy efficiency,cpu,cpu,325,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:380,energy efficiency,cpu,cpu,380,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:432,interoperability,architectur,architecture,432,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:315,modifiability,layer,layer,315,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:370,modifiability,layer,layer,370,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:325,performance,cpu,cpu,325,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:380,performance,cpu,cpu,380,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:337,safety,test,tests,337,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:388,safety,test,tests,388,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:498,safety,test,tests,498,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:659,safety,updat,updates,659,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:659,security,updat,updates,659,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:337,testability,test,tests,337,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:388,testability,test,tests,388,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6263:498,testability,test,tests,498,[WIP][GSoC] CNN3D and MaxPool3D implementation for GSoC 2020; [Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same. - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6263
https://github.com/root-project/root/pull/6264:85,performance,time,timeouts,85,[TO REVERT] Add verbose printouts to df103_NanoAODHiggsAnalysis.C; To help debug the timeouts seen on MacOS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6264
https://github.com/root-project/root/pull/6264:85,safety,timeout,timeouts,85,[TO REVERT] Add verbose printouts to df103_NanoAODHiggsAnalysis.C; To help debug the timeouts seen on MacOS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6264
https://github.com/root-project/root/pull/6264:70,usability,help,help,70,[TO REVERT] Add verbose printouts to df103_NanoAODHiggsAnalysis.C; To help debug the timeouts seen on MacOS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6264
https://github.com/root-project/root/pull/6266:47,deployability,integr,integrated,47,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:47,integrability,integr,integrated,47,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:100,integrability,messag,message,100,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:47,interoperability,integr,integrated,47,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:100,interoperability,messag,message,100,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:47,modifiability,integr,integrated,47,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:346,performance,Cach,Cache,346,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:47,reliability,integr,integrated,47,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:20,safety,safe,safety,20,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:295,safety,test,test,295,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:335,safety,test,tests,335,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:428,safety,safe,safe,428,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:47,security,integr,integrated,47,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:47,testability,integr,integrated,47,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:295,testability,test,test,295,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6266:335,testability,test,tests,335,[RDF] Enable thread safety; Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive. - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics. - [x] Look for another solution for the static `TRegex` members. - [x] Add a random sleep to the test cases to stir things up. - [x] Add tests for `Cache` and `Snapshot`. - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6266
https://github.com/root-project/root/pull/6267:28,deployability,API,API,28,[ntuple] Use low-level read API in RDataFrame DS;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6267
https://github.com/root-project/root/pull/6267:28,integrability,API,API,28,[ntuple] Use low-level read API in RDataFrame DS;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6267
https://github.com/root-project/root/pull/6267:28,interoperability,API,API,28,[ntuple] Use low-level read API in RDataFrame DS;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6267
https://github.com/root-project/root/pull/6268:12,availability,operat,operation,12,TMVA Tensor operation required for GNN; Primary concatenating and flattening,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6268
https://github.com/root-project/root/pull/6269:85,performance,time,timeouts,85,[TO REVERT] Add verbose printouts to df103_NanoAODHiggsAnalysis.C; To help debug the timeouts seen on MacOS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6269
https://github.com/root-project/root/pull/6269:85,safety,timeout,timeouts,85,[TO REVERT] Add verbose printouts to df103_NanoAODHiggsAnalysis.C; To help debug the timeouts seen on MacOS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6269
https://github.com/root-project/root/pull/6269:70,usability,help,help,70,[TO REVERT] Add verbose printouts to df103_NanoAODHiggsAnalysis.C; To help debug the timeouts seen on MacOS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6269
https://github.com/root-project/root/pull/6270:226,deployability,integr,integral,226,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:318,deployability,integr,integral,318,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:399,deployability,Integr,Integral,399,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:226,integrability,integr,integral,226,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:318,integrability,integr,integral,318,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:399,integrability,Integr,Integral,399,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:226,interoperability,integr,integral,226,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:318,interoperability,integr,integral,318,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:399,interoperability,Integr,Integral,399,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:226,modifiability,integr,integral,226,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:318,modifiability,integr,integral,318,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:399,modifiability,Integr,Integral,399,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:226,reliability,integr,integral,226,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:318,reliability,integr,integral,318,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:399,reliability,Integr,Integral,399,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:226,security,integr,integral,226,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:318,security,integr,integral,318,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:399,security,Integr,Integral,399,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:226,testability,integr,integral,226,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:318,testability,integr,integral,318,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6270:399,testability,Integr,Integral,399,"Fix TF2::Moment2, TF3::Moment3 and related for C++ based TF2,3 objects; TF2::Moment2, TF2::CentralMoment2 and same for TF3 worked only on TFormula based functions (ROOT-10623). Now use lambda functions to compute the momentum integral for all types of TF2 and TF3. Improve also handling and debug of multi-dimensional integral calculations. Fix also an issue in setting max number of points in TF3::Integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6270
https://github.com/root-project/root/pull/6271:8,energy efficiency,Load,Load,8,[cmake] Load ctest envvars for Python vetos;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6271
https://github.com/root-project/root/pull/6271:8,performance,Load,Load,8,[cmake] Load ctest envvars for Python vetos;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6271
https://github.com/root-project/root/pull/6273:77,integrability,Interfac,Interface,77,[GSoC][TMVA] Add PyTorch Tutorials; This PR aims to add tutorials of PyTorch Interface in TMVA and is an extension to the main PR i.e #5757. Feel free to comment and share feedback.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6273
https://github.com/root-project/root/pull/6273:77,interoperability,Interfac,Interface,77,[GSoC][TMVA] Add PyTorch Tutorials; This PR aims to add tutorials of PyTorch Interface in TMVA and is an extension to the main PR i.e #5757. Feel free to comment and share feedback.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6273
https://github.com/root-project/root/pull/6273:166,interoperability,share,share,166,[GSoC][TMVA] Add PyTorch Tutorials; This PR aims to add tutorials of PyTorch Interface in TMVA and is an extension to the main PR i.e #5757. Feel free to comment and share feedback.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6273
https://github.com/root-project/root/pull/6273:77,modifiability,Interfac,Interface,77,[GSoC][TMVA] Add PyTorch Tutorials; This PR aims to add tutorials of PyTorch Interface in TMVA and is an extension to the main PR i.e #5757. Feel free to comment and share feedback.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6273
https://github.com/root-project/root/pull/6273:105,modifiability,extens,extension,105,[GSoC][TMVA] Add PyTorch Tutorials; This PR aims to add tutorials of PyTorch Interface in TMVA and is an extension to the main PR i.e #5757. Feel free to comment and share feedback.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6273
https://github.com/root-project/root/pull/6273:172,usability,feedback,feedback,172,[GSoC][TMVA] Add PyTorch Tutorials; This PR aims to add tutorials of PyTorch Interface in TMVA and is an extension to the main PR i.e #5757. Feel free to comment and share feedback.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6273
https://github.com/root-project/root/pull/6274:95,performance,concurren,concurrency,95,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6274
https://github.com/root-project/root/pull/6274:142,performance,parallel,parallel,142,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6274
https://github.com/root-project/root/pull/6274:183,performance,time,timeouts,183,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6274
https://github.com/root-project/root/pull/6274:183,safety,timeout,timeouts,183,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6274
https://github.com/root-project/root/pull/6275:202,deployability,resourc,resource,202,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:480,deployability,Updat,Update,480,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:146,energy efficiency,load,loaded,146,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:202,energy efficiency,resourc,resource,202,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:262,energy efficiency,load,loaded,262,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:32,integrability,compon,components,32,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:55,integrability,batch,batch,55,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:32,interoperability,compon,components,32,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:32,modifiability,compon,components,32,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:55,performance,batch,batch,55,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:109,performance,content,content,109,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:130,performance,memor,memory,130,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:146,performance,load,loaded,146,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:202,performance,resourc,resource,202,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:262,performance,load,loaded,262,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:202,safety,resourc,resource,202,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:480,safety,Updat,Update,480,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:480,security,Updat,Update,480,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:202,testability,resourc,resource,202,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:338,testability,Simpl,Simplify,338,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:130,usability,memor,memory,130,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:286,usability,Support,Support,286,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:338,usability,Simpl,Simplify,338,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:347,usability,custom,custom,347,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6275:391,usability,custom,custom,391,"[webgui] improve CEF/QWebEngine components; 1. Let run batch job without creating temporary HTML files. File content preserved in memory and just loaded directly into browser. - in CEF one need special resource handler. - in QWebEngine HTML code can be directly loaded into browser. 2. Support PDF file creation in CEF and QWebEngine. 3. Simplify custom http handling in CEF, no need to use custom scheme handler singleton. Now many THttpServer instances can be used with CEF. 4. Update JSROOT with latest fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6275
https://github.com/root-project/root/pull/6280:261,deployability,resourc,resource,261,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:367,deployability,resourc,resource,367,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:261,energy efficiency,resourc,resource,261,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:367,energy efficiency,resourc,resource,367,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:403,energy efficiency,reduc,reduce,403,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:467,energy efficiency,CPU,CPUs,467,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:515,energy efficiency,core,core,515,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:95,performance,concurren,concurrency,95,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:142,performance,parallel,parallel,142,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:183,performance,time,timeouts,183,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:249,performance,lock,locking,249,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:261,performance,resourc,resource,261,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:323,performance,parallel,parallel,323,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:367,performance,resourc,resource,367,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:376,performance,lock,lock,376,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:467,performance,CPU,CPUs,467,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:183,safety,timeout,timeouts,183,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:213,safety,avoid,avoid,213,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:261,safety,resourc,resource,261,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:340,safety,test,tests,340,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:367,safety,resourc,resource,367,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:249,security,lock,locking,249,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:376,security,lock,lock,376,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:261,testability,resourc,resource,261,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:340,testability,test,tests,340,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6280:367,testability,resourc,resource,367,"[Tutorials] Run df10* tutorials serially in ctest.; Since all df10* tutorials use IMT(hardware concurrency), it's. inefficient to run them in parallel. This regularly brings us into. timeouts in the nightlies. To avoid this, those tutorials are now locking the resource. ""multithreaded"", which means that they don't run in parallel. Other. tests that don't have this resource lock still run, though. To reduce. congestion, the RDF tutorials now claim that they use 4 CPUs. That's in. general not true, on an e.g. 8-core machine, CMake will run an IMT=8. with 4 single-threaded ctest, leading to an oversubscription of 1.5. instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6280
https://github.com/root-project/root/pull/6281:131,availability,consist,consistent,131,Only install the xproofd script and man page if xproofd option is on; The condition if(xproofd AND xrootd AND ssl) is chosen to be consistent with the condition in proof/CMakeLists.txt which is the condition to build libXrdProofd.so that is used by the xproofd script.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6281
https://github.com/root-project/root/pull/6281:5,deployability,instal,install,5,Only install the xproofd script and man page if xproofd option is on; The condition if(xproofd AND xrootd AND ssl) is chosen to be consistent with the condition in proof/CMakeLists.txt which is the condition to build libXrdProofd.so that is used by the xproofd script.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6281
https://github.com/root-project/root/pull/6281:211,deployability,build,build,211,Only install the xproofd script and man page if xproofd option is on; The condition if(xproofd AND xrootd AND ssl) is chosen to be consistent with the condition in proof/CMakeLists.txt which is the condition to build libXrdProofd.so that is used by the xproofd script.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6281
https://github.com/root-project/root/pull/6281:110,security,ssl,ssl,110,Only install the xproofd script and man page if xproofd option is on; The condition if(xproofd AND xrootd AND ssl) is chosen to be consistent with the condition in proof/CMakeLists.txt which is the condition to build libXrdProofd.so that is used by the xproofd script.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6281
https://github.com/root-project/root/pull/6281:131,usability,consist,consistent,131,Only install the xproofd script and man page if xproofd option is on; The condition if(xproofd AND xrootd AND ssl) is chosen to be consistent with the condition in proof/CMakeLists.txt which is the condition to build libXrdProofd.so that is used by the xproofd script.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6281
https://github.com/root-project/root/pull/6282:232,deployability,build,builds,232,"[cmake] fix file copy rules in CEF; Copy of subdirectories with configure_file is not working correctly,. therefore use file(COPY ...) signature cmake command. Test that batch mode works on mac, no need for special ozone (headless) builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6282
https://github.com/root-project/root/pull/6282:44,integrability,sub,subdirectories,44,"[cmake] fix file copy rules in CEF; Copy of subdirectories with configure_file is not working correctly,. therefore use file(COPY ...) signature cmake command. Test that batch mode works on mac, no need for special ozone (headless) builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6282
https://github.com/root-project/root/pull/6282:170,integrability,batch,batch,170,"[cmake] fix file copy rules in CEF; Copy of subdirectories with configure_file is not working correctly,. therefore use file(COPY ...) signature cmake command. Test that batch mode works on mac, no need for special ozone (headless) builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6282
https://github.com/root-project/root/pull/6282:170,performance,batch,batch,170,"[cmake] fix file copy rules in CEF; Copy of subdirectories with configure_file is not working correctly,. therefore use file(COPY ...) signature cmake command. Test that batch mode works on mac, no need for special ozone (headless) builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6282
https://github.com/root-project/root/pull/6282:160,safety,Test,Test,160,"[cmake] fix file copy rules in CEF; Copy of subdirectories with configure_file is not working correctly,. therefore use file(COPY ...) signature cmake command. Test that batch mode works on mac, no need for special ozone (headless) builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6282
https://github.com/root-project/root/pull/6282:135,security,sign,signature,135,"[cmake] fix file copy rules in CEF; Copy of subdirectories with configure_file is not working correctly,. therefore use file(COPY ...) signature cmake command. Test that batch mode works on mac, no need for special ozone (headless) builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6282
https://github.com/root-project/root/pull/6282:160,testability,Test,Test,160,"[cmake] fix file copy rules in CEF; Copy of subdirectories with configure_file is not working correctly,. therefore use file(COPY ...) signature cmake command. Test that batch mode works on mac, no need for special ozone (headless) builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6282
https://github.com/root-project/root/pull/6282:151,usability,command,command,151,"[cmake] fix file copy rules in CEF; Copy of subdirectories with configure_file is not working correctly,. therefore use file(COPY ...) signature cmake command. Test that batch mode works on mac, no need for special ozone (headless) builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6282
https://github.com/root-project/root/pull/6283:140,usability,document,document,140,"[PyROOT] Add TTree pythonization docs; [skip-ci]. Please @stwunsch have a look, and could you also add a commit with what you would like to document for `TTree.AsMatrix`?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6283
https://github.com/root-project/root/pull/6284:204,availability,error,errors,204,Improve TH1::GetCumulative to take into account axis ranges; By setting an axis range underflow/overflow can also be included in the. cumulative histograms. This fixes ROOT-10832. Fix also computation of errors in case of a weighted histogram. Note that the computed error on the cumulative histogram will be correlated with the previous bins.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6284
https://github.com/root-project/root/pull/6284:267,availability,error,error,267,Improve TH1::GetCumulative to take into account axis ranges; By setting an axis range underflow/overflow can also be included in the. cumulative histograms. This fixes ROOT-10832. Fix also computation of errors in case of a weighted histogram. Note that the computed error on the cumulative histogram will be correlated with the previous bins.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6284
https://github.com/root-project/root/pull/6284:204,performance,error,errors,204,Improve TH1::GetCumulative to take into account axis ranges; By setting an axis range underflow/overflow can also be included in the. cumulative histograms. This fixes ROOT-10832. Fix also computation of errors in case of a weighted histogram. Note that the computed error on the cumulative histogram will be correlated with the previous bins.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6284
https://github.com/root-project/root/pull/6284:267,performance,error,error,267,Improve TH1::GetCumulative to take into account axis ranges; By setting an axis range underflow/overflow can also be included in the. cumulative histograms. This fixes ROOT-10832. Fix also computation of errors in case of a weighted histogram. Note that the computed error on the cumulative histogram will be correlated with the previous bins.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6284
https://github.com/root-project/root/pull/6284:204,safety,error,errors,204,Improve TH1::GetCumulative to take into account axis ranges; By setting an axis range underflow/overflow can also be included in the. cumulative histograms. This fixes ROOT-10832. Fix also computation of errors in case of a weighted histogram. Note that the computed error on the cumulative histogram will be correlated with the previous bins.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6284
https://github.com/root-project/root/pull/6284:267,safety,error,error,267,Improve TH1::GetCumulative to take into account axis ranges; By setting an axis range underflow/overflow can also be included in the. cumulative histograms. This fixes ROOT-10832. Fix also computation of errors in case of a weighted histogram. Note that the computed error on the cumulative histogram will be correlated with the previous bins.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6284
https://github.com/root-project/root/pull/6284:204,usability,error,errors,204,Improve TH1::GetCumulative to take into account axis ranges; By setting an axis range underflow/overflow can also be included in the. cumulative histograms. This fixes ROOT-10832. Fix also computation of errors in case of a weighted histogram. Note that the computed error on the cumulative histogram will be correlated with the previous bins.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6284
https://github.com/root-project/root/pull/6284:267,usability,error,error,267,Improve TH1::GetCumulative to take into account axis ranges; By setting an axis range underflow/overflow can also be included in the. cumulative histograms. This fixes ROOT-10832. Fix also computation of errors in case of a weighted histogram. Note that the computed error on the cumulative histogram will be correlated with the previous bins.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6284
https://github.com/root-project/root/pull/6285:21,safety,except,exception,21,"[TMVA] GNN (with the exception of backward pass); I've commented or deleted most of the backward pass since I am certain it was implemented incorrectly (I believe that we have discussed that I had issues with it for almost a month) and I could not fix it during these weekends. . Most likely will make backward pass work in the upcoming weeks after the GSOC, otherwise, it's as we discussed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6285
https://github.com/root-project/root/pull/6286:86,availability,error,errors,86,[cmake] Load ctest envvars for Python vetos; Same as the backport for 6.18! Fixes the errors in the nightlies: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=21468. Coupled to https://github.com/root-project/roottest/pull/590,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6286
https://github.com/root-project/root/pull/6286:156,deployability,build,buildid,156,[cmake] Load ctest envvars for Python vetos; Same as the backport for 6.18! Fixes the errors in the nightlies: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=21468. Coupled to https://github.com/root-project/roottest/pull/590,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6286
https://github.com/root-project/root/pull/6286:8,energy efficiency,Load,Load,8,[cmake] Load ctest envvars for Python vetos; Same as the backport for 6.18! Fixes the errors in the nightlies: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=21468. Coupled to https://github.com/root-project/roottest/pull/590,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6286
https://github.com/root-project/root/pull/6286:171,integrability,Coupl,Coupled,171,[cmake] Load ctest envvars for Python vetos; Same as the backport for 6.18! Fixes the errors in the nightlies: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=21468. Coupled to https://github.com/root-project/roottest/pull/590,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6286
https://github.com/root-project/root/pull/6286:171,modifiability,Coupl,Coupled,171,[cmake] Load ctest envvars for Python vetos; Same as the backport for 6.18! Fixes the errors in the nightlies: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=21468. Coupled to https://github.com/root-project/roottest/pull/590,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6286
https://github.com/root-project/root/pull/6286:8,performance,Load,Load,8,[cmake] Load ctest envvars for Python vetos; Same as the backport for 6.18! Fixes the errors in the nightlies: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=21468. Coupled to https://github.com/root-project/roottest/pull/590,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6286
https://github.com/root-project/root/pull/6286:86,performance,error,errors,86,[cmake] Load ctest envvars for Python vetos; Same as the backport for 6.18! Fixes the errors in the nightlies: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=21468. Coupled to https://github.com/root-project/roottest/pull/590,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6286
https://github.com/root-project/root/pull/6286:86,safety,error,errors,86,[cmake] Load ctest envvars for Python vetos; Same as the backport for 6.18! Fixes the errors in the nightlies: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=21468. Coupled to https://github.com/root-project/roottest/pull/590,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6286
https://github.com/root-project/root/pull/6286:171,testability,Coupl,Coupled,171,[cmake] Load ctest envvars for Python vetos; Same as the backport for 6.18! Fixes the errors in the nightlies: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=21468. Coupled to https://github.com/root-project/roottest/pull/590,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6286
https://github.com/root-project/root/pull/6286:86,usability,error,errors,86,[cmake] Load ctest envvars for Python vetos; Same as the backport for 6.18! Fixes the errors in the nightlies: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=21468. Coupled to https://github.com/root-project/roottest/pull/590,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6286
https://github.com/root-project/root/pull/6287:15,availability,state,statement,15,"[cling] Remove statement about ""policy restrictions"" wrt repos (NFC);; addresses https://github.com/root-project/cling/issues/307",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6287
https://github.com/root-project/root/pull/6287:15,integrability,state,statement,15,"[cling] Remove statement about ""policy restrictions"" wrt repos (NFC);; addresses https://github.com/root-project/cling/issues/307",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6287
https://github.com/root-project/root/pull/6287:32,security,polic,policy,32,"[cling] Remove statement about ""policy restrictions"" wrt repos (NFC);; addresses https://github.com/root-project/cling/issues/307",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6287
https://github.com/root-project/root/pull/6289:9,usability,support,support,9,"[DF] Add support for calling Display on move-only types; @vvolkl got bit by this and it's easy to work around, so why not :D",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6289
https://github.com/root-project/root/pull/6290:1,reliability,rca,rcanvas,1,[rcanvas] add missing include;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6290
https://github.com/root-project/root/pull/6292:16,deployability,Build,Build,16,"[master][cmake] Build xrootd in release mode with warnings enabled; * xrootd does not have anymore the -Werror flag in release mode. Therefore, we can remove the -w flag and use the standard. ROOT_EXTERNAL_CXX_FLAGS for the builtin xrootd. * Explicitely set the build type of xrootd to Release. This switches. from the default RelWithDebInfo to plain Release and ensures that. -Werror is not set. @amadio @oshadura Do you have any objections against these changes? Here are the magic lines in xrootd cmake (since 4.10.x and later): https://github.com/xrootd/xrootd/blob/stable-4.12.x/cmake/XRootDOSDefs.cmake#L26-L39)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6292
https://github.com/root-project/root/pull/6292:32,deployability,releas,release,32,"[master][cmake] Build xrootd in release mode with warnings enabled; * xrootd does not have anymore the -Werror flag in release mode. Therefore, we can remove the -w flag and use the standard. ROOT_EXTERNAL_CXX_FLAGS for the builtin xrootd. * Explicitely set the build type of xrootd to Release. This switches. from the default RelWithDebInfo to plain Release and ensures that. -Werror is not set. @amadio @oshadura Do you have any objections against these changes? Here are the magic lines in xrootd cmake (since 4.10.x and later): https://github.com/xrootd/xrootd/blob/stable-4.12.x/cmake/XRootDOSDefs.cmake#L26-L39)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6292
https://github.com/root-project/root/pull/6292:119,deployability,releas,release,119,"[master][cmake] Build xrootd in release mode with warnings enabled; * xrootd does not have anymore the -Werror flag in release mode. Therefore, we can remove the -w flag and use the standard. ROOT_EXTERNAL_CXX_FLAGS for the builtin xrootd. * Explicitely set the build type of xrootd to Release. This switches. from the default RelWithDebInfo to plain Release and ensures that. -Werror is not set. @amadio @oshadura Do you have any objections against these changes? Here are the magic lines in xrootd cmake (since 4.10.x and later): https://github.com/xrootd/xrootd/blob/stable-4.12.x/cmake/XRootDOSDefs.cmake#L26-L39)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6292
https://github.com/root-project/root/pull/6292:262,deployability,build,build,262,"[master][cmake] Build xrootd in release mode with warnings enabled; * xrootd does not have anymore the -Werror flag in release mode. Therefore, we can remove the -w flag and use the standard. ROOT_EXTERNAL_CXX_FLAGS for the builtin xrootd. * Explicitely set the build type of xrootd to Release. This switches. from the default RelWithDebInfo to plain Release and ensures that. -Werror is not set. @amadio @oshadura Do you have any objections against these changes? Here are the magic lines in xrootd cmake (since 4.10.x and later): https://github.com/xrootd/xrootd/blob/stable-4.12.x/cmake/XRootDOSDefs.cmake#L26-L39)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6292
https://github.com/root-project/root/pull/6292:286,deployability,Releas,Release,286,"[master][cmake] Build xrootd in release mode with warnings enabled; * xrootd does not have anymore the -Werror flag in release mode. Therefore, we can remove the -w flag and use the standard. ROOT_EXTERNAL_CXX_FLAGS for the builtin xrootd. * Explicitely set the build type of xrootd to Release. This switches. from the default RelWithDebInfo to plain Release and ensures that. -Werror is not set. @amadio @oshadura Do you have any objections against these changes? Here are the magic lines in xrootd cmake (since 4.10.x and later): https://github.com/xrootd/xrootd/blob/stable-4.12.x/cmake/XRootDOSDefs.cmake#L26-L39)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6292
https://github.com/root-project/root/pull/6292:351,deployability,Releas,Release,351,"[master][cmake] Build xrootd in release mode with warnings enabled; * xrootd does not have anymore the -Werror flag in release mode. Therefore, we can remove the -w flag and use the standard. ROOT_EXTERNAL_CXX_FLAGS for the builtin xrootd. * Explicitely set the build type of xrootd to Release. This switches. from the default RelWithDebInfo to plain Release and ensures that. -Werror is not set. @amadio @oshadura Do you have any objections against these changes? Here are the magic lines in xrootd cmake (since 4.10.x and later): https://github.com/xrootd/xrootd/blob/stable-4.12.x/cmake/XRootDOSDefs.cmake#L26-L39)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6292
https://github.com/root-project/root/pull/6292:182,interoperability,standard,standard,182,"[master][cmake] Build xrootd in release mode with warnings enabled; * xrootd does not have anymore the -Werror flag in release mode. Therefore, we can remove the -w flag and use the standard. ROOT_EXTERNAL_CXX_FLAGS for the builtin xrootd. * Explicitely set the build type of xrootd to Release. This switches. from the default RelWithDebInfo to plain Release and ensures that. -Werror is not set. @amadio @oshadura Do you have any objections against these changes? Here are the magic lines in xrootd cmake (since 4.10.x and later): https://github.com/xrootd/xrootd/blob/stable-4.12.x/cmake/XRootDOSDefs.cmake#L26-L39)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6292
https://github.com/root-project/root/pull/6292:77,reliability,doe,does,77,"[master][cmake] Build xrootd in release mode with warnings enabled; * xrootd does not have anymore the -Werror flag in release mode. Therefore, we can remove the -w flag and use the standard. ROOT_EXTERNAL_CXX_FLAGS for the builtin xrootd. * Explicitely set the build type of xrootd to Release. This switches. from the default RelWithDebInfo to plain Release and ensures that. -Werror is not set. @amadio @oshadura Do you have any objections against these changes? Here are the magic lines in xrootd cmake (since 4.10.x and later): https://github.com/xrootd/xrootd/blob/stable-4.12.x/cmake/XRootDOSDefs.cmake#L26-L39)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6292
https://github.com/root-project/root/pull/6293:14,usability,Document,Document,14,"[PyROOT][Doc] Document pythonizations of TDirectory, TDirectoryFile and TFile; [skip-ci]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6293
https://github.com/root-project/root/pull/6294:156,availability,error,errors,156,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6294:84,deployability,version,version,84,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6294:122,deployability,releas,release,122,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6294:150,deployability,build,build,150,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6294:300,deployability,releas,releases,300,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6294:360,deployability,releas,release,360,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6294:84,integrability,version,version,84,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6294:84,modifiability,version,version,84,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6294:156,performance,error,errors,156,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6294:156,safety,error,errors,156,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6294:156,usability,error,errors,156,"[Backport to v6.16][cmake] Suppress warnings for builtin xrootd; The builtin xrootd version 4.8.5 has the -Werror flag in release mode,. which causes build errors with future compilers such as happened with. gcc9. The -w flag suppresses all warnings even if -Werror is set. afterwards. Future xrootd releases (4.12 and later) have the -Werror. flag removed in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6294
https://github.com/root-project/root/pull/6295:62,energy efficiency,adapt,adapt,62,Fix GCC10 / recursive AST reading (ROOT-10849); Backport (and adapt) llvm-svn 331428 plus required prerequisites.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6295
https://github.com/root-project/root/pull/6295:62,integrability,adapt,adapt,62,Fix GCC10 / recursive AST reading (ROOT-10849); Backport (and adapt) llvm-svn 331428 plus required prerequisites.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6295
https://github.com/root-project/root/pull/6295:62,interoperability,adapt,adapt,62,Fix GCC10 / recursive AST reading (ROOT-10849); Backport (and adapt) llvm-svn 331428 plus required prerequisites.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6295
https://github.com/root-project/root/pull/6295:62,modifiability,adapt,adapt,62,Fix GCC10 / recursive AST reading (ROOT-10849); Backport (and adapt) llvm-svn 331428 plus required prerequisites.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6295
https://github.com/root-project/root/pull/6296:53,deployability,modul,modules,53,Shorten long paths and display number of duplicating modules.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6296
https://github.com/root-project/root/pull/6296:53,modifiability,modul,modules,53,Shorten long paths and display number of duplicating modules.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6296
https://github.com/root-project/root/pull/6296:53,safety,modul,modules,53,Shorten long paths and display number of duplicating modules.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6296
https://github.com/root-project/root/pull/6297:74,deployability,observ,observed,74,"[RF] Warn in RooRealBinding when users pass copies of parameters.; A user observed a crash in RooRealBinding when passing copies of. parameters. Further, replace an array of pointers by a std::vector. Less code,. easier to read.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6297
https://github.com/root-project/root/pull/6297:54,modifiability,paramet,parameters,54,"[RF] Warn in RooRealBinding when users pass copies of parameters.; A user observed a crash in RooRealBinding when passing copies of. parameters. Further, replace an array of pointers by a std::vector. Less code,. easier to read.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6297
https://github.com/root-project/root/pull/6297:133,modifiability,paramet,parameters,133,"[RF] Warn in RooRealBinding when users pass copies of parameters.; A user observed a crash in RooRealBinding when passing copies of. parameters. Further, replace an array of pointers by a std::vector. Less code,. easier to read.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6297
https://github.com/root-project/root/pull/6297:74,testability,observ,observed,74,"[RF] Warn in RooRealBinding when users pass copies of parameters.; A user observed a crash in RooRealBinding when passing copies of. parameters. Further, replace an array of pointers by a std::vector. Less code,. easier to read.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6297
https://github.com/root-project/root/pull/6297:33,usability,user,users,33,"[RF] Warn in RooRealBinding when users pass copies of parameters.; A user observed a crash in RooRealBinding when passing copies of. parameters. Further, replace an array of pointers by a std::vector. Less code,. easier to read.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6297
https://github.com/root-project/root/pull/6297:69,usability,user,user,69,"[RF] Warn in RooRealBinding when users pass copies of parameters.; A user observed a crash in RooRealBinding when passing copies of. parameters. Further, replace an array of pointers by a std::vector. Less code,. easier to read.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6297
https://github.com/root-project/root/pull/6298:492,availability,avail,available,492,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:55,deployability,build,build,55,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:1,energy efficiency,Core,Core,1,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:451,energy efficiency,core,core,451,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:492,reliability,availab,available,492,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:441,safety,test,tests,441,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:492,safety,avail,available,492,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:543,safety,test,tests,543,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:691,safety,test,tests,691,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:492,security,availab,available,492,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:441,testability,test,tests,441,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:543,testability,test,tests,543,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:691,testability,test,tests,691,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:39,usability,usab,usable,39,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6298:261,usability,usab,usable,261,"[Core] Attempt to make TThreadExecutor usable even if (build option) IMT=OFF; It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used. To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:. - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`. - I enabled the tests in `core/imt` irrespective of whether IMT is available. - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around. - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298
https://github.com/root-project/root/pull/6299:44,modifiability,variab,variable,44,[TMVA] Remove double definition of a static variable.; This fixes ROOT-10982,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6299
https://github.com/root-project/root/pull/6300:13,integrability,interfac,interface,13,[RF] Improve interface of RooArgSet / RooArgList; TODO,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6300
https://github.com/root-project/root/pull/6300:13,interoperability,interfac,interface,13,[RF] Improve interface of RooArgSet / RooArgList; TODO,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6300
https://github.com/root-project/root/pull/6300:13,modifiability,interfac,interface,13,[RF] Improve interface of RooArgSet / RooArgList; TODO,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6300
https://github.com/root-project/root/pull/6301:17,availability,state,states,17,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:63,availability,state,states,63,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:201,availability,state,state,201,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:476,availability,state,state,476,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:38,deployability,stack,stack,38,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:192,deployability,stack,stack,192,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:17,integrability,state,states,17,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:63,integrability,state,states,63,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:201,integrability,state,state,201,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:476,integrability,state,state,476,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:366,modifiability,Exten,Extend,366,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:12,performance,lock,lock,12,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:126,performance,content,content,126,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:282,performance,lock,lock,282,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:25,safety,Avoid,Avoid,25,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:12,security,lock,lock,12,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:282,security,lock,lock,282,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6301:294,usability,user,user-code,294,"Interpreter lock states; Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily. suspend the interpreter lock during user-code execution is already keeping/stashing away some. information. Extend that code to stash all the necessary information (was 'only' the delta. and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301
https://github.com/root-project/root/pull/6302:20,deployability,build,building,20,"[webgui] adjust CEF building; After upgrade to latest CEF one cannot use it from original directory and have to copy it into ROOT `bin/` or `lib/` subdirectories. But when running, sometime CEF tries to search it's files in other location. Try to convince CEF to search such files in concrete locations using `CefSettings` class. Fix several problems with Windows, provide short instruction how to compile CEF on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6302
https://github.com/root-project/root/pull/6302:36,deployability,upgrad,upgrade,36,"[webgui] adjust CEF building; After upgrade to latest CEF one cannot use it from original directory and have to copy it into ROOT `bin/` or `lib/` subdirectories. But when running, sometime CEF tries to search it's files in other location. Try to convince CEF to search such files in concrete locations using `CefSettings` class. Fix several problems with Windows, provide short instruction how to compile CEF on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6302
https://github.com/root-project/root/pull/6302:147,integrability,sub,subdirectories,147,"[webgui] adjust CEF building; After upgrade to latest CEF one cannot use it from original directory and have to copy it into ROOT `bin/` or `lib/` subdirectories. But when running, sometime CEF tries to search it's files in other location. Try to convince CEF to search such files in concrete locations using `CefSettings` class. Fix several problems with Windows, provide short instruction how to compile CEF on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6302
https://github.com/root-project/root/pull/6302:36,modifiability,upgrad,upgrade,36,"[webgui] adjust CEF building; After upgrade to latest CEF one cannot use it from original directory and have to copy it into ROOT `bin/` or `lib/` subdirectories. But when running, sometime CEF tries to search it's files in other location. Try to convince CEF to search such files in concrete locations using `CefSettings` class. Fix several problems with Windows, provide short instruction how to compile CEF on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6302
https://github.com/root-project/root/pull/6305:14,energy efficiency,load,load,14,fixed code to load JupyROOT in python2; An small bug detected in LCG98 that only affect python2. JupyROOT is not loaded when you are importing ROOT in the notebook. this code fix this problem. Omar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6305
https://github.com/root-project/root/pull/6305:113,energy efficiency,load,loaded,113,fixed code to load JupyROOT in python2; An small bug detected in LCG98 that only affect python2. JupyROOT is not loaded when you are importing ROOT in the notebook. this code fix this problem. Omar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6305
https://github.com/root-project/root/pull/6305:14,performance,load,load,14,fixed code to load JupyROOT in python2; An small bug detected in LCG98 that only affect python2. JupyROOT is not loaded when you are importing ROOT in the notebook. this code fix this problem. Omar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6305
https://github.com/root-project/root/pull/6305:113,performance,load,loaded,113,fixed code to load JupyROOT in python2; An small bug detected in LCG98 that only affect python2. JupyROOT is not loaded when you are importing ROOT in the notebook. this code fix this problem. Omar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6305
https://github.com/root-project/root/pull/6305:53,safety,detect,detected,53,fixed code to load JupyROOT in python2; An small bug detected in LCG98 that only affect python2. JupyROOT is not loaded when you are importing ROOT in the notebook. this code fix this problem. Omar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6305
https://github.com/root-project/root/pull/6305:53,security,detect,detected,53,fixed code to load JupyROOT in python2; An small bug detected in LCG98 that only affect python2. JupyROOT is not loaded when you are importing ROOT in the notebook. this code fix this problem. Omar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6305
https://github.com/root-project/root/pull/6306:0,deployability,Updat,Update,0,"Update RootMacros.cmake; Allow dictionary files to be created in subdirectories. This was working earlier and is broken now. As there is no way to define othe output directory, providing the dictionary with path is the only way to achieve that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6306
https://github.com/root-project/root/pull/6306:65,integrability,sub,subdirectories,65,"Update RootMacros.cmake; Allow dictionary files to be created in subdirectories. This was working earlier and is broken now. As there is no way to define othe output directory, providing the dictionary with path is the only way to achieve that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6306
https://github.com/root-project/root/pull/6306:0,safety,Updat,Update,0,"Update RootMacros.cmake; Allow dictionary files to be created in subdirectories. This was working earlier and is broken now. As there is no way to define othe output directory, providing the dictionary with path is the only way to achieve that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6306
https://github.com/root-project/root/pull/6306:0,security,Updat,Update,0,"Update RootMacros.cmake; Allow dictionary files to be created in subdirectories. This was working earlier and is broken now. As there is no way to define othe output directory, providing the dictionary with path is the only way to achieve that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6306
https://github.com/root-project/root/pull/6307:81,deployability,depend,dependent,81,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:91,deployability,modul,modules,91,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:259,deployability,depend,dependent,259,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:269,deployability,modul,modules,269,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:513,deployability,Modul,Module,513,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:531,deployability,modul,module,531,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:81,integrability,depend,dependent,81,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:259,integrability,depend,dependent,259,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:81,modifiability,depend,dependent,81,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:91,modifiability,modul,modules,91,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:259,modifiability,depend,dependent,259,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:269,modifiability,modul,modules,269,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:513,modifiability,Modul,Module,513,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:531,modifiability,modul,module,531,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:81,safety,depend,dependent,81,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:91,safety,modul,modules,91,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:259,safety,depend,dependent,259,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:269,safety,modul,modules,269,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:513,safety,Modul,Module,513,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:531,safety,modul,module,531,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:603,safety,Review,Reviewed,603,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:655,safety,review,reviews,655,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:81,testability,depend,dependent,81,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:259,testability,depend,dependent,259,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:603,testability,Review,Reviewed,603,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6307:655,testability,review,reviews,655,"[wincxxmodules] Backport D86514 - Correctly parse LateParsedTemplates in case of dependent modules.; While parsing LateParsedTemplates, Clang assumes that the Global DeclID matches. with the Local DeclID of a Decl. This is not the case when we have multiple. dependent modules , each having their own LateParsedTemplate section. In such a. case, a Local/Global DeclID confusion occurs which leads to improper casting of. FunctionDecl's. This commit creates a Vector to map the LateParsedTemplate section of each. Module with their module file and therefore resolving the Global/Local DeclID. confusion. Reviewed By: rsmith. Differential Revision: https://reviews.llvm.org/D86514. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6307
https://github.com/root-project/root/pull/6309:419,deployability,build,building,419,"[wincxxmodules] Simplify includes, Expose M_PI for Windows; On Windows, the M_PI constants are hidden inside #define _USE_MATH_DEFINES. guard. If this macro is not defined at the start of the program, some. other header file might include math.h and the header is suppressed. forever. Therefore, this commit moves #define _USE_MATH_DEFINES to the start of. the file and also custom defines M_PI as it is not exposed on building. Modules with Windows. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6309
https://github.com/root-project/root/pull/6309:429,deployability,Modul,Modules,429,"[wincxxmodules] Simplify includes, Expose M_PI for Windows; On Windows, the M_PI constants are hidden inside #define _USE_MATH_DEFINES. guard. If this macro is not defined at the start of the program, some. other header file might include math.h and the header is suppressed. forever. Therefore, this commit moves #define _USE_MATH_DEFINES to the start of. the file and also custom defines M_PI as it is not exposed on building. Modules with Windows. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6309
https://github.com/root-project/root/pull/6309:429,modifiability,Modul,Modules,429,"[wincxxmodules] Simplify includes, Expose M_PI for Windows; On Windows, the M_PI constants are hidden inside #define _USE_MATH_DEFINES. guard. If this macro is not defined at the start of the program, some. other header file might include math.h and the header is suppressed. forever. Therefore, this commit moves #define _USE_MATH_DEFINES to the start of. the file and also custom defines M_PI as it is not exposed on building. Modules with Windows. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6309
https://github.com/root-project/root/pull/6309:429,safety,Modul,Modules,429,"[wincxxmodules] Simplify includes, Expose M_PI for Windows; On Windows, the M_PI constants are hidden inside #define _USE_MATH_DEFINES. guard. If this macro is not defined at the start of the program, some. other header file might include math.h and the header is suppressed. forever. Therefore, this commit moves #define _USE_MATH_DEFINES to the start of. the file and also custom defines M_PI as it is not exposed on building. Modules with Windows. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6309
https://github.com/root-project/root/pull/6309:35,security,Expos,Expose,35,"[wincxxmodules] Simplify includes, Expose M_PI for Windows; On Windows, the M_PI constants are hidden inside #define _USE_MATH_DEFINES. guard. If this macro is not defined at the start of the program, some. other header file might include math.h and the header is suppressed. forever. Therefore, this commit moves #define _USE_MATH_DEFINES to the start of. the file and also custom defines M_PI as it is not exposed on building. Modules with Windows. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6309
https://github.com/root-project/root/pull/6309:408,security,expos,exposed,408,"[wincxxmodules] Simplify includes, Expose M_PI for Windows; On Windows, the M_PI constants are hidden inside #define _USE_MATH_DEFINES. guard. If this macro is not defined at the start of the program, some. other header file might include math.h and the header is suppressed. forever. Therefore, this commit moves #define _USE_MATH_DEFINES to the start of. the file and also custom defines M_PI as it is not exposed on building. Modules with Windows. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6309
https://github.com/root-project/root/pull/6309:16,testability,Simpl,Simplify,16,"[wincxxmodules] Simplify includes, Expose M_PI for Windows; On Windows, the M_PI constants are hidden inside #define _USE_MATH_DEFINES. guard. If this macro is not defined at the start of the program, some. other header file might include math.h and the header is suppressed. forever. Therefore, this commit moves #define _USE_MATH_DEFINES to the start of. the file and also custom defines M_PI as it is not exposed on building. Modules with Windows. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6309
https://github.com/root-project/root/pull/6309:16,usability,Simpl,Simplify,16,"[wincxxmodules] Simplify includes, Expose M_PI for Windows; On Windows, the M_PI constants are hidden inside #define _USE_MATH_DEFINES. guard. If this macro is not defined at the start of the program, some. other header file might include math.h and the header is suppressed. forever. Therefore, this commit moves #define _USE_MATH_DEFINES to the start of. the file and also custom defines M_PI as it is not exposed on building. Modules with Windows. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6309
https://github.com/root-project/root/pull/6309:375,usability,custom,custom,375,"[wincxxmodules] Simplify includes, Expose M_PI for Windows; On Windows, the M_PI constants are hidden inside #define _USE_MATH_DEFINES. guard. If this macro is not defined at the start of the program, some. other header file might include math.h and the header is suppressed. forever. Therefore, this commit moves #define _USE_MATH_DEFINES to the start of. the file and also custom defines M_PI as it is not exposed on building. Modules with Windows. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6309
https://github.com/root-project/root/pull/6310:428,deployability,contain,contain,428,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:609,deployability,integr,integrate,609,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:5,energy efficiency,Reduc,Reduce,5,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:1115,energy efficiency,reduc,reduced,1115,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:538,integrability,interfac,interfaces,538,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:609,integrability,integr,integrate,609,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:837,integrability,event,event,837,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:913,integrability,sub,substituted,913,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:538,interoperability,interfac,interfaces,538,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:609,interoperability,integr,integrate,609,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:538,modifiability,interfac,interfaces,538,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:609,modifiability,integr,integrate,609,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:1067,performance,time,times,1067,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:1085,performance,time,times,1085,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:419,reliability,doe,does,419,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:609,reliability,integr,integrate,609,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:609,security,integr,integrate,609,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:241,testability,simpl,simplifies,241,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:609,testability,integr,integrate,609,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6310:241,usability,simpl,simplifies,241,"[DF] Reduce amount of templates used for column readers; `RColumnReaderBase` is now a non-template class, and only its `Get`. method is templated over the type of the value to retrieve. This alternative design has two main advantages:. - it simplifies `RAction` greatly, removing the need for the special. `RTypeErasedColumnReader` type: now all column readers are type erased. in the sense that a `RColumnReaderBase*` does not contain the type of. the column that will be read. - it makes it possible to pass `RColumnReaderBase` through interfaces. that type-erase column types, which is important to better integrate. RDF and RDataSource: in the future, `RDataSource` implementations will. be able to return specialized column readers to RDF rather than raw. pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual. call to `SomeColumnReader<T>::Get` has been substituted with a direct,. inlined call to `RColumnReaderBase::Get<T>` which in turn executes a. virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount. of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6310
https://github.com/root-project/root/pull/6312:19,deployability,instal,installation,19,[JupyROOT] Support installation of JupyROOT lib on Python directories; This supersedes https://github.com/root-project/root/pull/6248 and should fix the case when JupyROOT is installed on Python directories. Uses the same solution implemented by @eguiraud for `libROOTPythonizations`:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/CMakeLists.txt#L145-L146,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6312
https://github.com/root-project/root/pull/6312:175,deployability,instal,installed,175,[JupyROOT] Support installation of JupyROOT lib on Python directories; This supersedes https://github.com/root-project/root/pull/6248 and should fix the case when JupyROOT is installed on Python directories. Uses the same solution implemented by @eguiraud for `libROOTPythonizations`:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/CMakeLists.txt#L145-L146,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6312
https://github.com/root-project/root/pull/6312:335,interoperability,bind,bindings,335,[JupyROOT] Support installation of JupyROOT lib on Python directories; This supersedes https://github.com/root-project/root/pull/6248 and should fix the case when JupyROOT is installed on Python directories. Uses the same solution implemented by @eguiraud for `libROOTPythonizations`:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/CMakeLists.txt#L145-L146,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6312
https://github.com/root-project/root/pull/6312:335,modifiability,bind,bindings,335,[JupyROOT] Support installation of JupyROOT lib on Python directories; This supersedes https://github.com/root-project/root/pull/6248 and should fix the case when JupyROOT is installed on Python directories. Uses the same solution implemented by @eguiraud for `libROOTPythonizations`:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/CMakeLists.txt#L145-L146,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6312
https://github.com/root-project/root/pull/6312:11,usability,Support,Support,11,[JupyROOT] Support installation of JupyROOT lib on Python directories; This supersedes https://github.com/root-project/root/pull/6248 and should fix the case when JupyROOT is installed on Python directories. Uses the same solution implemented by @eguiraud for `libROOTPythonizations`:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/CMakeLists.txt#L145-L146,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6312
https://github.com/root-project/root/pull/6313:33,deployability,instal,installation,33,[JupyROOT] Backport 622: Support installation of JupyROOT lib on Python directories; Backport of https://github.com/root-project/root/pull/6312,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6313
https://github.com/root-project/root/pull/6313:25,usability,Support,Support,25,[JupyROOT] Backport 622: Support installation of JupyROOT lib on Python directories; Backport of https://github.com/root-project/root/pull/6312,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6313
https://github.com/root-project/root/pull/6315:272,deployability,integr,integrated,272,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:425,deployability,integr,integrals,425,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:483,deployability,integr,integrals,483,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:564,deployability,integr,integrals,564,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:619,deployability,integr,integrals,619,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:175,energy efficiency,Optim,Optimize,175,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:135,integrability,compon,components,135,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:272,integrability,integr,integrated,272,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:425,integrability,integr,integrals,425,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:483,integrability,integr,integrals,483,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:564,integrability,integr,integrals,564,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:619,integrability,integr,integrals,619,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:135,interoperability,compon,components,135,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:272,interoperability,integr,integrated,272,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:425,interoperability,integr,integrals,425,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:483,interoperability,integr,integrals,483,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:564,interoperability,integr,integrals,564,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:619,interoperability,integr,integrals,619,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:135,modifiability,compon,components,135,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:272,modifiability,integr,integrated,272,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:425,modifiability,integr,integrals,425,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:483,modifiability,integr,integrals,483,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:564,modifiability,integr,integrals,564,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:619,modifiability,integr,integrals,619,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:27,performance,cach,caching,27,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:164,performance,cach,cached,164,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:175,performance,Optimiz,Optimize,175,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:207,performance,cach,caches,207,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:331,performance,cach,cached,331,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:600,performance,cach,cached,600,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:272,reliability,integr,integrated,272,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:425,reliability,integr,integrals,425,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:483,reliability,integr,integrals,483,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:564,reliability,integr,integrals,564,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:619,reliability,integr,integrals,619,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:272,security,integr,integrated,272,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:425,security,integr,integrals,425,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:483,security,integr,integrals,483,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:564,security,integr,integrals,564,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:619,security,integr,integrals,619,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:272,testability,integr,integrated,272,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:425,testability,integr,integrals,425,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:483,testability,integr,integrals,483,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:564,testability,integr,integrals,564,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6315:619,testability,integr,integrals,619,"[RF][ROOT-7720] Try to fix caching Bug in ProductPdf.; I believe this is what happens:. - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation. - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals. - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6315
https://github.com/root-project/root/pull/6316:0,deployability,Updat,Update,0,"Update thisroot.sh; The current version neglected that the user might want to call a symbolic link (for convenience) rather than the full path. The conditional is required to allow calls by either executing the link, or by sourcing the link.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6316
https://github.com/root-project/root/pull/6316:32,deployability,version,version,32,"Update thisroot.sh; The current version neglected that the user might want to call a symbolic link (for convenience) rather than the full path. The conditional is required to allow calls by either executing the link, or by sourcing the link.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6316
https://github.com/root-project/root/pull/6316:24,energy efficiency,current,current,24,"Update thisroot.sh; The current version neglected that the user might want to call a symbolic link (for convenience) rather than the full path. The conditional is required to allow calls by either executing the link, or by sourcing the link.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6316
https://github.com/root-project/root/pull/6316:32,integrability,version,version,32,"Update thisroot.sh; The current version neglected that the user might want to call a symbolic link (for convenience) rather than the full path. The conditional is required to allow calls by either executing the link, or by sourcing the link.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6316
https://github.com/root-project/root/pull/6316:32,modifiability,version,version,32,"Update thisroot.sh; The current version neglected that the user might want to call a symbolic link (for convenience) rather than the full path. The conditional is required to allow calls by either executing the link, or by sourcing the link.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6316
https://github.com/root-project/root/pull/6316:0,safety,Updat,Update,0,"Update thisroot.sh; The current version neglected that the user might want to call a symbolic link (for convenience) rather than the full path. The conditional is required to allow calls by either executing the link, or by sourcing the link.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6316
https://github.com/root-project/root/pull/6316:0,security,Updat,Update,0,"Update thisroot.sh; The current version neglected that the user might want to call a symbolic link (for convenience) rather than the full path. The conditional is required to allow calls by either executing the link, or by sourcing the link.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6316
https://github.com/root-project/root/pull/6316:59,usability,user,user,59,"Update thisroot.sh; The current version neglected that the user might want to call a symbolic link (for convenience) rather than the full path. The conditional is required to allow calls by either executing the link, or by sourcing the link.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6316
https://github.com/root-project/root/pull/6317:14,modifiability,variab,variable,14,"remove unused variable; ""c"" is not used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6317
https://github.com/root-project/root/pull/6318:0,interoperability,Format,Formatting,0,Formatting and help editing; Formatting and help editing of perceptualcolormap.C,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6318
https://github.com/root-project/root/pull/6318:29,interoperability,Format,Formatting,29,Formatting and help editing; Formatting and help editing of perceptualcolormap.C,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6318
https://github.com/root-project/root/pull/6318:15,usability,help,help,15,Formatting and help editing; Formatting and help editing of perceptualcolormap.C,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6318
https://github.com/root-project/root/pull/6318:44,usability,help,help,44,Formatting and help editing; Formatting and help editing of perceptualcolormap.C,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6318
https://github.com/root-project/root/pull/6319:42,integrability,batch,batch,42,"[PyROOT][ROOT-11027] Revert activation of batch mode made by cppyy; Right after importing cppyy, set batch mode to false to. neutralize the setting to true made by cppyy (in case ROOTSYS. is not defined). Disabling the batch mode at this point is ok, since the user. settings done via command line (-b) or programmatically are. processed later. This means the setting we do here does not. overwrite a possible user setting. More information about the issue fixed by this commit here:. https://sft.its.cern.ch/jira/browse/ROOT-11027",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6319
https://github.com/root-project/root/pull/6319:101,integrability,batch,batch,101,"[PyROOT][ROOT-11027] Revert activation of batch mode made by cppyy; Right after importing cppyy, set batch mode to false to. neutralize the setting to true made by cppyy (in case ROOTSYS. is not defined). Disabling the batch mode at this point is ok, since the user. settings done via command line (-b) or programmatically are. processed later. This means the setting we do here does not. overwrite a possible user setting. More information about the issue fixed by this commit here:. https://sft.its.cern.ch/jira/browse/ROOT-11027",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6319
https://github.com/root-project/root/pull/6319:219,integrability,batch,batch,219,"[PyROOT][ROOT-11027] Revert activation of batch mode made by cppyy; Right after importing cppyy, set batch mode to false to. neutralize the setting to true made by cppyy (in case ROOTSYS. is not defined). Disabling the batch mode at this point is ok, since the user. settings done via command line (-b) or programmatically are. processed later. This means the setting we do here does not. overwrite a possible user setting. More information about the issue fixed by this commit here:. https://sft.its.cern.ch/jira/browse/ROOT-11027",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6319
https://github.com/root-project/root/pull/6319:42,performance,batch,batch,42,"[PyROOT][ROOT-11027] Revert activation of batch mode made by cppyy; Right after importing cppyy, set batch mode to false to. neutralize the setting to true made by cppyy (in case ROOTSYS. is not defined). Disabling the batch mode at this point is ok, since the user. settings done via command line (-b) or programmatically are. processed later. This means the setting we do here does not. overwrite a possible user setting. More information about the issue fixed by this commit here:. https://sft.its.cern.ch/jira/browse/ROOT-11027",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6319
https://github.com/root-project/root/pull/6319:101,performance,batch,batch,101,"[PyROOT][ROOT-11027] Revert activation of batch mode made by cppyy; Right after importing cppyy, set batch mode to false to. neutralize the setting to true made by cppyy (in case ROOTSYS. is not defined). Disabling the batch mode at this point is ok, since the user. settings done via command line (-b) or programmatically are. processed later. This means the setting we do here does not. overwrite a possible user setting. More information about the issue fixed by this commit here:. https://sft.its.cern.ch/jira/browse/ROOT-11027",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6319
https://github.com/root-project/root/pull/6319:219,performance,batch,batch,219,"[PyROOT][ROOT-11027] Revert activation of batch mode made by cppyy; Right after importing cppyy, set batch mode to false to. neutralize the setting to true made by cppyy (in case ROOTSYS. is not defined). Disabling the batch mode at this point is ok, since the user. settings done via command line (-b) or programmatically are. processed later. This means the setting we do here does not. overwrite a possible user setting. More information about the issue fixed by this commit here:. https://sft.its.cern.ch/jira/browse/ROOT-11027",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6319
https://github.com/root-project/root/pull/6319:379,reliability,doe,does,379,"[PyROOT][ROOT-11027] Revert activation of batch mode made by cppyy; Right after importing cppyy, set batch mode to false to. neutralize the setting to true made by cppyy (in case ROOTSYS. is not defined). Disabling the batch mode at this point is ok, since the user. settings done via command line (-b) or programmatically are. processed later. This means the setting we do here does not. overwrite a possible user setting. More information about the issue fixed by this commit here:. https://sft.its.cern.ch/jira/browse/ROOT-11027",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6319
https://github.com/root-project/root/pull/6319:261,usability,user,user,261,"[PyROOT][ROOT-11027] Revert activation of batch mode made by cppyy; Right after importing cppyy, set batch mode to false to. neutralize the setting to true made by cppyy (in case ROOTSYS. is not defined). Disabling the batch mode at this point is ok, since the user. settings done via command line (-b) or programmatically are. processed later. This means the setting we do here does not. overwrite a possible user setting. More information about the issue fixed by this commit here:. https://sft.its.cern.ch/jira/browse/ROOT-11027",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6319
https://github.com/root-project/root/pull/6319:285,usability,command,command,285,"[PyROOT][ROOT-11027] Revert activation of batch mode made by cppyy; Right after importing cppyy, set batch mode to false to. neutralize the setting to true made by cppyy (in case ROOTSYS. is not defined). Disabling the batch mode at this point is ok, since the user. settings done via command line (-b) or programmatically are. processed later. This means the setting we do here does not. overwrite a possible user setting. More information about the issue fixed by this commit here:. https://sft.its.cern.ch/jira/browse/ROOT-11027",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6319
https://github.com/root-project/root/pull/6319:410,usability,user,user,410,"[PyROOT][ROOT-11027] Revert activation of batch mode made by cppyy; Right after importing cppyy, set batch mode to false to. neutralize the setting to true made by cppyy (in case ROOTSYS. is not defined). Disabling the batch mode at this point is ok, since the user. settings done via command line (-b) or programmatically are. processed later. This means the setting we do here does not. overwrite a possible user setting. More information about the issue fixed by this commit here:. https://sft.its.cern.ch/jira/browse/ROOT-11027",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6319
https://github.com/root-project/root/pull/6320:56,integrability,batch,batch,56,[PyROOT][ROOT-11027] Backport 622: Revert activation of batch mode made by cppyy; Backport of https://github.com/root-project/root/pull/6319,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6320
https://github.com/root-project/root/pull/6320:56,performance,batch,batch,56,[PyROOT][ROOT-11027] Backport 622: Revert activation of batch mode made by cppyy; Backport of https://github.com/root-project/root/pull/6319,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6320
https://github.com/root-project/root/pull/6321:135,deployability,contain,contains,135,"[RF] Add RooFitCore initialisation.; When RooFitCore is loaded, an initialisation function is called. It prints the RooFit banner, and contains a dummy function that can. load architecture-specific computation libraries once they are. implemented. So far, this only works for gcc and clang. For other compilers, a fall back. without architecture specific symbols will be used. Manos will use this. to provide Root with optimised fitting libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6321
https://github.com/root-project/root/pull/6321:56,energy efficiency,load,loaded,56,"[RF] Add RooFitCore initialisation.; When RooFitCore is loaded, an initialisation function is called. It prints the RooFit banner, and contains a dummy function that can. load architecture-specific computation libraries once they are. implemented. So far, this only works for gcc and clang. For other compilers, a fall back. without architecture specific symbols will be used. Manos will use this. to provide Root with optimised fitting libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6321
https://github.com/root-project/root/pull/6321:171,energy efficiency,load,load,171,"[RF] Add RooFitCore initialisation.; When RooFitCore is loaded, an initialisation function is called. It prints the RooFit banner, and contains a dummy function that can. load architecture-specific computation libraries once they are. implemented. So far, this only works for gcc and clang. For other compilers, a fall back. without architecture specific symbols will be used. Manos will use this. to provide Root with optimised fitting libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6321
https://github.com/root-project/root/pull/6321:419,energy efficiency,optim,optimised,419,"[RF] Add RooFitCore initialisation.; When RooFitCore is loaded, an initialisation function is called. It prints the RooFit banner, and contains a dummy function that can. load architecture-specific computation libraries once they are. implemented. So far, this only works for gcc and clang. For other compilers, a fall back. without architecture specific symbols will be used. Manos will use this. to provide Root with optimised fitting libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6321
https://github.com/root-project/root/pull/6321:176,interoperability,architectur,architecture-specific,176,"[RF] Add RooFitCore initialisation.; When RooFitCore is loaded, an initialisation function is called. It prints the RooFit banner, and contains a dummy function that can. load architecture-specific computation libraries once they are. implemented. So far, this only works for gcc and clang. For other compilers, a fall back. without architecture specific symbols will be used. Manos will use this. to provide Root with optimised fitting libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6321
https://github.com/root-project/root/pull/6321:333,interoperability,architectur,architecture,333,"[RF] Add RooFitCore initialisation.; When RooFitCore is loaded, an initialisation function is called. It prints the RooFit banner, and contains a dummy function that can. load architecture-specific computation libraries once they are. implemented. So far, this only works for gcc and clang. For other compilers, a fall back. without architecture specific symbols will be used. Manos will use this. to provide Root with optimised fitting libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6321
https://github.com/root-project/root/pull/6321:346,interoperability,specif,specific,346,"[RF] Add RooFitCore initialisation.; When RooFitCore is loaded, an initialisation function is called. It prints the RooFit banner, and contains a dummy function that can. load architecture-specific computation libraries once they are. implemented. So far, this only works for gcc and clang. For other compilers, a fall back. without architecture specific symbols will be used. Manos will use this. to provide Root with optimised fitting libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6321
https://github.com/root-project/root/pull/6321:56,performance,load,loaded,56,"[RF] Add RooFitCore initialisation.; When RooFitCore is loaded, an initialisation function is called. It prints the RooFit banner, and contains a dummy function that can. load architecture-specific computation libraries once they are. implemented. So far, this only works for gcc and clang. For other compilers, a fall back. without architecture specific symbols will be used. Manos will use this. to provide Root with optimised fitting libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6321
https://github.com/root-project/root/pull/6321:171,performance,load,load,171,"[RF] Add RooFitCore initialisation.; When RooFitCore is loaded, an initialisation function is called. It prints the RooFit banner, and contains a dummy function that can. load architecture-specific computation libraries once they are. implemented. So far, this only works for gcc and clang. For other compilers, a fall back. without architecture specific symbols will be used. Manos will use this. to provide Root with optimised fitting libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6321
https://github.com/root-project/root/pull/6322:101,deployability,API,API,101,[minirntuple] Move RError.hxx / cxx to Foundation; First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6322
https://github.com/root-project/root/pull/6322:118,deployability,depend,dependencies,118,[minirntuple] Move RError.hxx / cxx to Foundation; First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6322
https://github.com/root-project/root/pull/6322:101,integrability,API,API,101,[minirntuple] Move RError.hxx / cxx to Foundation; First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6322
https://github.com/root-project/root/pull/6322:118,integrability,depend,dependencies,118,[minirntuple] Move RError.hxx / cxx to Foundation; First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6322
https://github.com/root-project/root/pull/6322:101,interoperability,API,API,101,[minirntuple] Move RError.hxx / cxx to Foundation; First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6322
https://github.com/root-project/root/pull/6322:118,modifiability,depend,dependencies,118,[minirntuple] Move RError.hxx / cxx to Foundation; First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6322
https://github.com/root-project/root/pull/6322:118,safety,depend,dependencies,118,[minirntuple] Move RError.hxx / cxx to Foundation; First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6322
https://github.com/root-project/root/pull/6322:118,testability,depend,dependencies,118,[minirntuple] Move RError.hxx / cxx to Foundation; First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6322
https://github.com/root-project/root/pull/6322:110,usability,minim,minimal,110,[minirntuple] Move RError.hxx / cxx to Foundation; First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6322
https://github.com/root-project/root/pull/6323:104,safety,Test,Testing,104,"[RF] Usability improvements for RooArgSet.; This is a copy of #6300, where one commit has been removed. Testing now if windows is happy without the commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6323
https://github.com/root-project/root/pull/6323:104,testability,Test,Testing,104,"[RF] Usability improvements for RooArgSet.; This is a copy of #6300, where one commit has been removed. Testing now if windows is happy without the commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6323
https://github.com/root-project/root/pull/6323:5,usability,Usab,Usability,5,"[RF] Usability improvements for RooArgSet.; This is a copy of #6300, where one commit has been removed. Testing now if windows is happy without the commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6323
https://github.com/root-project/root/pull/6325:49,availability,recov,recovery,49,"[DF] Use std::array for column readers; It makes recovery of column values slightly faster, which is visible in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6325
https://github.com/root-project/root/pull/6325:75,availability,sli,slightly,75,"[DF] Use std::array for column readers; It makes recovery of column values slightly faster, which is visible in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6325
https://github.com/root-project/root/pull/6325:49,deployability,recov,recovery,49,"[DF] Use std::array for column readers; It makes recovery of column values slightly faster, which is visible in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6325
https://github.com/root-project/root/pull/6325:49,reliability,recov,recovery,49,"[DF] Use std::array for column readers; It makes recovery of column values slightly faster, which is visible in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6325
https://github.com/root-project/root/pull/6325:75,reliability,sli,slightly,75,"[DF] Use std::array for column readers; It makes recovery of column values slightly faster, which is visible in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6325
https://github.com/root-project/root/pull/6325:49,safety,recov,recovery,49,"[DF] Use std::array for column readers; It makes recovery of column values slightly faster, which is visible in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6325
https://github.com/root-project/root/pull/6325:49,security,recov,recovery,49,"[DF] Use std::array for column readers; It makes recovery of column values slightly faster, which is visible in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6325
https://github.com/root-project/root/pull/6326:36,availability,error,error,36,"[TTreeReader] Formatting and better error message; @Axel-Naumann @pcanal up to you, we can live without these commits but since I had them hanging around...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6326
https://github.com/root-project/root/pull/6326:42,integrability,messag,message,42,"[TTreeReader] Formatting and better error message; @Axel-Naumann @pcanal up to you, we can live without these commits but since I had them hanging around...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6326
https://github.com/root-project/root/pull/6326:14,interoperability,Format,Formatting,14,"[TTreeReader] Formatting and better error message; @Axel-Naumann @pcanal up to you, we can live without these commits but since I had them hanging around...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6326
https://github.com/root-project/root/pull/6326:42,interoperability,messag,message,42,"[TTreeReader] Formatting and better error message; @Axel-Naumann @pcanal up to you, we can live without these commits but since I had them hanging around...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6326
https://github.com/root-project/root/pull/6326:36,performance,error,error,36,"[TTreeReader] Formatting and better error message; @Axel-Naumann @pcanal up to you, we can live without these commits but since I had them hanging around...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6326
https://github.com/root-project/root/pull/6326:36,safety,error,error,36,"[TTreeReader] Formatting and better error message; @Axel-Naumann @pcanal up to you, we can live without these commits but since I had them hanging around...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6326
https://github.com/root-project/root/pull/6326:36,usability,error,error,36,"[TTreeReader] Formatting and better error message; @Axel-Naumann @pcanal up to you, we can live without these commits but since I had them hanging around...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6326
https://github.com/root-project/root/pull/6327:1166,availability,avail,available,1166,"t takes an execution policy as a parameter and initializes the corresponding data member executor to execute on. ```cpp. ROOT::Internal::TExecutor x1{}; // defaults to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common inter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3230,availability,state,statements,3230,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1246,deployability,build,build,1246,"ata member executor to execute on. ```cpp. ROOT::Internal::TExecutor x1{}; // defaults to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the bas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1328,deployability,contain,contains,1328,"lts to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1456,deployability,depend,dependencies,1456,"nal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1476,deployability,build,build,1476,"(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2936,deployability,build,build,2936,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2961,deployability,depend,dependencies,2961,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1756,energy efficiency,Reduc,Reduce,1756," is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/196144",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1807,energy efficiency,reduc,reduction,1807,"; // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2215,energy efficiency,reduc,reduction,2215," made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2487,energy efficiency,reduc,reduction,2487,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3060,energy efficiency,Adapt,Adapt,3060,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3260,energy efficiency,Adapt,Adapt,3260,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1456,integrability,depend,dependencies,1456,"nal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1533,integrability,interfac,interfaces,1533,"l actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the execu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1632,integrability,interfac,interfaces,1632,"Policy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2166,integrability,interfac,interfaces,2166,"able as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2448,integrability,interfac,interface,2448,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2706,integrability,event,event,2706,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2869,integrability,interfac,interface,2869,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2961,integrability,depend,dependencies,2961,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3060,integrability,Adapt,Adapt,3060,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3230,integrability,state,statements,3230,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3260,integrability,Adapt,Adapt,3260,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1533,interoperability,interfac,interfaces,1533,"l actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the execu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1632,interoperability,interfac,interfaces,1632,"Policy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2166,interoperability,interfac,interfaces,2166,"able as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2448,interoperability,interfac,interface,2448,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2644,interoperability,Format,Formatting,2644,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2869,interoperability,interfac,interface,2869,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3060,interoperability,Adapt,Adapt,3060,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3260,interoperability,Adapt,Adapt,3260,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:204,modifiability,paramet,parameter,204,"Add a Generalized Executor and improve documentation.; Opening this PR so I can start correcting as I work on it. This PR introduces a ""generalized"" executor for ROOT, that takes an execution policy as a parameter and initializes the corresponding data member executor to execute on. ```cpp. ROOT::Internal::TExecutor x1{}; // defaults to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1456,modifiability,depend,dependencies,1456,"nal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1533,modifiability,interfac,interfaces,1533,"l actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the execu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1632,modifiability,interfac,interfaces,1632,"Policy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1717,modifiability,paramet,parameter,1717,"icy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2166,modifiability,interfac,interfaces,2166,"able as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2448,modifiability,interfac,interface,2448,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2841,modifiability,Exten,Extend,2841,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2869,modifiability,interfac,interface,2869,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2961,modifiability,depend,dependencies,2961,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3060,modifiability,Adapt,Adapt,3060,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3207,modifiability,Refact,Refactoring,3207,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3260,modifiability,Adapt,Adapt,3260,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1798,performance,Parallel,Parallel,1798,"n 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I thin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2206,performance,parallel,parallel,2206,"se we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Ref",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2478,performance,parallel,parallel,2478,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3207,performance,Refactor,Refactoring,3207,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1166,reliability,availab,available,1166,"t takes an execution policy as a parameter and initializes the corresponding data member executor to execute on. ```cpp. ROOT::Internal::TExecutor x1{}; // defaults to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common inter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1166,safety,avail,available,1166,"t takes an execution policy as a parameter and initializes the corresponding data member executor to execute on. ```cpp. ROOT::Internal::TExecutor x1{}; // defaults to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common inter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1441,safety,avoid,avoid,1441,"x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every ot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1456,safety,depend,dependencies,1456,"nal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2911,safety,test,tests,2911,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2961,safety,depend,dependencies,2961,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:192,security,polic,policy,192,"Add a Generalized Executor and improve documentation.; Opening this PR so I can start correcting as I work on it. This PR introduces a ""generalized"" executor for ROOT, that takes an execution policy as a parameter and initializes the corresponding data member executor to execute on. ```cpp. ROOT::Internal::TExecutor x1{}; // defaults to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1166,security,availab,available,1166,"t takes an execution policy as a parameter and initializes the corresponding data member executor to execute on. ```cpp. ROOT::Internal::TExecutor x1{}; // defaults to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common inter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1192,security,polic,policy,1192,"icy as a parameter and initializes the corresponding data member executor to execute on. ```cpp. ROOT::Internal::TExecutor x1{}; // defaults to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1670,security,polic,policy,1670,"ternal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check quest",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3097,security,polic,policies,3097,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:3280,security,sign,signature,3280,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:754,testability,unit,units,754,"Add a Generalized Executor and improve documentation.; Opening this PR so I can start correcting as I work on it. This PR introduces a ""generalized"" executor for ROOT, that takes an execution policy as a parameter and initializes the corresponding data member executor to execute on. ```cpp. ROOT::Internal::TExecutor x1{}; // defaults to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1456,testability,depend,dependencies,1456,"nal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2911,testability,test,tests,2911,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2961,testability,depend,dependencies,2961,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:39,usability,document,documentation,39,"Add a Generalized Executor and improve documentation.; Opening this PR so I can start correcting as I work on it. This PR introduces a ""generalized"" executor for ROOT, that takes an execution policy as a parameter and initializes the corresponding data member executor to execute on. ```cpp. ROOT::Internal::TExecutor x1{}; // defaults to multithreaded if IMT enabled, otherwise sequential. ROOT::EnableImplicitMT();. ROOT::Internal::TExecutor x2{};. ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:1498,usability,statu,status,1498,"tionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads. ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);. ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map. x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map. x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map. ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2547,usability,support,supports,2547,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6327:2989,usability,document,documentation,2989,"he best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | . ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |. TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |. TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |. TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |. TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming? - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:. - [ ] Adapt ROOT Fitting. - [x] Change the policies to kSequential, kMultiThread and KMultiProcess. - [ ] Moving it out of the Internal namespace. - [x] Refactoring the switch statements if possible. - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6327
https://github.com/root-project/root/pull/6328:0,deployability,Updat,Update,0,Update issue templates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6328
https://github.com/root-project/root/pull/6328:0,safety,Updat,Update,0,Update issue templates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6328
https://github.com/root-project/root/pull/6328:0,security,Updat,Update,0,Update issue templates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6328
https://github.com/root-project/root/pull/6329:60,deployability,version,version,60,Fix GCC10 / recursive AST reading (ROOT-10849) v6.20; v6.20 version of https://github.com/root-project/root/pull/6295,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6329
https://github.com/root-project/root/pull/6329:60,integrability,version,version,60,Fix GCC10 / recursive AST reading (ROOT-10849) v6.20; v6.20 version of https://github.com/root-project/root/pull/6295,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6329
https://github.com/root-project/root/pull/6329:60,modifiability,version,version,60,Fix GCC10 / recursive AST reading (ROOT-10849) v6.20; v6.20 version of https://github.com/root-project/root/pull/6295,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6329
https://github.com/root-project/root/pull/6330:0,deployability,Updat,Update,0,Update issue templates [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6330
https://github.com/root-project/root/pull/6330:0,safety,Updat,Update,0,Update issue templates [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6330
https://github.com/root-project/root/pull/6330:0,security,Updat,Update,0,Update issue templates [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6330
https://github.com/root-project/root/issues/6331:15,availability,failur,failures,15,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:120,availability,failur,failures,120,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:15,deployability,fail,failures,15,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:120,deployability,fail,failures,120,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:15,performance,failur,failures,15,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:120,performance,failur,failures,120,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:15,reliability,fail,failures,15,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:120,reliability,fail,failures,120,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:10,safety,test,test,10,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:115,safety,test,test,115,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:10,testability,test,test,10,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/issues/6331:115,testability,test,test,115,"Fedora 32 test failures; After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead. * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6331
https://github.com/root-project/root/pull/6332:17,deployability,build,build,17,[clad] Merge the build steps for msvc and unix.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6332
https://github.com/root-project/root/pull/6334:133,deployability,updat,update,133,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:166,deployability,configurat,configuration,166,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:203,deployability,version,version,203,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:166,integrability,configur,configuration,166,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:203,integrability,version,version,203,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:117,modifiability,paramet,parameter,117,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:166,modifiability,configur,configuration,166,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:203,modifiability,version,version,203,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:133,safety,updat,update,133,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:133,security,updat,update,133,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:166,security,configur,configuration,166,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6334:19,usability,support,support,19,[http] Fix FastCGI support for Apache 2.4; Apache 2.4 has now own FastCGI implementation and uses different name for parameter. Also update docu with example FastCGI configuration for Apache 2.4 - older version no longer relevant,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6334
https://github.com/root-project/root/pull/6335:12,usability,support,support,12,"Fix FastCGI support for Apache 2.4, v6.22; Backport of #6334 to v6.22",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6335
https://github.com/root-project/root/pull/6336:31,energy efficiency,Current,Currently,31,[RNTupleDS] Test reading data; Currently a draft because reading RVecs is not working.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6336
https://github.com/root-project/root/pull/6336:12,safety,Test,Test,12,[RNTupleDS] Test reading data; Currently a draft because reading RVecs is not working.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6336
https://github.com/root-project/root/pull/6336:12,testability,Test,Test,12,[RNTupleDS] Test reading data; Currently a draft because reading RVecs is not working.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6336
https://github.com/root-project/root/pull/6337:217,usability,close,close,217,"[ntuple] Make ntpl004_dimuon.C compilable into an executable; Sometimes it's useful to be able to compile tutorials. Since I had to make these changes to debug something, I'm proposing them here as a PR. Feel free to close it if it's not something you want.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6337
https://github.com/root-project/root/pull/6338:96,safety,compl,complain,96,"[RNTupleDS] Use fully qualified name for free function definition; Otherwise the compiler won't complain if our definition stops matching. the declaration. Also remove ""ROOT::Experimental::"" when inside the. namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6338
https://github.com/root-project/root/pull/6338:96,security,compl,complain,96,"[RNTupleDS] Use fully qualified name for free function definition; Otherwise the compiler won't complain if our definition stops matching. the declaration. Also remove ""ROOT::Experimental::"" when inside the. namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6338
https://github.com/root-project/root/pull/6338:123,usability,stop,stops,123,"[RNTupleDS] Use fully qualified name for free function definition; Otherwise the compiler won't complain if our definition stops matching. the declaration. Also remove ""ROOT::Experimental::"" when inside the. namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6338
https://github.com/root-project/root/pull/6339:137,safety,avoid,avoid,137,"[DF] Split ColumnReaders.hxx in one header per class; Besides being more in line with our coding conventions, we will need. the split to avoid circular includes between ColumnReaders.hxx and. RDataSource.hxx when we implement lazy RDS column readers. This PR is NFC, at least in spirit, but let's see what the bot says anyway.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6339
https://github.com/root-project/root/pull/6340:28,usability,behavi,behavior,28,[skip-ci][relnotes] Mention behavior change w.r.t. tbb::task_scheduler_init; Fixes ROOT-11014.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6340
https://github.com/root-project/root/issues/6343:271,availability,sli,slightly,271,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:777,availability,error,error,777,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:964,availability,error,error,964,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1120,availability,error,error,1120,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1277,availability,error,error,1277,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1472,availability,error,error,1472,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:596,energy efficiency,core,core,596,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:536,interoperability,specif,specifically,536,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:796,interoperability,specif,specified,796,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:976,interoperability,specif,specifier,976,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1132,interoperability,specif,specifier,1132,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1521,modifiability,paramet,parameter-,1521,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:777,performance,error,error,777,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:964,performance,error,error,964,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1120,performance,error,error,1120,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1277,performance,error,error,1277,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1472,performance,error,error,1472,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:271,reliability,sli,slightly,271,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:321,reliability,doe,does,321,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:382,reliability,doe,does,382,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:777,safety,error,error,777,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:964,safety,error,error,964,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1120,safety,error,error,1120,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1277,safety,error,error,1277,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1472,safety,error,error,1472,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1285,security,sign,signed,1285,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:777,usability,error,error,777,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:820,usability,guid,guide,820,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:964,usability,error,error,964,"Problem with ""using namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1014,usability,guid,guide,1014,"ng namespace std"" in generated dictionary files; In the autogenerated dictionary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. F",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1120,usability,error,error,1120,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1170,usability,guid,guide,1170,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1277,usability,error,error,1277,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1472,usability,error,error,1472,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1489,usability,guid,guide,1489,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6343:1868,usability,user,user,1868,"ary sources I see. ```. // Since CINT ignores the std namespace, we need to do so in this file. namespace std {} using namespace std;. ```. (this is from 6.14.08. 6.22.02 has a slightly different comment of `The generated code does not explicitly qualifies STL entities` (sic), but still does the `using...`). This is placed very early on, even before the include of the header files passed as arguments. Unfortunately, this causes problems, specifically when one of those header files pulls in Kokkos core headers, and there's a name clash with `rank` which is a free function in the kokkos namespace, and std::rank. ```. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: return type specified for deduction guide. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:42: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1895:32: error: decl-specifier in declaration of deduction guide. template <typename D, class... P>. ^~ . /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:30: error: 'signed' or 'unsigned' invalid for '__dguide_rank'. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^. /opt/kokkos/cuda/3.2-shlib/include/Kokkos_View.hpp:1896:1: error: deduction guide for 'std::rank< <template-parameter-1-1> >' must have trailing return type. KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {. ^~~~. /bld4/opt/gcc/8.4.0/include/c++/8.4.0/type_traits:1251:8: note: 'template<class> struct std::rank' declared here. struct rank. ^~~~. ```. Is there any way to make the `using namespace` appear AFTER the include of the user header files instead of before? If I manually edit the generated file, and move the `using namespace` to after the includes, it compiles fine. FWIW, the actual compilation is done with nvcc 11, and c++17. thanks, Charles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6343
https://github.com/root-project/root/issues/6344:1276,availability,operat,operations,1276,"typically like this. ```. #5 0x00007fc5a101e282 in TPad::ExecuteEvent(int, int, int) (this=0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:2225,availability,operat,operations,2225,"HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);. fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);. fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);. fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 - parentpy1);. ```. Would someone from developers be interested to look there ? Best regards,. Andrii.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1601,deployability,automat,automat,1601,"c/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);. fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);. fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);. fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1761,deployability,automat,automat,1761,"HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);. fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);. fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);. fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 - parentpy1);. ```. Would someone from developers be interested to look there ? Best regards,. Andrii.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1813,deployability,automat,automat,1813,"HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);. fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);. fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);. fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 - parentpy1);. ```. Would someone from developers be interested to look there ? Best regards,. Andrii.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:383,integrability,event,event,383,"Divisions by zero and other FPE; Hi all,. recently I've tried to recompile an older code with ROOT GUI and to debug some crashes. I've found that in many places the crashes occurred not in the code, but in the ROOT. More specifically in the GUI library graf2d. The backtrace looks typically like this. ```. #5 0x00007fc5a101e282 in TPad::ExecuteEvent(int, int, int) (this=0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:557,integrability,event,event,557,"Divisions by zero and other FPE; Hi all,. recently I've tried to recompile an older code with ROOT GUI and to debug some crashes. I've found that in many places the crashes occurred not in the code, but in the ROOT. More specifically in the GUI library graf2d. The backtrace looks typically like this. ```. #5 0x00007fc5a101e282 in TPad::ExecuteEvent(int, int, int) (this=0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:755,integrability,event,event,755,"Divisions by zero and other FPE; Hi all,. recently I've tried to recompile an older code with ROOT GUI and to debug some crashes. I've found that in many places the crashes occurred not in the code, but in the ROOT. More specifically in the GUI library graf2d. The backtrace looks typically like this. ```. #5 0x00007fc5a101e282 in TPad::ExecuteEvent(int, int, int) (this=0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:922,integrability,event,event,922,"Divisions by zero and other FPE; Hi all,. recently I've tried to recompile an older code with ROOT GUI and to debug some crashes. I've found that in many places the crashes occurred not in the code, but in the ROOT. More specifically in the GUI library graf2d. The backtrace looks typically like this. ```. #5 0x00007fc5a101e282 in TPad::ExecuteEvent(int, int, int) (this=0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1078,integrability,event,event,1078,"er code with ROOT GUI and to debug some crashes. I've found that in many places the crashes occurred not in the code, but in the ROOT. More specifically in the GUI library graf2d. The backtrace looks typically like this. ```. #5 0x00007fc5a101e282 in TPad::ExecuteEvent(int, int, int) (this=0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2())",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:221,interoperability,specif,specifically,221,"Divisions by zero and other FPE; Hi all,. recently I've tried to recompile an older code with ROOT GUI and to debug some crashes. I've found that in many places the crashes occurred not in the code, but in the ROOT. More specifically in the GUI library graf2d. The backtrace looks typically like this. ```. #5 0x00007fc5a101e282 in TPad::ExecuteEvent(int, int, int) (this=0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1662,interoperability,specif,specified,1662,"007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);. fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);. fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);. fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 - parentpy1);. ```. Would someone from developers be interested",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1287,performance,perform,performed,1287,"ike this. ```. #5 0x00007fc5a101e282 in TPad::ExecuteEvent(int, int, int) (this=0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. //",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:2218,safety,unsaf,unsafe,2218,"HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);. fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);. fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);. fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 - parentpy1);. ```. Would someone from developers be interested to look there ? Best regards,. Andrii.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1246,testability,trace,trace,1246,"ary graf2d. The backtrace looks typically like this. ```. #5 0x00007fc5a101e282 in TPad::ExecuteEvent(int, int, int) (this=0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1369,testability,simpl,simply,1369,"0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1601,testability,automat,automat,1601,"c/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);. fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);. fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);. fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1761,testability,automat,automat,1761,"HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);. fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);. fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);. fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 - parentpy1);. ```. Would someone from developers be interested to look there ? Best regards,. Andrii.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1813,testability,automat,automat,1813,"HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);. fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);. fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);. fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 - parentpy1);. ```. Would someone from developers be interested to look there ? Best regards,. Andrii.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1287,usability,perform,performed,1287,"ike this. ```. #5 0x00007fc5a101e282 in TPad::ExecuteEvent(int, int, int) (this=0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. //",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6344:1369,usability,simpl,simply,1369,"0x5960390, event=21, px=1031, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:2149. #6 0x00007fc5a100442d in TCanvas::HandleInput(EEventType, int, int) (this=0x3566d70, event=kButton1Motion, px=637, py=120) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:1291. #7 0x00007fc5a156c04b in TRootEmbeddedCanvas::HandleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387. #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531. #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843. #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this. ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```. Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());. Double_t labelsize, textsize = GetTextSize();. Int_t automat = 0;. if (GetTextFont()%10 > 2) { // fixed size font specified in pixels. labelsize = GetTextSize();. } else {. if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;. if (textsize == 0) { textsize = 0.99; automat = 1;}. Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));. labelsize = textsize*ypixel/hh;. if (wh < hh) labelsize *= hh/wh;. }. ```. One can have. ```. Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());. Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());. .... ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```. // Compute new pad positions in the NDC space of parent. fXlowNDC = Double_t(apx1 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344
https://github.com/root-project/root/issues/6345:161,availability,error,errors,161,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:255,availability,error,error,255,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:446,availability,error,error,446,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:748,availability,error,error,748,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1044,availability,error,error,1044,"rofile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides suppor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1351,availability,error,error,1351," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1658,availability,error,error,1658," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:550,deployability,releas,releases,550,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:852,deployability,releas,releases,852,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1148,deployability,releas,releases,1148,"`. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked wi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1455,deployability,releas,releases,1455," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1756,deployability,releas,releases,1756," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1996,deployability,modul,module,1996," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:2052,deployability,fail,failed,2052," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:314,integrability,Buffer,BufferFill,314,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:410,integrability,Buffer,BufferFill,410,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:2294,integrability,Sub,Submitting,2294," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1996,modifiability,modul,module,1996," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:161,performance,error,errors,161,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:255,performance,error,error,255,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:446,performance,error,error,446,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:748,performance,error,error,748,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1044,performance,error,error,1044,"rofile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides suppor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1351,performance,error,error,1351," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1658,performance,error,error,1658," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:2052,reliability,fail,failed,2052," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:161,safety,error,errors,161,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:255,safety,error,error,255,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:446,safety,error,error,446,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:748,safety,error,error,748,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1044,safety,error,error,1044,"rofile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides suppor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1351,safety,error,error,1351," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1658,safety,error,error,1658," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1996,safety,modul,module,1996," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:15,testability,regress,regression,15,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1932,testability,Trace,Traceback,1932," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:161,usability,error,errors,161,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:255,usability,error,error,255,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:446,usability,error,error,446,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:748,usability,error,error,748,"6.22.00 pyroot regression: Can't derive from TProfile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1044,usability,error,error,1044,"rofile.; With root 6.22.00, the following fragment. ```. import ROOT. class Foo (ROOT.TProfile): pass. ```. gives errors:. ```. >>> import ROOT. >>> class Foo (ROOT.TProfile): pass. ... . input_line_38:8:19: error: redeclaration of using declaration. using TProfile::BufferFill;. ~~~~~~~~~~^. input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides suppor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1351,usability,error,error,1351," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:1658,usability,error,error,1658," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:2041,usability,support,supported,2041," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/issues/6345:2320,usability,document,document,2320," input_line_38:7:19: note: previous using declaration. using TProfile::BufferFill;. ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:67:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:69:9: note: declared private here. void SetBins(Int_t, const Double_t*, Int_t, const Double_t*). ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:71:9: note: declared private here. void SetBins(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, In... ^. input_line_38:9:19: error: 'SetBins' is a private member of 'TProfile'. using TProfile::SetBins;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:73:9: note: declared private here. void SetBins(Int_t, const Double_t *, Int_t, const Double_t *, Int_t... ^. input_line_38:10:19: error: 'Fill' is a private member of 'TProfile'. using TProfile::Fill;. ^. /cvmfs/sft.cern.ch/lcg/releases/ROOT/v6.22.00-be0a0/x86_64-centos7-gcc8-opt/include/TProfile.h:61:10: note: declared private here. Int_t Fill(Double_t) { MayNotUse(""Fill(Double_t)""); return -1;}. ^. Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: no python-side overrides supported (failed to compile the dispatcher code). ```. It works ok with either TH1F or TH2F. It also worked with root 6.20.06. This is low priority. It showed up in ATLAS code, but the code in question is long obsolete and probably. best just removed. Submitting it now just to document the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6345
https://github.com/root-project/root/pull/6346:17,deployability,version,version,17,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/pull/6346:43,deployability,releas,release,43,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/pull/6346:206,deployability,Releas,ReleaseNotes,206,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/pull/6346:228,deployability,patch,patch,228,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/pull/6346:17,integrability,version,version,17,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/pull/6346:132,integrability,interfac,interface,132,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/pull/6346:132,interoperability,interfac,interface,132,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/pull/6346:17,modifiability,version,version,17,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/pull/6346:132,modifiability,interfac,interface,132,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/pull/6346:228,safety,patch,patch,228,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/pull/6346:228,security,patch,patch,228,[clad] Bump clad version to v0.7.; The new release includes some improvements:. * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346
https://github.com/root-project/root/issues/6347:25,availability,error,error,25,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:127,availability,error,error,127,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:482,deployability,log,logic,482,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:844,deployability,contain,contains,844,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:385,energy efficiency,alloc,allocator,385,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:226,integrability,buffer,buffer,226,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:25,performance,error,error,25,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:127,performance,error,error,127,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:25,safety,error,error,25,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:127,safety,error,error,127,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:482,safety,log,logic,482,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:482,security,log,logic,482,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:482,testability,log,logic,482,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:25,usability,error,error,25,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/issues/6347:127,usability,error,error,127,"[ntuple] Off-by-one-byte error when deserializing arrays as RVecs; Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```. >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(). $983 = (int *) 0x5555581b2918. >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(). $984 = 0x5555581b2910. ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347
https://github.com/root-project/root/pull/6348:62,deployability,version,version,62,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:126,deployability,version,version,126,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:339,energy efficiency,load,load,339,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:425,energy efficiency,load,loading,425,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:62,integrability,version,version,62,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:126,integrability,version,version,126,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:528,integrability,Filter,Filters,528,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:62,modifiability,version,version,62,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:126,modifiability,version,version,126,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:339,performance,load,load,339,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:425,performance,load,loading,425,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:571,performance,perform,performed,571,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/pull/6348:571,usability,perform,performed,571,"[RNTupleDS] Use lazy RNTupleColumnReaders; This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load. values of all required columns when `RDataSource::SetEntry` is called, but. the loading can be delayed to the moment in which a value is actually. needed. In case of strict upstream `Filters`, this should result in. less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6348
https://github.com/root-project/root/issues/6350:993,deployability,automat,automatically,993,"When in-memory TTree are written, they are not compressed.; As reported in https://root-forum.cern.ch/t/ttree-compression-factor-1-00/31850, when in-memory TTree are written, they are not compressed. With:. ```. {. // create a new file. TFile *f_new = TFile::Open(""f_new.root"", ""recreate"", """", 101);. . #if 1 /* 0 or 1 */. gROOT->cd(); // switch to RAM. #else /* 0 or 1 */. // open some old file. TFile *f_old = TFile::Open(""f_old.root"");. // retrieve any objects. delete f_old;. #endif /* 0 or 1 */. . // Uncommenting the next line will lead to a compress TTree data. // f_new->cd(); . TTree *t = new TTree(""t"", ""t""); // create a new DISK RESIDENT tree. // Alternatively uncommenting the next line will lead to a compress TTree data. // t->SetDirectory(f_new);. // fill the tree. Float_t v; t->Branch(""v"", &v, ""v/F"");. for (Int_t i = 0; i < 999999; i++) { v = gRandom->Gaus(0., 1.); t->Fill(); }. . // save the tree to a file. f_new->cd(); // just a precaution. t->Write();. delete f_new; // automatically deletes ""t"", too. }. ```. the resulting file (`f_new.root`) contains an uncompressed TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6350
https://github.com/root-project/root/issues/6350:1067,deployability,contain,contains,1067,"When in-memory TTree are written, they are not compressed.; As reported in https://root-forum.cern.ch/t/ttree-compression-factor-1-00/31850, when in-memory TTree are written, they are not compressed. With:. ```. {. // create a new file. TFile *f_new = TFile::Open(""f_new.root"", ""recreate"", """", 101);. . #if 1 /* 0 or 1 */. gROOT->cd(); // switch to RAM. #else /* 0 or 1 */. // open some old file. TFile *f_old = TFile::Open(""f_old.root"");. // retrieve any objects. delete f_old;. #endif /* 0 or 1 */. . // Uncommenting the next line will lead to a compress TTree data. // f_new->cd(); . TTree *t = new TTree(""t"", ""t""); // create a new DISK RESIDENT tree. // Alternatively uncommenting the next line will lead to a compress TTree data. // t->SetDirectory(f_new);. // fill the tree. Float_t v; t->Branch(""v"", &v, ""v/F"");. for (Int_t i = 0; i < 999999; i++) { v = gRandom->Gaus(0., 1.); t->Fill(); }. . // save the tree to a file. f_new->cd(); // just a precaution. t->Write();. delete f_new; // automatically deletes ""t"", too. }. ```. the resulting file (`f_new.root`) contains an uncompressed TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6350
https://github.com/root-project/root/issues/6350:8,performance,memor,memory,8,"When in-memory TTree are written, they are not compressed.; As reported in https://root-forum.cern.ch/t/ttree-compression-factor-1-00/31850, when in-memory TTree are written, they are not compressed. With:. ```. {. // create a new file. TFile *f_new = TFile::Open(""f_new.root"", ""recreate"", """", 101);. . #if 1 /* 0 or 1 */. gROOT->cd(); // switch to RAM. #else /* 0 or 1 */. // open some old file. TFile *f_old = TFile::Open(""f_old.root"");. // retrieve any objects. delete f_old;. #endif /* 0 or 1 */. . // Uncommenting the next line will lead to a compress TTree data. // f_new->cd(); . TTree *t = new TTree(""t"", ""t""); // create a new DISK RESIDENT tree. // Alternatively uncommenting the next line will lead to a compress TTree data. // t->SetDirectory(f_new);. // fill the tree. Float_t v; t->Branch(""v"", &v, ""v/F"");. for (Int_t i = 0; i < 999999; i++) { v = gRandom->Gaus(0., 1.); t->Fill(); }. . // save the tree to a file. f_new->cd(); // just a precaution. t->Write();. delete f_new; // automatically deletes ""t"", too. }. ```. the resulting file (`f_new.root`) contains an uncompressed TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6350
https://github.com/root-project/root/issues/6350:149,performance,memor,memory,149,"When in-memory TTree are written, they are not compressed.; As reported in https://root-forum.cern.ch/t/ttree-compression-factor-1-00/31850, when in-memory TTree are written, they are not compressed. With:. ```. {. // create a new file. TFile *f_new = TFile::Open(""f_new.root"", ""recreate"", """", 101);. . #if 1 /* 0 or 1 */. gROOT->cd(); // switch to RAM. #else /* 0 or 1 */. // open some old file. TFile *f_old = TFile::Open(""f_old.root"");. // retrieve any objects. delete f_old;. #endif /* 0 or 1 */. . // Uncommenting the next line will lead to a compress TTree data. // f_new->cd(); . TTree *t = new TTree(""t"", ""t""); // create a new DISK RESIDENT tree. // Alternatively uncommenting the next line will lead to a compress TTree data. // t->SetDirectory(f_new);. // fill the tree. Float_t v; t->Branch(""v"", &v, ""v/F"");. for (Int_t i = 0; i < 999999; i++) { v = gRandom->Gaus(0., 1.); t->Fill(); }. . // save the tree to a file. f_new->cd(); // just a precaution. t->Write();. delete f_new; // automatically deletes ""t"", too. }. ```. the resulting file (`f_new.root`) contains an uncompressed TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6350
https://github.com/root-project/root/issues/6350:635,performance,DISK,DISK,635,"When in-memory TTree are written, they are not compressed.; As reported in https://root-forum.cern.ch/t/ttree-compression-factor-1-00/31850, when in-memory TTree are written, they are not compressed. With:. ```. {. // create a new file. TFile *f_new = TFile::Open(""f_new.root"", ""recreate"", """", 101);. . #if 1 /* 0 or 1 */. gROOT->cd(); // switch to RAM. #else /* 0 or 1 */. // open some old file. TFile *f_old = TFile::Open(""f_old.root"");. // retrieve any objects. delete f_old;. #endif /* 0 or 1 */. . // Uncommenting the next line will lead to a compress TTree data. // f_new->cd(); . TTree *t = new TTree(""t"", ""t""); // create a new DISK RESIDENT tree. // Alternatively uncommenting the next line will lead to a compress TTree data. // t->SetDirectory(f_new);. // fill the tree. Float_t v; t->Branch(""v"", &v, ""v/F"");. for (Int_t i = 0; i < 999999; i++) { v = gRandom->Gaus(0., 1.); t->Fill(); }. . // save the tree to a file. f_new->cd(); // just a precaution. t->Write();. delete f_new; // automatically deletes ""t"", too. }. ```. the resulting file (`f_new.root`) contains an uncompressed TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6350
https://github.com/root-project/root/issues/6350:993,testability,automat,automatically,993,"When in-memory TTree are written, they are not compressed.; As reported in https://root-forum.cern.ch/t/ttree-compression-factor-1-00/31850, when in-memory TTree are written, they are not compressed. With:. ```. {. // create a new file. TFile *f_new = TFile::Open(""f_new.root"", ""recreate"", """", 101);. . #if 1 /* 0 or 1 */. gROOT->cd(); // switch to RAM. #else /* 0 or 1 */. // open some old file. TFile *f_old = TFile::Open(""f_old.root"");. // retrieve any objects. delete f_old;. #endif /* 0 or 1 */. . // Uncommenting the next line will lead to a compress TTree data. // f_new->cd(); . TTree *t = new TTree(""t"", ""t""); // create a new DISK RESIDENT tree. // Alternatively uncommenting the next line will lead to a compress TTree data. // t->SetDirectory(f_new);. // fill the tree. Float_t v; t->Branch(""v"", &v, ""v/F"");. for (Int_t i = 0; i < 999999; i++) { v = gRandom->Gaus(0., 1.); t->Fill(); }. . // save the tree to a file. f_new->cd(); // just a precaution. t->Write();. delete f_new; // automatically deletes ""t"", too. }. ```. the resulting file (`f_new.root`) contains an uncompressed TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6350
https://github.com/root-project/root/issues/6350:8,usability,memor,memory,8,"When in-memory TTree are written, they are not compressed.; As reported in https://root-forum.cern.ch/t/ttree-compression-factor-1-00/31850, when in-memory TTree are written, they are not compressed. With:. ```. {. // create a new file. TFile *f_new = TFile::Open(""f_new.root"", ""recreate"", """", 101);. . #if 1 /* 0 or 1 */. gROOT->cd(); // switch to RAM. #else /* 0 or 1 */. // open some old file. TFile *f_old = TFile::Open(""f_old.root"");. // retrieve any objects. delete f_old;. #endif /* 0 or 1 */. . // Uncommenting the next line will lead to a compress TTree data. // f_new->cd(); . TTree *t = new TTree(""t"", ""t""); // create a new DISK RESIDENT tree. // Alternatively uncommenting the next line will lead to a compress TTree data. // t->SetDirectory(f_new);. // fill the tree. Float_t v; t->Branch(""v"", &v, ""v/F"");. for (Int_t i = 0; i < 999999; i++) { v = gRandom->Gaus(0., 1.); t->Fill(); }. . // save the tree to a file. f_new->cd(); // just a precaution. t->Write();. delete f_new; // automatically deletes ""t"", too. }. ```. the resulting file (`f_new.root`) contains an uncompressed TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6350
https://github.com/root-project/root/issues/6350:149,usability,memor,memory,149,"When in-memory TTree are written, they are not compressed.; As reported in https://root-forum.cern.ch/t/ttree-compression-factor-1-00/31850, when in-memory TTree are written, they are not compressed. With:. ```. {. // create a new file. TFile *f_new = TFile::Open(""f_new.root"", ""recreate"", """", 101);. . #if 1 /* 0 or 1 */. gROOT->cd(); // switch to RAM. #else /* 0 or 1 */. // open some old file. TFile *f_old = TFile::Open(""f_old.root"");. // retrieve any objects. delete f_old;. #endif /* 0 or 1 */. . // Uncommenting the next line will lead to a compress TTree data. // f_new->cd(); . TTree *t = new TTree(""t"", ""t""); // create a new DISK RESIDENT tree. // Alternatively uncommenting the next line will lead to a compress TTree data. // t->SetDirectory(f_new);. // fill the tree. Float_t v; t->Branch(""v"", &v, ""v/F"");. for (Int_t i = 0; i < 999999; i++) { v = gRandom->Gaus(0., 1.); t->Fill(); }. . // save the tree to a file. f_new->cd(); // just a precaution. t->Write();. delete f_new; // automatically deletes ""t"", too. }. ```. the resulting file (`f_new.root`) contains an uncompressed TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6350
https://github.com/root-project/root/pull/6351:230,interoperability,specif,specified,230,"Actually 'inherit' compression setting even if TTree is no attached.; When writing an in-memory TTree to a file without first attaching it, we still need to take cues from the file. for the compression setting if the user has not specified any. This fixes issue #6350. Fixes #6350",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6351
https://github.com/root-project/root/pull/6351:10,modifiability,inherit,inherit,10,"Actually 'inherit' compression setting even if TTree is no attached.; When writing an in-memory TTree to a file without first attaching it, we still need to take cues from the file. for the compression setting if the user has not specified any. This fixes issue #6350. Fixes #6350",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6351
https://github.com/root-project/root/pull/6351:89,performance,memor,memory,89,"Actually 'inherit' compression setting even if TTree is no attached.; When writing an in-memory TTree to a file without first attaching it, we still need to take cues from the file. for the compression setting if the user has not specified any. This fixes issue #6350. Fixes #6350",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6351
https://github.com/root-project/root/pull/6351:89,usability,memor,memory,89,"Actually 'inherit' compression setting even if TTree is no attached.; When writing an in-memory TTree to a file without first attaching it, we still need to take cues from the file. for the compression setting if the user has not specified any. This fixes issue #6350. Fixes #6350",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6351
https://github.com/root-project/root/pull/6351:217,usability,user,user,217,"Actually 'inherit' compression setting even if TTree is no attached.; When writing an in-memory TTree to a file without first attaching it, we still need to take cues from the file. for the compression setting if the user has not specified any. This fixes issue #6350. Fixes #6350",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6351
https://github.com/root-project/root/issues/6352:41,energy efficiency,Current,Currently,41,"[Hist] TGraph::Sort when already sorted; Currently, `TGraph::Sort` does not check if the data is already sorted (stored in bit `TGraph::kIsSortedX`). For the implemented quicksort, sorting already sorted data is the worst case performance scenario, so I believe a check would be helpful. Since the user can supply a custom `greaterfunc`, a check similar to https://github.com/root-project/root/blob/1dba738f4e5c472d7b6777da49e00ef041696dba/hist/hist/src/TGraph.cxx#L2394 might be appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6352
https://github.com/root-project/root/issues/6352:239,modifiability,scenario,scenario,239,"[Hist] TGraph::Sort when already sorted; Currently, `TGraph::Sort` does not check if the data is already sorted (stored in bit `TGraph::kIsSortedX`). For the implemented quicksort, sorting already sorted data is the worst case performance scenario, so I believe a check would be helpful. Since the user can supply a custom `greaterfunc`, a check similar to https://github.com/root-project/root/blob/1dba738f4e5c472d7b6777da49e00ef041696dba/hist/hist/src/TGraph.cxx#L2394 might be appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6352
https://github.com/root-project/root/issues/6352:227,performance,perform,performance,227,"[Hist] TGraph::Sort when already sorted; Currently, `TGraph::Sort` does not check if the data is already sorted (stored in bit `TGraph::kIsSortedX`). For the implemented quicksort, sorting already sorted data is the worst case performance scenario, so I believe a check would be helpful. Since the user can supply a custom `greaterfunc`, a check similar to https://github.com/root-project/root/blob/1dba738f4e5c472d7b6777da49e00ef041696dba/hist/hist/src/TGraph.cxx#L2394 might be appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6352
https://github.com/root-project/root/issues/6352:67,reliability,doe,does,67,"[Hist] TGraph::Sort when already sorted; Currently, `TGraph::Sort` does not check if the data is already sorted (stored in bit `TGraph::kIsSortedX`). For the implemented quicksort, sorting already sorted data is the worst case performance scenario, so I believe a check would be helpful. Since the user can supply a custom `greaterfunc`, a check similar to https://github.com/root-project/root/blob/1dba738f4e5c472d7b6777da49e00ef041696dba/hist/hist/src/TGraph.cxx#L2394 might be appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6352
https://github.com/root-project/root/issues/6352:227,usability,perform,performance,227,"[Hist] TGraph::Sort when already sorted; Currently, `TGraph::Sort` does not check if the data is already sorted (stored in bit `TGraph::kIsSortedX`). For the implemented quicksort, sorting already sorted data is the worst case performance scenario, so I believe a check would be helpful. Since the user can supply a custom `greaterfunc`, a check similar to https://github.com/root-project/root/blob/1dba738f4e5c472d7b6777da49e00ef041696dba/hist/hist/src/TGraph.cxx#L2394 might be appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6352
https://github.com/root-project/root/issues/6352:279,usability,help,helpful,279,"[Hist] TGraph::Sort when already sorted; Currently, `TGraph::Sort` does not check if the data is already sorted (stored in bit `TGraph::kIsSortedX`). For the implemented quicksort, sorting already sorted data is the worst case performance scenario, so I believe a check would be helpful. Since the user can supply a custom `greaterfunc`, a check similar to https://github.com/root-project/root/blob/1dba738f4e5c472d7b6777da49e00ef041696dba/hist/hist/src/TGraph.cxx#L2394 might be appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6352
https://github.com/root-project/root/issues/6352:298,usability,user,user,298,"[Hist] TGraph::Sort when already sorted; Currently, `TGraph::Sort` does not check if the data is already sorted (stored in bit `TGraph::kIsSortedX`). For the implemented quicksort, sorting already sorted data is the worst case performance scenario, so I believe a check would be helpful. Since the user can supply a custom `greaterfunc`, a check similar to https://github.com/root-project/root/blob/1dba738f4e5c472d7b6777da49e00ef041696dba/hist/hist/src/TGraph.cxx#L2394 might be appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6352
https://github.com/root-project/root/issues/6352:316,usability,custom,custom,316,"[Hist] TGraph::Sort when already sorted; Currently, `TGraph::Sort` does not check if the data is already sorted (stored in bit `TGraph::kIsSortedX`). For the implemented quicksort, sorting already sorted data is the worst case performance scenario, so I believe a check would be helpful. Since the user can supply a custom `greaterfunc`, a check similar to https://github.com/root-project/root/blob/1dba738f4e5c472d7b6777da49e00ef041696dba/hist/hist/src/TGraph.cxx#L2394 might be appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6352
https://github.com/root-project/root/pull/6354:87,availability,failur,failure,87,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:87,deployability,fail,failure,87,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:231,energy efficiency,core,coredump,231,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:54,performance,time,times,54,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:87,performance,failur,failure,87,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:170,performance,time,times,170,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:221,performance,time,time,221,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:87,reliability,fail,failure,87,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:38,safety,test,tests,38,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:138,safety,test,test,138,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:38,testability,test,tests,38,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:138,testability,test,test,138,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:61,usability,stop,stopping,61,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6354:180,usability,stop,stopped,180,"Add possibility to execute ROOT gtest tests number of times, stopping…; … at the first failure. It works like expected: example of broken test that should be repeated 10 times, it stopped after 1 attempt and rerun second time with coredump https://gist.github.com/oshadura/32ffe755e4f8602a9e6a136992202f50. The feature was requested here: https://github.com/root-project/root/pull/6354",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6354
https://github.com/root-project/root/pull/6355:397,deployability,automat,automatic,397,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/pull/6355:334,performance,content,contents,334,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/pull/6355:416,performance,content,contents,416,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/pull/6355:378,reliability,doe,doesn,378,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/pull/6355:318,testability,simpl,simple,318,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/pull/6355:397,testability,automat,automatic,397,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/pull/6355:24,usability,document,documentation,24,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/pull/6355:141,usability,document,documentation,141,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/pull/6355:318,usability,simpl,simple,318,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/pull/6355:386,usability,support,support,386,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/pull/6355:435,usability,document,documentation,435,"[Hist][Docs] Revise TH1 documentation.; After being notified that beginners were unable to label the axes of a. histogram, I revised the TH1 documentation a bit, such that the words. ""axis labels"" can now be found on the doxygen page. Some lvl4 headers were converted in lvl2, so there is a bit more. structure, and a simple table of contents was added. Unfortunately,. doxygen doesn't support an automatic table of contents in class. documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6355
https://github.com/root-project/root/issues/6356:235,availability,servic,services,235,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:326,availability,servic,services,326,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:35,deployability,version,versions,35,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:212,deployability,build,builds,212,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:235,deployability,servic,services,235,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:326,deployability,servic,services,326,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:814,deployability,build,build,814,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:879,deployability,instal,install,879,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:932,deployability,instal,install,932,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:967,deployability,build,build,967,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1177,deployability,version,version,1177,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1198,deployability,instal,installed,1198,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1703,energy efficiency,current,current,1703,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:35,integrability,version,versions,35,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:235,integrability,servic,services,235,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:326,integrability,servic,services,326,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1177,integrability,version,version,1177,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1488,integrability,filter,filters,1488,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1711,integrability,filter,filtering,1711,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:35,modifiability,version,versions,35,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:235,modifiability,servic,services,235,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:326,modifiability,servic,services,326,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:957,modifiability,pac,package,957,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1177,modifiability,version,version,1177,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:391,safety,test,testReport,391,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:493,safety,test,tests,493,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:768,safety,input,input,768,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1023,safety,test,tests,1023,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:391,testability,test,testReport,391,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:493,testability,test,tests,493,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1023,testability,test,tests,1023,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1054,testability,context,context,1054,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1083,testability,context,context,1083,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:101,usability,clear,clear,101,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:149,usability,behavi,behavior,149,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:623,usability,behavi,behavior,623,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:768,usability,input,input,768,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1289,usability,document,documents,1289,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/issues/6356:1632,usability,close,closed,1632,"[JupyROOT][roottest] New nbconvert versions break notebook comparisons; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context. <!--. Add any other context about the problem here. -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6356
https://github.com/root-project/root/pull/6358:19,deployability,Updat,Update,19,TTree users guide; Update the TTree user's as requested in: . https://sft.its.cern.ch/jira/browse/ROOT-10809,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6358
https://github.com/root-project/root/pull/6358:19,safety,Updat,Update,19,TTree users guide; Update the TTree user's as requested in: . https://sft.its.cern.ch/jira/browse/ROOT-10809,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6358
https://github.com/root-project/root/pull/6358:19,security,Updat,Update,19,TTree users guide; Update the TTree user's as requested in: . https://sft.its.cern.ch/jira/browse/ROOT-10809,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6358
https://github.com/root-project/root/pull/6358:6,usability,user,users,6,TTree users guide; Update the TTree user's as requested in: . https://sft.its.cern.ch/jira/browse/ROOT-10809,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6358
https://github.com/root-project/root/pull/6358:12,usability,guid,guide,12,TTree users guide; Update the TTree user's as requested in: . https://sft.its.cern.ch/jira/browse/ROOT-10809,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6358
https://github.com/root-project/root/pull/6358:36,usability,user,user,36,TTree users guide; Update the TTree user's as requested in: . https://sft.its.cern.ch/jira/browse/ROOT-10809,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6358
https://github.com/root-project/root/issues/6359:620,availability,error,error,620,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:19,deployability,build,build,19,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:281,deployability,fail,failed,281,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:400,deployability,fail,failing,400,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:666,deployability,build,build,666,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:928,deployability,fail,failed,928,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1100,deployability,build,build,1100,"ting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1194,deployability,stack,stack,1194,"::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1477,deployability,build,build,1477,"c8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1590,deployability,Stack,StackTrace,1590,"f behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1620,deployability,build,build,1620,"or and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1774,deployability,build,build,1774,"m::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1996,deployability,build,build,1996,"=================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:2191,deployability,build,build,2191,"stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:2329,deployability,build,build,2329,"libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:2461,deployability,build,build,2461,"t /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:2942,deployability,build,build,2942,"nHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:3192,deployability,build,build,3192,"d/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:3448,deployability,build,build,3448,"workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:3667,deployability,build,build,3667,"ibc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/H",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:3943,deployability,build,build,3943,"d/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4110,deployability,build,build,4110," const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4262,deployability,build,build,4262,"Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4461,deployability,build,build,4461,"OOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4635,deployability,build,build,4635,"st* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /work",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4778,deployability,build,build,4778,"3b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4931,deployability,build,build,4931,"orkspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5080,deployability,build,build,5080,"Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facd",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5231,deployability,Build,BuildScopeProxyDict,5231,"t() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5293,deployability,build,build,5293,"HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5460,deployability,build,build,5460,"ild/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #33 0x00007facdf4845e3 in PyObject_Call () from /cvmfs/sft-nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5644,deployability,build,build,5644,"ts/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #33 0x00007facdf4845e3 in PyObject_Call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #34 0x00007facdf52bead in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:324,energy efficiency,COOL,COOL,324,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1139,energy efficiency,core,core,1139,"_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixS",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1516,energy efficiency,core,core,1516,"0). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUni",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1659,energy efficiency,core,core,1659,"pace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:2230,energy efficiency,core,core,2230,"==================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:2368,energy efficiency,core,core,2368,"_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:2500,energy efficiency,core,core,2500,"src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llv",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4149,energy efficiency,core,core,4149,"ng::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-back",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4301,energy efficiency,core,core,4301,"7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/proj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4500,energy efficiency,core,core,4500,"m/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4674,energy efficiency,core,core,4674,"jects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4754,energy efficiency,Load,Load,4754,"h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4817,energy efficiency,core,core,4817,"ecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4970,energy efficiency,core,core,4970,"ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:449,interoperability,platform,platforms,449,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1813,interoperability,bind,bindings,1813,"nst From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:2035,interoperability,bind,bindings,2035," 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5119,interoperability,bind,bindings,5119,"s/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cv",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5332,interoperability,bind,bindings,5332,".h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5367,interoperability,Prox,ProxyWrappers,5367,"ngMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5499,interoperability,bind,bindings,5499,"e/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #33 0x00007facdf4845e3 in PyObject_Call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5534,interoperability,Prox,ProxyWrappers,5534,"76. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #33 0x00007facdf4845e3 in PyObject_Call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpyth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5683,interoperability,bind,bindings,5683,"g/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #33 0x00007facdf4845e3 in PyObject_Call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #34 0x00007facdf52bead in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-db",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1813,modifiability,bind,bindings,1813,"nst From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:2035,modifiability,bind,bindings,2035," 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5119,modifiability,bind,bindings,5119,"s/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cv",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5332,modifiability,bind,bindings,5332,".h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5499,modifiability,bind,bindings,5499,"e/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #33 0x00007facdf4845e3 in PyObject_Call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:5683,modifiability,bind,bindings,5683,"g/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1cc in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #30 0x00007facdf5342fb in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #31 0x00007facdf534aa2 in PyEval_EvalCodeEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #32 0x00007facdf4adf96 in function_call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #33 0x00007facdf4845e3 in PyObject_Call () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-dbg/bin/../lib/libpython2.7.so.1.0. #34 0x00007facdf52bead in PyEval_EvalFrameEx () from /cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/2.7.16-3adfa/x86_64-slc6-gcc8-db",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:620,performance,error,error,620,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4754,performance,Load,Load,4754,"h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f206 in Cppyy::GetNumMethods(unsigned long) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1323. #26 0x00007facdc8effb9 in CPyCppyy::BuildScopeProxyDict(unsigned long, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:166. #27 0x00007facdc8f2654 in CPyCppyy::CreateScopeProxy () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:673. #28 0x00007facdc8cbbe2 in CPyCppyy::meta_getattro(_object*, _object*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:323. #29 0x00007facdf52e1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:281,reliability,fail,failed,281,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:400,reliability,fail,failing,400,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:928,reliability,fail,failed,928,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:315,safety,test,tests,315,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:392,safety,test,test,392,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:462,safety,test,test,462,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:620,safety,error,error,620,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:2540,security,sign,signal,2540,"xx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:231,testability,Assert,Assertion,231,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:315,testability,test,tests,315,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:392,testability,test,test,392,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:462,testability,test,test,462,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:878,testability,Assert,Assertion,878,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:1200,testability,trace,trace,1200,"gDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:92,usability,Support,Support,92,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:597,usability,behavi,behaviour,597,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:620,usability,error,error,620,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:739,usability,Support,Support,739,"python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10). I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:. ```. python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed. *** Break *** abort. ===========================================================. There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6. #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6. #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120. #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411. #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182. #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:3015,usability,Support,Support,3015,"D/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195. #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644. #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Sup",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:3265,usability,Support,Support,3265,"0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407. #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:3521,usability,Support,Support,3521,".cxx:3620. #9 <signal handler called>. #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6. #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6. #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:3740,usability,Support,Support,3740,".so.6. #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6. #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/issues/6359:4016,usability,Support,Support,4016,"rt/Casting.h:106. #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133. #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124. #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:144. #18 0x00007facd7a73b0c in llvm::cast_retty<clang::UsingDecl, clang::Decl const*>::ret_type llvm::dyn_cast<clang::UsingDecl, clang::Decl const>(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:334. #19 0x00007facd7a73536 in TClingMemberIter::Advance() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.cxx:128. #20 0x00007facd7a780e9 in TClingMemberIter::Init() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMemberIter.h:152. #21 0x00007facd7a763a5 in TClingMethodInfo::TClingMethodInfo(cling::Interpreter*, TClingClassInfo*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TClingMethodInfo.cxx:276. #22 0x00007facd79333fe in TCling::MethodInfo_Factory(ClassInfo_t*) const () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:8863. #23 0x00007facdfe45a3a in TListOfFunctions::Load() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TListOfFunctions.cxx:390. #24 0x00007facdfe18843 in TClass::GetListOfMethods(bool) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/meta/src/TClass.cxx:3721. #25 0x00007facdc59f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6359
https://github.com/root-project/root/pull/6361:21,safety,Test,Test,21,[skip-ci][RNTupleDS] Test reading of RVecs; Blocked by #6347 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6361
https://github.com/root-project/root/pull/6361:21,testability,Test,Test,21,[skip-ci][RNTupleDS] Test reading of RVecs; Blocked by #6347 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6361
https://github.com/root-project/root/pull/6362:47,usability,behavi,behaviour,47,[RDF][Doc] Add print to df106; Streamlines the behaviour with respect to df105 and df107,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6362
https://github.com/root-project/root/issues/6363:910,deployability,build,build,910,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:989,energy efficiency,core,core,989,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:1011,energy efficiency,CPU,CPU,1011,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:392,performance,concurren,concurrency,392,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:975,performance,time,times,975,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:1011,performance,CPU,CPU,1011,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:30,reliability,doe,does,30,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:864,safety,input,input,864,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:106,usability,clear,clear,106,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:154,usability,behavi,behavior,154,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:468,usability,behavi,behavior,468,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:486,usability,clear,clear,486,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:719,usability,behavi,behavior,719,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/issues/6363:864,usability,input,input,864,"[IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Calling `tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);` followed by `ROOT::GetThreadPoolSize()` or `TThreadExecutor::GetPoolSize()` results in the incorrect number of threads reported (hardware concurrency rather than what was set via `tbb::global_control`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `ROOT::GetThreadPoolSize` should report the real TBB thread pool size or the real number of threads that ROOT will use. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. This code prints 8 two times on my 8-core workstation, but CPU usage is actually 300%, i.e. TBB's thread pool has size 3 but we ROOT reports 8. ```cpp. #include <ROOT/TThreadExecutor.hxx>. #include <tbb/global_control.h>. #include <tbb/task_scheduler_init.h>. #include <iostream>. #include <TROOT.h>. int main() {. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 3);. ROOT::EnableImplicitMT();. std::cout << ROOT::GetThreadPoolSize() << std::endl;. ROOT::TThreadExecutor pool;. std::cout << pool.GetPoolSize() << std::endl;. auto busyLoop = [](int x) { int i = 0; for (; i < 1000000000+x; ++i); return i; };. pool.Foreach(busyLoop, {1,2,3,4,5,6,7,8});. return 0;. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6363
https://github.com/root-project/root/pull/6364:64,integrability,messag,messages,64,[Doc] Fix makeimage.py script; See the discussion in the commit messages. This should fix #6360.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6364
https://github.com/root-project/root/pull/6364:64,interoperability,messag,messages,64,[Doc] Fix makeimage.py script; See the discussion in the commit messages. This should fix #6360.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6364
https://github.com/root-project/root/issues/6365:30,integrability,sub,subtraction,30,"[Hist] Wrong Statistics after subtraction of TProfile; . After subtracting TProfile objects using TProfile::Add(p1,p2,1,-1) the statistics in y (MeanY, StdDevY) are not correct. ResetStats() needs to be called . See https://root-forum.cern.ch/t/how-does-the-add-function-work/41448.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6365
https://github.com/root-project/root/issues/6365:63,integrability,sub,subtracting,63,"[Hist] Wrong Statistics after subtraction of TProfile; . After subtracting TProfile objects using TProfile::Add(p1,p2,1,-1) the statistics in y (MeanY, StdDevY) are not correct. ResetStats() needs to be called . See https://root-forum.cern.ch/t/how-does-the-add-function-work/41448.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6365
https://github.com/root-project/root/issues/6365:249,reliability,doe,does-the-add-function-work,249,"[Hist] Wrong Statistics after subtraction of TProfile; . After subtracting TProfile objects using TProfile::Add(p1,p2,1,-1) the statistics in y (MeanY, StdDevY) are not correct. ResetStats() needs to be called . See https://root-forum.cern.ch/t/how-does-the-add-function-work/41448.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6365
https://github.com/root-project/root/issues/6366:14,availability,error,error,14,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:50,availability,error,error,50,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:719,availability,error,error,719,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1015,availability,unavail,unavailable,1015,"n macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:8,deployability,build,build,8,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:44,deployability,build,build,44,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:73,deployability,Build,Building,73,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:111,deployability,fail,fails,111,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:193,deployability,updat,update,193,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:205,deployability,build,build,205,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:282,deployability,depend,dependencies,282,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:365,deployability,build,builds,365,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:403,deployability,configurat,configuration,403,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:500,deployability,build,build,500,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:544,deployability,log,log,544,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:610,deployability,log,log,610,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:617,deployability,build,build,617,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:623,deployability,log,log,623,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:679,deployability,build,build,679,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:685,deployability,log,log,685,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:709,deployability,build,build,709,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:715,deployability,log,log,715,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:994,deployability,Resourc,Resource,994,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1158,deployability,Build,Builds,1158," and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1283,deployability,instal,install,1283,"dencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuilti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1291,deployability,build,build,1291,", hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1301,deployability,build,build,1301,"e cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1817,deployability,Modul,Modules,1817," can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1870,deployability,Modul,Modules,1870,"ication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3069,deployability,Version,Versions,3069,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3159,deployability,Version,Versions,3159,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3252,deployability,Version,Versions,3252,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3862,deployability,instal,install,3862,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3902,deployability,log,log,3902,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3915,deployability,build,build,3915,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3944,deployability,build,build,3944,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3950,deployability,log,log,3950,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:223,energy efficiency,current,currently,223,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:994,energy efficiency,Resourc,Resource,994,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:282,integrability,depend,dependencies,282,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:312,integrability,configur,configure,312,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:403,integrability,configur,configuration,403,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:486,integrability,configur,configure,486,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:534,integrability,configur,configure,534,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:600,integrability,configur,configure,600,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:725,integrability,messag,messages,725,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3069,integrability,Version,Versions,3069,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3159,integrability,Version,Versions,3159,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3252,integrability,Version,Versions,3252,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3892,integrability,configur,configure,3892,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:725,interoperability,messag,messages,725,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:923,interoperability,share,shared,923,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1097,interoperability,share,shared,1097,"e on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/et",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1805,interoperability,share,share,1805,"oping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1858,interoperability,share,share,1858,"ok. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -D",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3630,interoperability,xml,xmllint,3630,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:125,modifiability,maintain,maintain,125,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:282,modifiability,depend,dependencies,282,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:312,modifiability,configur,configure,312,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:403,modifiability,configur,configuration,403,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:486,modifiability,configur,configure,486,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:534,modifiability,configur,configure,534,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:600,modifiability,configur,configure,600,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1817,modifiability,Modul,Modules,1817," can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1870,modifiability,Modul,Modules,1870,"ication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3069,modifiability,Version,Versions,3069,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3159,modifiability,Version,Versions,3159,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3252,modifiability,Version,Versions,3252,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3892,modifiability,configur,configure,3892,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:14,performance,error,error,14,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:50,performance,error,error,50,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:719,performance,error,error,719,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:994,performance,Resourc,Resource,994,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:111,reliability,fail,fails,111,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:14,safety,error,error,14,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:50,safety,error,error,50,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:125,safety,maintain,maintain,125,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:193,safety,updat,update,193,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:282,safety,depend,dependencies,282,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:544,safety,log,log,544,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:610,safety,log,log,610,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:623,safety,log,log,623,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:685,safety,log,log,685,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:715,safety,log,log,715,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:719,safety,error,error,719,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:994,safety,Resourc,Resource,994,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1817,safety,Modul,Modules,1817," can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1870,safety,Modul,Modules,1870,"ication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3902,safety,log,log,3902,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3950,safety,log,log,3950,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:193,security,updat,update,193,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:312,security,configur,configure,312,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:403,security,configur,configuration,403,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:486,security,configur,configure,486,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:534,security,configur,configure,534,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:544,security,log,log,544,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:600,security,configur,configure,600,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:610,security,log,log,610,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:623,security,log,log,623,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:685,security,log,log,685,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:715,security,log,log,715,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3892,security,configur,configure,3892,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3902,security,log,log,3902,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3950,security,log,log,3950,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:282,testability,depend,dependencies,282,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:544,testability,log,log,544,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:610,testability,log,log,610,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:623,testability,log,log,623,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:685,testability,log,log,685,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:715,testability,log,log,715,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:994,testability,Resourc,Resource,994,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3902,testability,log,log,3902,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3950,testability,log,log,3950,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3995,testability,context,context,3995,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:4024,testability,context,context,4024,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:14,usability,error,error,14,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:50,usability,error,error,50,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:322,usability,command,command,322,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:719,usability,error,error,719,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:748,usability,help,helpful,748,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:871,usability,indicat,indication,871,"6.22.02 build error on macOS 10.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1028,usability,Stop,Stop,1028,"0.15; 6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:1148,usability,behavi,behavior,1148,"MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is. ```. [ 74%] Linking CXX shared library ../lib/libCore.so. <snip>. make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop. make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so. ```. ## Expected behavior. Builds OK. ## To Reproduce. ```. git clone git@github.com:root-project/root.git. cd root. git checkout v6-22-02. cd .. mkdir install build. cd build. cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libexec/root6"" -DCMAKE_INSTALL_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3773,usability,Command,CommandLineTools,3773,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6366:3836,usability,User,Users,3836,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log. cmake --build . -- -j8 2>&1 | tee ../build.log. ```. ## Setup. <!--. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6366
https://github.com/root-project/root/issues/6368:14,availability,failur,failure,14,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:116,availability,error,error,116,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:811,availability,error,error,811,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:874,availability,Error,Error,874,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:931,availability,Error,Error,931,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:8,deployability,build,build,8,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:14,deployability,fail,failure,14,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:64,deployability,build,building,64,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:110,deployability,build,build,110,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:1020,deployability,build,build,1020,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
