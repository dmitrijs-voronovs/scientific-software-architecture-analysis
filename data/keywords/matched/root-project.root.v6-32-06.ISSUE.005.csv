id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/1151:1043,availability,error,error,1043,"dows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1137,availability,avail,available,1137,"ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [Tre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1205,availability,error,error,1205,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:2034,availability,error,error,2034,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:2128,availability,avail,available,2128,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:220,deployability,build,build,220,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1316,deployability,build,build,1316,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:33,performance,error,errors,33,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:77,performance,error,errors,77,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:109,performance,error,error,109,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:638,performance,memor,memory,638,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1043,performance,error,error,1043,"dows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1205,performance,error,error,1205,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1692,performance,memor,memory,1692,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:2034,performance,error,error,2034,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1137,reliability,availab,available,1137,"ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [Tre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:2128,reliability,availab,available,2128,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:33,safety,error,errors,33,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:77,safety,error,errors,77,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:109,safety,error,error,109,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1043,safety,error,error,1043,"dows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1137,safety,avail,available,1137,"ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [Tre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1205,safety,error,error,1205,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:2034,safety,error,error,2034,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:2128,safety,avail,available,2128,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1137,security,availab,available,1137,"ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [Tre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:2128,security,availab,available,2128,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:33,usability,error,errors,33,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:77,usability,error,errors,77,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:109,usability,error,error,109,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:205,usability,User,Users,205,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:575,usability,Visual,Visual,575,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:607,usability,Tool,Tools,607,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:638,usability,memor,memory,638,"Fix std::make_unique compilation errors on Windows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1043,usability,error,error,1043,"dows; This fixes the following errors:. ```. TRootDS.cxx(145): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1205,usability,error,error,1205,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1301,usability,User,Users,1301,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1629,usability,Visual,Visual,1629,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1661,usability,Tool,Tools,1661,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:1692,usability,memor,memory,1692,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1151:2034,usability,error,error,2034,"rloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TRootDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TRootDS,std::string_view&,std::string_view&,void>(std::string_view &,std::string_view &)'. with. [. _Ty=ROOT::Experimental::TDF::TRootDS. ]. TRootDS.cxx(145): note: while trying to match the argument list '(std::string_view, std::string_view)'. TRootDS.cxx(145): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. TTrivialDS.cxx. TTrivialDS.cxx(82): error C2668: 'std::make_unique': ambiguous call to overloaded function [TreePlayer.vcxproj]. C:\Users\bellenot\build\master-check\include\ROOT/RMakeUnique.hxx(26): note: could be 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503\include\memory(2436): note:. or 'std::unique_ptr<ROOT::Experimental::TDF::TTrivialDS,std::default_delete<_Ty>> std::make_unique<ROOT::Experimental::TDF::TTrivialDS,ULong64_t&,void>(ULong64_t &)'. with. [. _Ty=ROOT::Experimental::TDF::TTrivialDS. ]. TTrivialDS.cxx(82): note: while trying to match the argument list '(ULong64_t)'. TTrivialDS.cxx(82): error C2512: 'ROOT::Experimental::TDataFrame::TDataFrame': no appropriate default constructor available [TreePlayer.vcxproj]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1151
https://github.com/root-project/root/pull/1154:33,deployability,build,builds,33,[TDF] Remove warnings in nightly builds; not sure why they did not appear in the PR builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1154
https://github.com/root-project/root/pull/1154:84,deployability,build,builds,84,[TDF] Remove warnings in nightly builds; not sure why they did not appear in the PR builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1154
https://github.com/root-project/root/pull/1155:209,deployability,automat,automatic,209,XCode9 compatibility; New way of addressing compatibility with XCode9 while preserving auto-conversion from TString to std::string (at the expense on making the conversion from TString to std::string_view non-automatic).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:7,interoperability,compatib,compatibility,7,XCode9 compatibility; New way of addressing compatibility with XCode9 while preserving auto-conversion from TString to std::string (at the expense on making the conversion from TString to std::string_view non-automatic).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:44,interoperability,compatib,compatibility,44,XCode9 compatibility; New way of addressing compatibility with XCode9 while preserving auto-conversion from TString to std::string (at the expense on making the conversion from TString to std::string_view non-automatic).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:92,interoperability,convers,conversion,92,XCode9 compatibility; New way of addressing compatibility with XCode9 while preserving auto-conversion from TString to std::string (at the expense on making the conversion from TString to std::string_view non-automatic).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:161,interoperability,convers,conversion,161,XCode9 compatibility; New way of addressing compatibility with XCode9 while preserving auto-conversion from TString to std::string (at the expense on making the conversion from TString to std::string_view non-automatic).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:209,testability,automat,automatic,209,XCode9 compatibility; New way of addressing compatibility with XCode9 while preserving auto-conversion from TString to std::string (at the expense on making the conversion from TString to std::string_view non-automatic).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1157:171,modifiability,responsibil,responsibility,171,"[TDF] Remove template ctor; We were not as general as we wanted to be:. ```c++. auto f = {""f1.root"", ""f2.root""};. TDataFrame(""tree"", f);. ```. could not compile. Move the responsibility to convert collections of. filenames to vector<string> to users. @dpiparo do you agree with this change? (note that it breaks no tests)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1157
https://github.com/root-project/root/pull/1157:315,safety,test,tests,315,"[TDF] Remove template ctor; We were not as general as we wanted to be:. ```c++. auto f = {""f1.root"", ""f2.root""};. TDataFrame(""tree"", f);. ```. could not compile. Move the responsibility to convert collections of. filenames to vector<string> to users. @dpiparo do you agree with this change? (note that it breaks no tests)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1157
https://github.com/root-project/root/pull/1157:315,testability,test,tests,315,"[TDF] Remove template ctor; We were not as general as we wanted to be:. ```c++. auto f = {""f1.root"", ""f2.root""};. TDataFrame(""tree"", f);. ```. could not compile. Move the responsibility to convert collections of. filenames to vector<string> to users. @dpiparo do you agree with this change? (note that it breaks no tests)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1157
https://github.com/root-project/root/pull/1157:244,usability,user,users,244,"[TDF] Remove template ctor; We were not as general as we wanted to be:. ```c++. auto f = {""f1.root"", ""f2.root""};. TDataFrame(""tree"", f);. ```. could not compile. Move the responsibility to convert collections of. filenames to vector<string> to users. @dpiparo do you agree with this change? (note that it breaks no tests)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1157
https://github.com/root-project/root/pull/1158:172,deployability,log,logic,172,Fix a precision issue when TGraph2D was drawn with the option LINE.; This issue was reported here: https://sft.its.cern.ch/jira/browse/ROOT-9046. PaintLine as now the same logic as PaintPolyMarker to decide if a point. is in the range or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1158
https://github.com/root-project/root/pull/1158:40,energy efficiency,draw,drawn,40,Fix a precision issue when TGraph2D was drawn with the option LINE.; This issue was reported here: https://sft.its.cern.ch/jira/browse/ROOT-9046. PaintLine as now the same logic as PaintPolyMarker to decide if a point. is in the range or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1158
https://github.com/root-project/root/pull/1158:172,safety,log,logic,172,Fix a precision issue when TGraph2D was drawn with the option LINE.; This issue was reported here: https://sft.its.cern.ch/jira/browse/ROOT-9046. PaintLine as now the same logic as PaintPolyMarker to decide if a point. is in the range or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1158
https://github.com/root-project/root/pull/1158:172,security,log,logic,172,Fix a precision issue when TGraph2D was drawn with the option LINE.; This issue was reported here: https://sft.its.cern.ch/jira/browse/ROOT-9046. PaintLine as now the same logic as PaintPolyMarker to decide if a point. is in the range or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1158
https://github.com/root-project/root/pull/1158:172,testability,log,logic,172,Fix a precision issue when TGraph2D was drawn with the option LINE.; This issue was reported here: https://sft.its.cern.ch/jira/browse/ROOT-9046. PaintLine as now the same logic as PaintPolyMarker to decide if a point. is in the range or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1158
https://github.com/root-project/root/pull/1159:71,safety,test,test,71,[PyROOT] Convert python string to string_view also on XCode9; and unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1159
https://github.com/root-project/root/pull/1159:66,testability,unit,unit,66,[PyROOT] Convert python string to string_view also on XCode9; and unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1159
https://github.com/root-project/root/pull/1159:71,testability,test,test,71,[PyROOT] Convert python string to string_view also on XCode9; and unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1159
https://github.com/root-project/root/pull/1160:252,integrability,Configur,Configurable,252,"TDataFrame - CSV data source; This commit provides the implementation of a new data source for TDataFrame that is able to read CSV files. . Some of its features include:. - File content stored in memory. - Type inference (int, double, bool, string). - Configurable delimiter. - Quoted fields & quote escaping support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:252,modifiability,Configur,Configurable,252,"TDataFrame - CSV data source; This commit provides the implementation of a new data source for TDataFrame that is able to read CSV files. . Some of its features include:. - File content stored in memory. - Type inference (int, double, bool, string). - Configurable delimiter. - Quoted fields & quote escaping support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:178,performance,content,content,178,"TDataFrame - CSV data source; This commit provides the implementation of a new data source for TDataFrame that is able to read CSV files. . Some of its features include:. - File content stored in memory. - Type inference (int, double, bool, string). - Configurable delimiter. - Quoted fields & quote escaping support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:196,performance,memor,memory,196,"TDataFrame - CSV data source; This commit provides the implementation of a new data source for TDataFrame that is able to read CSV files. . Some of its features include:. - File content stored in memory. - Type inference (int, double, bool, string). - Configurable delimiter. - Quoted fields & quote escaping support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:252,security,Configur,Configurable,252,"TDataFrame - CSV data source; This commit provides the implementation of a new data source for TDataFrame that is able to read CSV files. . Some of its features include:. - File content stored in memory. - Type inference (int, double, bool, string). - Configurable delimiter. - Quoted fields & quote escaping support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:196,usability,memor,memory,196,"TDataFrame - CSV data source; This commit provides the implementation of a new data source for TDataFrame that is able to read CSV files. . Some of its features include:. - File content stored in memory. - Type inference (int, double, bool, string). - Configurable delimiter. - Quoted fields & quote escaping support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:309,usability,support,support,309,"TDataFrame - CSV data source; This commit provides the implementation of a new data source for TDataFrame that is able to read CSV files. . Some of its features include:. - File content stored in memory. - Type inference (int, double, bool, string). - Configurable delimiter. - Quoted fields & quote escaping support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1161:132,deployability,build,build,132,Add cling binary to the list of target; This PR fixes -Dclingtest=On to add target cling and check-cling to ROOT. This in turn will build the cling binary and run its test suite.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1161
https://github.com/root-project/root/pull/1161:167,safety,test,test,167,Add cling binary to the list of target; This PR fixes -Dclingtest=On to add target cling and check-cling to ROOT. This in turn will build the cling binary and run its test suite.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1161
https://github.com/root-project/root/pull/1161:167,testability,test,test,167,Add cling binary to the list of target; This PR fixes -Dclingtest=On to add target cling and check-cling to ROOT. This in turn will build the cling binary and run its test suite.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1161
https://github.com/root-project/root/pull/1162:40,reliability,doe,doesn,40,X11 line width = 0 ; X11 line width = 0 doesn't work on OpenSuSE Thumbleweed for non solid lines. Problem found by Sergey,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1163:55,deployability,build,build,55,Add missing header to MonaLisa interface; This fixes a build problem with macOS High Sierra and Xcode 9.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1163
https://github.com/root-project/root/pull/1163:31,integrability,interfac,interface,31,Add missing header to MonaLisa interface; This fixes a build problem with macOS High Sierra and Xcode 9.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1163
https://github.com/root-project/root/pull/1163:31,interoperability,interfac,interface,31,Add missing header to MonaLisa interface; This fixes a build problem with macOS High Sierra and Xcode 9.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1163
https://github.com/root-project/root/pull/1163:31,modifiability,interfac,interface,31,Add missing header to MonaLisa interface; This fixes a build problem with macOS High Sierra and Xcode 9.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1163
https://github.com/root-project/root/pull/1164:55,deployability,build,build,55,Add missing header to MonaLisa interface; This fixes a build problem with macOS High Sierra and Xcode 9. Same as #1163.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:31,integrability,interfac,interface,31,Add missing header to MonaLisa interface; This fixes a build problem with macOS High Sierra and Xcode 9. Same as #1163.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:31,interoperability,interfac,interface,31,Add missing header to MonaLisa interface; This fixes a build problem with macOS High Sierra and Xcode 9. Same as #1163.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:31,modifiability,interfac,interface,31,Add missing header to MonaLisa interface; This fixes a build problem with macOS High Sierra and Xcode 9. Same as #1163.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1165:71,interoperability,format,formatting,71,[TDF] Fix bug preventing double loop on a tdf based on real files; and formatting.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1165
https://github.com/root-project/root/pull/1165:14,safety,prevent,preventing,14,[TDF] Fix bug preventing double loop on a tdf based on real files; and formatting.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1165
https://github.com/root-project/root/pull/1165:14,security,preven,preventing,14,[TDF] Fix bug preventing double loop on a tdf based on real files; and formatting.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1165
https://github.com/root-project/root/pull/1166:94,testability,unit,units,94,"Make TGeo optional and ON by default; ROOT is like before, but more flexible (391 compilation units less).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1166
https://github.com/root-project/root/pull/1167:61,deployability,build,build,61,"An haircut for the default components built for ROOT; Do not build niche components by default, enable http server since it is used for json serialisation, notebooks and elsewhere.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:27,integrability,compon,components,27,"An haircut for the default components built for ROOT; Do not build niche components by default, enable http server since it is used for json serialisation, notebooks and elsewhere.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:73,integrability,compon,components,73,"An haircut for the default components built for ROOT; Do not build niche components by default, enable http server since it is used for json serialisation, notebooks and elsewhere.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:27,interoperability,compon,components,27,"An haircut for the default components built for ROOT; Do not build niche components by default, enable http server since it is used for json serialisation, notebooks and elsewhere.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:73,interoperability,compon,components,73,"An haircut for the default components built for ROOT; Do not build niche components by default, enable http server since it is used for json serialisation, notebooks and elsewhere.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:27,modifiability,compon,components,27,"An haircut for the default components built for ROOT; Do not build niche components by default, enable http server since it is used for json serialisation, notebooks and elsewhere.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:73,modifiability,compon,components,73,"An haircut for the default components built for ROOT; Do not build niche components by default, enable http server since it is used for json serialisation, notebooks and elsewhere.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1169:17,safety,test,test,17,Additional fixes/test following #1144;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1169
https://github.com/root-project/root/pull/1169:17,testability,test,test,17,Additional fixes/test following #1144;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1169
https://github.com/root-project/root/pull/1172:42,interoperability,standard,standard,42,Fix for ROOT-9055; Avoid searching in the standard system environment variables (i.e. PATH),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1172
https://github.com/root-project/root/pull/1172:51,modifiability,system environ,system environment,51,Fix for ROOT-9055; Avoid searching in the standard system environment variables (i.e. PATH),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1172
https://github.com/root-project/root/pull/1172:70,modifiability,variab,variables,70,Fix for ROOT-9055; Avoid searching in the standard system environment variables (i.e. PATH),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1172
https://github.com/root-project/root/pull/1172:19,safety,Avoid,Avoid,19,Fix for ROOT-9055; Avoid searching in the standard system environment variables (i.e. PATH),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1172
https://github.com/root-project/root/pull/1173:271,deployability,contain,contain,271,"[TDF] Fix ROOT-8979: write c-style arrays with Snapshot; The fix relies on:. - users only ever using `array_view<T>` in `Define`, `Filter` and TDF. actions to read c-style arrays from TTrees, and not for std::vector,. for example. - the fact that for TTree branches that contain c-style arrays one can. use the title of the input branch as the title of the output branch,. as is. The fix requires to `const_cast` away the constess of the pointer. returned by `array_view::data` to pass it to `TTree::Branch` as `void *`. Because of this last issue and because of the first point above,. in the future it might be better to not use `array_view` but our. own custom type `TDFArray` to let users signal c-style arrays. Or maybe `TTree::Branch` could be made to accept a `const void*`, I'm not sure about that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:131,integrability,Filter,Filter,131,"[TDF] Fix ROOT-8979: write c-style arrays with Snapshot; The fix relies on:. - users only ever using `array_view<T>` in `Define`, `Filter` and TDF. actions to read c-style arrays from TTrees, and not for std::vector,. for example. - the fact that for TTree branches that contain c-style arrays one can. use the title of the input branch as the title of the output branch,. as is. The fix requires to `const_cast` away the constess of the pointer. returned by `array_view::data` to pass it to `TTree::Branch` as `void *`. Because of this last issue and because of the first point above,. in the future it might be better to not use `array_view` but our. own custom type `TDFArray` to let users signal c-style arrays. Or maybe `TTree::Branch` could be made to accept a `const void*`, I'm not sure about that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:324,safety,input,input,324,"[TDF] Fix ROOT-8979: write c-style arrays with Snapshot; The fix relies on:. - users only ever using `array_view<T>` in `Define`, `Filter` and TDF. actions to read c-style arrays from TTrees, and not for std::vector,. for example. - the fact that for TTree branches that contain c-style arrays one can. use the title of the input branch as the title of the output branch,. as is. The fix requires to `const_cast` away the constess of the pointer. returned by `array_view::data` to pass it to `TTree::Branch` as `void *`. Because of this last issue and because of the first point above,. in the future it might be better to not use `array_view` but our. own custom type `TDFArray` to let users signal c-style arrays. Or maybe `TTree::Branch` could be made to accept a `const void*`, I'm not sure about that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:693,security,sign,signal,693,"[TDF] Fix ROOT-8979: write c-style arrays with Snapshot; The fix relies on:. - users only ever using `array_view<T>` in `Define`, `Filter` and TDF. actions to read c-style arrays from TTrees, and not for std::vector,. for example. - the fact that for TTree branches that contain c-style arrays one can. use the title of the input branch as the title of the output branch,. as is. The fix requires to `const_cast` away the constess of the pointer. returned by `array_view::data` to pass it to `TTree::Branch` as `void *`. Because of this last issue and because of the first point above,. in the future it might be better to not use `array_view` but our. own custom type `TDFArray` to let users signal c-style arrays. Or maybe `TTree::Branch` could be made to accept a `const void*`, I'm not sure about that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:79,usability,user,users,79,"[TDF] Fix ROOT-8979: write c-style arrays with Snapshot; The fix relies on:. - users only ever using `array_view<T>` in `Define`, `Filter` and TDF. actions to read c-style arrays from TTrees, and not for std::vector,. for example. - the fact that for TTree branches that contain c-style arrays one can. use the title of the input branch as the title of the output branch,. as is. The fix requires to `const_cast` away the constess of the pointer. returned by `array_view::data` to pass it to `TTree::Branch` as `void *`. Because of this last issue and because of the first point above,. in the future it might be better to not use `array_view` but our. own custom type `TDFArray` to let users signal c-style arrays. Or maybe `TTree::Branch` could be made to accept a `const void*`, I'm not sure about that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:324,usability,input,input,324,"[TDF] Fix ROOT-8979: write c-style arrays with Snapshot; The fix relies on:. - users only ever using `array_view<T>` in `Define`, `Filter` and TDF. actions to read c-style arrays from TTrees, and not for std::vector,. for example. - the fact that for TTree branches that contain c-style arrays one can. use the title of the input branch as the title of the output branch,. as is. The fix requires to `const_cast` away the constess of the pointer. returned by `array_view::data` to pass it to `TTree::Branch` as `void *`. Because of this last issue and because of the first point above,. in the future it might be better to not use `array_view` but our. own custom type `TDFArray` to let users signal c-style arrays. Or maybe `TTree::Branch` could be made to accept a `const void*`, I'm not sure about that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:657,usability,custom,custom,657,"[TDF] Fix ROOT-8979: write c-style arrays with Snapshot; The fix relies on:. - users only ever using `array_view<T>` in `Define`, `Filter` and TDF. actions to read c-style arrays from TTrees, and not for std::vector,. for example. - the fact that for TTree branches that contain c-style arrays one can. use the title of the input branch as the title of the output branch,. as is. The fix requires to `const_cast` away the constess of the pointer. returned by `array_view::data` to pass it to `TTree::Branch` as `void *`. Because of this last issue and because of the first point above,. in the future it might be better to not use `array_view` but our. own custom type `TDFArray` to let users signal c-style arrays. Or maybe `TTree::Branch` could be made to accept a `const void*`, I'm not sure about that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:687,usability,user,users,687,"[TDF] Fix ROOT-8979: write c-style arrays with Snapshot; The fix relies on:. - users only ever using `array_view<T>` in `Define`, `Filter` and TDF. actions to read c-style arrays from TTrees, and not for std::vector,. for example. - the fact that for TTree branches that contain c-style arrays one can. use the title of the input branch as the title of the output branch,. as is. The fix requires to `const_cast` away the constess of the pointer. returned by `array_view::data` to pass it to `TTree::Branch` as `void *`. Because of this last issue and because of the first point above,. in the future it might be better to not use `array_view` but our. own custom type `TDFArray` to let users signal c-style arrays. Or maybe `TTree::Branch` could be made to accept a `const void*`, I'm not sure about that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1174:56,deployability,Updat,Updated,56,[ROOT-8839] Disabling LLVM_ENABLE_ZLIB option for LLVM; Updated PR for https://github.com/root-project/root/pull/1149,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1174
https://github.com/root-project/root/pull/1174:56,safety,Updat,Updated,56,[ROOT-8839] Disabling LLVM_ENABLE_ZLIB option for LLVM; Updated PR for https://github.com/root-project/root/pull/1149,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1174
https://github.com/root-project/root/pull/1174:56,security,Updat,Updated,56,[ROOT-8839] Disabling LLVM_ENABLE_ZLIB option for LLVM; Updated PR for https://github.com/root-project/root/pull/1149,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1174
https://github.com/root-project/root/pull/1176:6,deployability,Updat,Update,6,[DOC] Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1176
https://github.com/root-project/root/pull/1176:13,deployability,releas,release,13,[DOC] Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1176
https://github.com/root-project/root/pull/1176:6,safety,Updat,Update,6,[DOC] Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1176
https://github.com/root-project/root/pull/1176:6,security,Updat,Update,6,[DOC] Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1176
https://github.com/root-project/root/pull/1177:643,availability,consist,consisting,643,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:164,deployability,API,API,164,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:239,deployability,API,API,239,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:247,deployability,releas,released,247,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:840,deployability,patch,patch,840,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1075,deployability,scale,scale,1075,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:690,energy efficiency,draw,draw,690,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1075,energy efficiency,scale,scale,1075,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1351,energy efficiency,Draw,Draw,1351,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:164,integrability,API,API,164,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:239,integrability,API,API,239,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:564,integrability,transform,transformation,564,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1012,integrability,transform,transformation,1012,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:164,interoperability,API,API,164,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:239,interoperability,API,API,239,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:564,interoperability,transform,transformation,564,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1012,interoperability,transform,transformation,1012,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1082,interoperability,coordinat,coordinates,1082,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:178,modifiability,scal,scaling-related,178,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:405,modifiability,scal,scaling,405,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:457,modifiability,scal,scaling,457,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:556,modifiability,scal,scaling,556,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1004,modifiability,scal,scaling,1004,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1075,modifiability,scal,scale,1075,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1075,performance,scale,scale,1075,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:794,reliability,doe,does,794,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:840,safety,patch,patch,840,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1054,safety,compl,complex,1054,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:171,security,access,access,171,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:840,security,patch,patch,840,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:1054,security,compl,complex,1054,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:483,testability,context,context,483,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:626,testability,simpl,simple,626,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:985,testability,simpl,simply,985,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:626,usability,simpl,simple,626,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:643,usability,consist,consisting,643,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:985,usability,simpl,simply,985,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1177:992,usability,cancel,cancel,992,"ROOT Cocoa: fix rendering into bitmaps on high-dpi display.; From Timur:. When TGQuartz was developed, retina macs did not exist yet and Cocoa. did not provide any API to access scaling-related information. After they have introduced this API and released retina MacBooks, our GUI. rendering was just fine and worked out of box, our 'pixmap-based' graphics. was fixed by multiplying pixmaps' geometry (by scaling factor) and also setting. the corresponding scaling CTM on the bitmap context. It appears, all these. years we did not know how expensive this scaling transformation is. As was noticed recently, even a relatively simple poly-line consisting. of 25K segments takes _forever_ to draw - apparently Quartz is working. hard doing hell knows what under the hood (disabling anti-aliasing does not change. anything, for example). This patch is a possible fix, the proper solution would require a serious redesign. in many places (starting from TVirtualX and TCanvas) - for now we simply cancel. the scaling transformation when rendering potentially complex geometry and scale. coordinates manually instead. A macro reproducing this problem on retina display would be:. {. int n = 5000;. double xx[n];. double yy[n];. TRandom r;. for (int i=0; i<n; i++) {. xx[i] = r.Gaus(-1,0.5);. yy[i] = r.Gaus(1,1.5);. }. TGraph *g = new TGraph(n, xx,yy);. g->Draw(""al"");. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1177
https://github.com/root-project/root/pull/1178:11,energy efficiency,draw,draw,11,V7 grouped draw opts;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1178
https://github.com/root-project/root/pull/1180:228,deployability,continu,continue,228,"Add Cancel function in TTaskGroup.; This PR is related to #1010 . I could be more efficient to cancel the tasks immediately than wait for unnecessary tasks to be finished. Especially when cache is invalid, unzipping task has to continue running return function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1180
https://github.com/root-project/root/pull/1180:188,performance,cach,cache,188,"Add Cancel function in TTaskGroup.; This PR is related to #1010 . I could be more efficient to cancel the tasks immediately than wait for unnecessary tasks to be finished. Especially when cache is invalid, unzipping task has to continue running return function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1180
https://github.com/root-project/root/pull/1180:4,usability,Cancel,Cancel,4,"Add Cancel function in TTaskGroup.; This PR is related to #1010 . I could be more efficient to cancel the tasks immediately than wait for unnecessary tasks to be finished. Especially when cache is invalid, unzipping task has to continue running return function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1180
https://github.com/root-project/root/pull/1180:82,usability,efficien,efficient,82,"Add Cancel function in TTaskGroup.; This PR is related to #1010 . I could be more efficient to cancel the tasks immediately than wait for unnecessary tasks to be finished. Especially when cache is invalid, unzipping task has to continue running return function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1180
https://github.com/root-project/root/pull/1180:95,usability,cancel,cancel,95,"Add Cancel function in TTaskGroup.; This PR is related to #1010 . I could be more efficient to cancel the tasks immediately than wait for unnecessary tasks to be finished. Especially when cache is invalid, unzipping task has to continue running return function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1180
https://github.com/root-project/root/pull/1183:117,deployability,build,builds,117,TEfficiency::SetUseWeightedEvents(): Do not assume Sumw2() was called…; … on histograms. In Debug and RelWithDebInfo builds (when assertions are active) the following. code caused an assertion to fire:. root [0] TEfficiency* eff = new TEfficiency;. root [1] eff->SetUseWeightedEvents();. Info in <TROOT::TEfficiency::SetUseWeightedEvents>: Histograms are filled with weights. root.exe: ../hist/hist/src/TEfficiency.cxx:3593: void TEfficiency::SetUseWeightedEvents(bool): Assertion `fTotalHistogram->GetSumw2N() > 0 && fPassedHistogram->GetSumw2N() > 0' failed. This fixes ROOT-9058.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1183:553,deployability,fail,failed,553,TEfficiency::SetUseWeightedEvents(): Do not assume Sumw2() was called…; … on histograms. In Debug and RelWithDebInfo builds (when assertions are active) the following. code caused an assertion to fire:. root [0] TEfficiency* eff = new TEfficiency;. root [1] eff->SetUseWeightedEvents();. Info in <TROOT::TEfficiency::SetUseWeightedEvents>: Histograms are filled with weights. root.exe: ../hist/hist/src/TEfficiency.cxx:3593: void TEfficiency::SetUseWeightedEvents(bool): Assertion `fTotalHistogram->GetSumw2N() > 0 && fPassedHistogram->GetSumw2N() > 0' failed. This fixes ROOT-9058.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1183:553,reliability,fail,failed,553,TEfficiency::SetUseWeightedEvents(): Do not assume Sumw2() was called…; … on histograms. In Debug and RelWithDebInfo builds (when assertions are active) the following. code caused an assertion to fire:. root [0] TEfficiency* eff = new TEfficiency;. root [1] eff->SetUseWeightedEvents();. Info in <TROOT::TEfficiency::SetUseWeightedEvents>: Histograms are filled with weights. root.exe: ../hist/hist/src/TEfficiency.cxx:3593: void TEfficiency::SetUseWeightedEvents(bool): Assertion `fTotalHistogram->GetSumw2N() > 0 && fPassedHistogram->GetSumw2N() > 0' failed. This fixes ROOT-9058.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1183:130,testability,assert,assertions,130,TEfficiency::SetUseWeightedEvents(): Do not assume Sumw2() was called…; … on histograms. In Debug and RelWithDebInfo builds (when assertions are active) the following. code caused an assertion to fire:. root [0] TEfficiency* eff = new TEfficiency;. root [1] eff->SetUseWeightedEvents();. Info in <TROOT::TEfficiency::SetUseWeightedEvents>: Histograms are filled with weights. root.exe: ../hist/hist/src/TEfficiency.cxx:3593: void TEfficiency::SetUseWeightedEvents(bool): Assertion `fTotalHistogram->GetSumw2N() > 0 && fPassedHistogram->GetSumw2N() > 0' failed. This fixes ROOT-9058.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1183:183,testability,assert,assertion,183,TEfficiency::SetUseWeightedEvents(): Do not assume Sumw2() was called…; … on histograms. In Debug and RelWithDebInfo builds (when assertions are active) the following. code caused an assertion to fire:. root [0] TEfficiency* eff = new TEfficiency;. root [1] eff->SetUseWeightedEvents();. Info in <TROOT::TEfficiency::SetUseWeightedEvents>: Histograms are filled with weights. root.exe: ../hist/hist/src/TEfficiency.cxx:3593: void TEfficiency::SetUseWeightedEvents(bool): Assertion `fTotalHistogram->GetSumw2N() > 0 && fPassedHistogram->GetSumw2N() > 0' failed. This fixes ROOT-9058.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1183:471,testability,Assert,Assertion,471,TEfficiency::SetUseWeightedEvents(): Do not assume Sumw2() was called…; … on histograms. In Debug and RelWithDebInfo builds (when assertions are active) the following. code caused an assertion to fire:. root [0] TEfficiency* eff = new TEfficiency;. root [1] eff->SetUseWeightedEvents();. Info in <TROOT::TEfficiency::SetUseWeightedEvents>: Histograms are filled with weights. root.exe: ../hist/hist/src/TEfficiency.cxx:3593: void TEfficiency::SetUseWeightedEvents(bool): Assertion `fTotalHistogram->GetSumw2N() > 0 && fPassedHistogram->GetSumw2N() > 0' failed. This fixes ROOT-9058.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1184:242,usability,behavi,behaviour,242,Add Geant4 formulas for calculation of RadLen and IntLen; This PR adds to TGeoElement the functions . - ComputeCoulombFactor. - GetfRadTsai. and to TGeoMaterial/Mixture. - ComputeRadiationLength. - ComputeNuclearInterLength. mimicking Geant4 behaviour. . The aim is that Geant4 and ROOT provide the same result for RadLen and IntLen which is not the case now.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1184
https://github.com/root-project/root/pull/1187:256,deployability,Log,Logical,256,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:378,deployability,Log,Logical,378,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:500,deployability,Log,Logical,500,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:622,deployability,Log,Logical,622,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:758,deployability,Log,Logical,758,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:894,deployability,Log,Logical,894,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:29,energy efficiency,core,core,29,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:256,safety,Log,Logical,256,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:378,safety,Log,Logical,378,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:500,safety,Log,Logical,500,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:622,safety,Log,Logical,622,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:758,safety,Log,Logical,758,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:894,safety,Log,Logical,894,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:256,security,Log,Logical,256,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:378,security,Log,Logical,378,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:500,security,Log,Logical,500,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:622,security,Log,Logical,622,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:758,security,Log,Logical,758,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:894,security,Log,Logical,894,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:256,testability,Log,Logical,256,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:378,testability,Log,Logical,378,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:500,testability,Log,Logical,500,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:622,testability,Log,Logical,622,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:758,testability,Log,Logical,758,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:894,testability,Log,Logical,894,cppcheck: fix some reports; [core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check. [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4. [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'. [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'. [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1188:19,availability,redund,redundant,19,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:19,deployability,redundan,redundant,19,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:29,deployability,depend,dependencies,29,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:225,deployability,patch,patch,225,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:239,deployability,build,build,239,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:281,deployability,build,building,281,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:351,deployability,build,build,351,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:8,energy efficiency,Reduc,Reduce,8,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:343,energy efficiency,core,core,343,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:418,energy efficiency,Core,Core,418,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:29,integrability,depend,dependencies,29,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:29,modifiability,depend,dependencies,29,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:252,performance,bottleneck,bottleneck,252,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:19,reliability,redundan,redundant,19,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:19,safety,redund,redundant,19,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:29,safety,depend,dependencies,29,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:225,safety,patch,patch,225,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:225,security,patch,patch,225,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:29,testability,depend,dependencies,29,"[cmake] Reduce the redundant dependencies to onepcm.; The generation of our PCH/PCM file requires only the header files to be in. place. There is no direct relationship between if the dictionaries will be. built or not. This patch fixes a build system bottleneck (esp visible when building in. -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another. advantage is that now we can just say make Core or make Cling and fire up ROOT. without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1189:88,safety,test,test,88,Fix ROOT-8839; Turns out that we forgot to link in ZLIB in libCore. @oshadura could you test? We should make sure the tests are running if we are in `-Dbuiltin_zlib=On/Off`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:118,safety,test,tests,118,Fix ROOT-8839; Turns out that we forgot to link in ZLIB in libCore. @oshadura could you test? We should make sure the tests are running if we are in `-Dbuiltin_zlib=On/Off`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:88,testability,test,test,88,Fix ROOT-8839; Turns out that we forgot to link in ZLIB in libCore. @oshadura could you test? We should make sure the tests are running if we are in `-Dbuiltin_zlib=On/Off`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:118,testability,test,tests,118,Fix ROOT-8839; Turns out that we forgot to link in ZLIB in libCore. @oshadura could you test? We should make sure the tests are running if we are in `-Dbuiltin_zlib=On/Off`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1191:0,deployability,Updat,Updated,0,"Updated the list of jsROOT Drawables for Jupyter.; Used the jsROOT examples page, https://root.cern/js/latest/examples.htm,. to determine if the drawables were supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:27,energy efficiency,Draw,Drawables,27,"Updated the list of jsROOT Drawables for Jupyter.; Used the jsROOT examples page, https://root.cern/js/latest/examples.htm,. to determine if the drawables were supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:145,energy efficiency,draw,drawables,145,"Updated the list of jsROOT Drawables for Jupyter.; Used the jsROOT examples page, https://root.cern/js/latest/examples.htm,. to determine if the drawables were supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:0,safety,Updat,Updated,0,"Updated the list of jsROOT Drawables for Jupyter.; Used the jsROOT examples page, https://root.cern/js/latest/examples.htm,. to determine if the drawables were supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:0,security,Updat,Updated,0,"Updated the list of jsROOT Drawables for Jupyter.; Used the jsROOT examples page, https://root.cern/js/latest/examples.htm,. to determine if the drawables were supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:160,usability,support,supported,160,"Updated the list of jsROOT Drawables for Jupyter.; Used the jsROOT examples page, https://root.cern/js/latest/examples.htm,. to determine if the drawables were supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1192:40,availability,Restor,Restore,40,In TClingCallFunc use new TMutex::Reset/Restore() to clear any and all locks active before entering user code.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1192
https://github.com/root-project/root/pull/1192:71,performance,lock,locks,71,In TClingCallFunc use new TMutex::Reset/Restore() to clear any and all locks active before entering user code.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1192
https://github.com/root-project/root/pull/1192:40,reliability,Restor,Restore,40,In TClingCallFunc use new TMutex::Reset/Restore() to clear any and all locks active before entering user code.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1192
https://github.com/root-project/root/pull/1192:71,security,lock,locks,71,In TClingCallFunc use new TMutex::Reset/Restore() to clear any and all locks active before entering user code.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1192
https://github.com/root-project/root/pull/1192:53,usability,clear,clear,53,In TClingCallFunc use new TMutex::Reset/Restore() to clear any and all locks active before entering user code.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1192
https://github.com/root-project/root/pull/1192:100,usability,user,user,100,In TClingCallFunc use new TMutex::Reset/Restore() to clear any and all locks active before entering user code.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1192
https://github.com/root-project/root/pull/1194:16,safety,test,test,16,[TDF] Fixes and test for callbacks;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1194
https://github.com/root-project/root/pull/1194:16,testability,test,test,16,[TDF] Fixes and test for callbacks;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1194
https://github.com/root-project/root/pull/1195:87,availability,sla,slashes,87,Fix several compiler warnings; Fix several compiler warnings and use proper (standard) slashes instead of dashes to specify compiler flags for the interpreter,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1195
https://github.com/root-project/root/pull/1195:77,interoperability,standard,standard,77,Fix several compiler warnings; Fix several compiler warnings and use proper (standard) slashes instead of dashes to specify compiler flags for the interpreter,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1195
https://github.com/root-project/root/pull/1195:116,interoperability,specif,specify,116,Fix several compiler warnings; Fix several compiler warnings and use proper (standard) slashes instead of dashes to specify compiler flags for the interpreter,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1195
https://github.com/root-project/root/pull/1195:87,reliability,sla,slashes,87,Fix several compiler warnings; Fix several compiler warnings and use proper (standard) slashes instead of dashes to specify compiler flags for the interpreter,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1195
https://github.com/root-project/root/pull/1196:125,availability,SLo,SLocEntry,125,"Partially revert ""Mark the file entry invalid, ...""; Partially revert ""Mark the file entry invalid, until reread. Invalidate SLocEntry cache, readd it on reread."". . That change does not make any sense. Kudos to my old self. . Resolves ROOT-8956.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1196
https://github.com/root-project/root/pull/1196:135,performance,cach,cache,135,"Partially revert ""Mark the file entry invalid, ...""; Partially revert ""Mark the file entry invalid, until reread. Invalidate SLocEntry cache, readd it on reread."". . That change does not make any sense. Kudos to my old self. . Resolves ROOT-8956.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1196
https://github.com/root-project/root/pull/1196:125,reliability,SLo,SLocEntry,125,"Partially revert ""Mark the file entry invalid, ...""; Partially revert ""Mark the file entry invalid, until reread. Invalidate SLocEntry cache, readd it on reread."". . That change does not make any sense. Kudos to my old self. . Resolves ROOT-8956.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1196
https://github.com/root-project/root/pull/1196:178,reliability,doe,does,178,"Partially revert ""Mark the file entry invalid, ...""; Partially revert ""Mark the file entry invalid, until reread. Invalidate SLocEntry cache, readd it on reread."". . That change does not make any sense. Kudos to my old self. . Resolves ROOT-8956.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1196
https://github.com/root-project/root/pull/1197:537,testability,plan,planned,537,"[TypeTraits] Make CallableTraits SFINAE-friendly; I thought it was already the case that we could use ROOT::TypeTraits::CallableTraits to do SFINAE but evidently I was wrong. This commit allows code like the following to compile correctly:. ```c++. template<typename F, typename R = typename CallableTraits<F>::ret_type>. constexpr bool HasRetType(F) { return true; }. constexpr bool HasRetType(...) { return false; }. static_assert(!HasRetType(int(42)));. static_assert(HasRetType([]() { return Dummy(); }));. ```. ...as was originally planned and requested by @Axel-Naumann .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1197
https://github.com/root-project/root/pull/1198:86,deployability,depend,dependency,86,Tree and TreePlayer no longer include TBB headers; With this only core/imt is missing dependency tracking (on MacOS). See https://sft.its.cern.ch/jira/browse/ROOT-9066,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1198
https://github.com/root-project/root/pull/1198:66,energy efficiency,core,core,66,Tree and TreePlayer no longer include TBB headers; With this only core/imt is missing dependency tracking (on MacOS). See https://sft.its.cern.ch/jira/browse/ROOT-9066,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1198
https://github.com/root-project/root/pull/1198:86,integrability,depend,dependency,86,Tree and TreePlayer no longer include TBB headers; With this only core/imt is missing dependency tracking (on MacOS). See https://sft.its.cern.ch/jira/browse/ROOT-9066,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1198
https://github.com/root-project/root/pull/1198:86,modifiability,depend,dependency,86,Tree and TreePlayer no longer include TBB headers; With this only core/imt is missing dependency tracking (on MacOS). See https://sft.its.cern.ch/jira/browse/ROOT-9066,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1198
https://github.com/root-project/root/pull/1198:86,safety,depend,dependency,86,Tree and TreePlayer no longer include TBB headers; With this only core/imt is missing dependency tracking (on MacOS). See https://sft.its.cern.ch/jira/browse/ROOT-9066,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1198
https://github.com/root-project/root/pull/1198:86,testability,depend,dependency,86,Tree and TreePlayer no longer include TBB headers; With this only core/imt is missing dependency tracking (on MacOS). See https://sft.its.cern.ch/jira/browse/ROOT-9066,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1198
https://github.com/root-project/root/pull/1200:139,deployability,contain,container,139,"[TDF] Return real column type from Min/Max when passed as template param; Otherwise we return a double as before. In case of a column of a container type, we return the real value_type when the container type is passed as parameter, otherwise we return double.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1200
https://github.com/root-project/root/pull/1200:194,deployability,contain,container,194,"[TDF] Return real column type from Min/Max when passed as template param; Otherwise we return a double as before. In case of a column of a container type, we return the real value_type when the container type is passed as parameter, otherwise we return double.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1200
https://github.com/root-project/root/pull/1200:222,modifiability,paramet,parameter,222,"[TDF] Return real column type from Min/Max when passed as template param; Otherwise we return a double as before. In case of a column of a container type, we return the real value_type when the container type is passed as parameter, otherwise we return double.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1200
https://github.com/root-project/root/pull/1201:149,modifiability,variab,variable,149,"Fix some more warnings on Windows; Fix mostly warning C4138: '*/' found outside of comment, but also:. warning C4101: 'hProcess': unreferenced local variable. warning C4005: 'open': macro redefinition. warning C4002: too many actual parameters for macro 'open'. warning C4091: 'static ': ignored on left of '' when no variable is declared",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1201
https://github.com/root-project/root/pull/1201:233,modifiability,paramet,parameters,233,"Fix some more warnings on Windows; Fix mostly warning C4138: '*/' found outside of comment, but also:. warning C4101: 'hProcess': unreferenced local variable. warning C4005: 'open': macro redefinition. warning C4002: too many actual parameters for macro 'open'. warning C4091: 'static ': ignored on left of '' when no variable is declared",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1201
https://github.com/root-project/root/pull/1201:318,modifiability,variab,variable,318,"Fix some more warnings on Windows; Fix mostly warning C4138: '*/' found outside of comment, but also:. warning C4101: 'hProcess': unreferenced local variable. warning C4005: 'open': macro redefinition. warning C4002: too many actual parameters for macro 'open'. warning C4091: 'static ': ignored on left of '' when no variable is declared",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1201
https://github.com/root-project/root/pull/1202:214,energy efficiency,optim,optimize,214,"Initialize bits local variable.; This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1202
https://github.com/root-project/root/pull/1202:114,interoperability,platform,platforms,114,"Initialize bits local variable.; This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1202
https://github.com/root-project/root/pull/1202:197,interoperability,platform,platforms,197,"Initialize bits local variable.; This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1202
https://github.com/root-project/root/pull/1202:22,modifiability,variab,variable,22,"Initialize bits local variable.; This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1202
https://github.com/root-project/root/pull/1202:167,modifiability,variab,variable,167,"Initialize bits local variable.; This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1202
https://github.com/root-project/root/pull/1202:214,performance,optimiz,optimize,214,"Initialize bits local variable.; This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1202
https://github.com/root-project/root/pull/1202:80,safety,avoid,avoids,80,"Initialize bits local variable.; This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1202
https://github.com/root-project/root/pull/1203:30,availability,error,error,30,Fix (hopefully) a compilation error of TCsvDS.cxx on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:30,performance,error,error,30,Fix (hopefully) a compilation error of TCsvDS.cxx on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:30,safety,error,error,30,Fix (hopefully) a compilation error of TCsvDS.cxx on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:30,usability,error,error,30,Fix (hopefully) a compilation error of TCsvDS.cxx on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1204:349,deployability,version,version,349,"Minor modernizations of the TFileMerger.; - Do static initialization in the header where possible. - Remove unnecessary pointers to `TList` in the `TFileMerger` when the `TList` is owned by the `TFileMerger`, always created, and has the same lifetime. Avoids unnecessary heap allocations. - As the data members have changed, increase the `ClassDef` version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1204
https://github.com/root-project/root/pull/1204:276,energy efficiency,alloc,allocations,276,"Minor modernizations of the TFileMerger.; - Do static initialization in the header where possible. - Remove unnecessary pointers to `TList` in the `TFileMerger` when the `TList` is owned by the `TFileMerger`, always created, and has the same lifetime. Avoids unnecessary heap allocations. - As the data members have changed, increase the `ClassDef` version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1204
https://github.com/root-project/root/pull/1204:349,integrability,version,version,349,"Minor modernizations of the TFileMerger.; - Do static initialization in the header where possible. - Remove unnecessary pointers to `TList` in the `TFileMerger` when the `TList` is owned by the `TFileMerger`, always created, and has the same lifetime. Avoids unnecessary heap allocations. - As the data members have changed, increase the `ClassDef` version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1204
https://github.com/root-project/root/pull/1204:349,modifiability,version,version,349,"Minor modernizations of the TFileMerger.; - Do static initialization in the header where possible. - Remove unnecessary pointers to `TList` in the `TFileMerger` when the `TList` is owned by the `TFileMerger`, always created, and has the same lifetime. Avoids unnecessary heap allocations. - As the data members have changed, increase the `ClassDef` version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1204
https://github.com/root-project/root/pull/1204:252,safety,Avoid,Avoids,252,"Minor modernizations of the TFileMerger.; - Do static initialization in the header where possible. - Remove unnecessary pointers to `TList` in the `TFileMerger` when the `TList` is owned by the `TFileMerger`, always created, and has the same lifetime. Avoids unnecessary heap allocations. - As the data members have changed, increase the `ClassDef` version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1204
https://github.com/root-project/root/pull/1205:54,availability,slo,slots,54,[TDF] Do not expect to always run `DefineSlot` on all slots; This assumption was causing rare breakages in test/datasource_root.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1205
https://github.com/root-project/root/pull/1205:54,reliability,slo,slots,54,[TDF] Do not expect to always run `DefineSlot` on all slots; This assumption was causing rare breakages in test/datasource_root.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1205
https://github.com/root-project/root/pull/1205:107,safety,test,test,107,[TDF] Do not expect to always run `DefineSlot` on all slots; This assumption was causing rare breakages in test/datasource_root.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1205
https://github.com/root-project/root/pull/1205:107,testability,test,test,107,[TDF] Do not expect to always run `DefineSlot` on all slots; This assumption was causing rare breakages in test/datasource_root.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1205
https://github.com/root-project/root/pull/1206:64,deployability,fail,failing,64,[TDF] static_assert that the `Define` callables do not ; Better failing with a static_assert than letting compilation explode in the face of TDF users.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1206
https://github.com/root-project/root/pull/1206:64,reliability,fail,failing,64,[TDF] static_assert that the `Define` callables do not ; Better failing with a static_assert than letting compilation explode in the face of TDF users.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1206
https://github.com/root-project/root/pull/1206:145,usability,user,users,145,[TDF] static_assert that the `Define` callables do not ; Better failing with a static_assert than letting compilation explode in the face of TDF users.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1206
https://github.com/root-project/root/pull/1207:258,availability,error,error,258,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:319,availability,error,error,319,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:143,energy efficiency,energ,energy,143,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:95,integrability,pub,public,95,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:114,integrability,pub,public,114,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:362,modifiability,paramet,parameter,362,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:258,performance,error,error,258,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:319,performance,error,error,319,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:258,safety,error,error,258,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:319,safety,error,error,319,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:404,testability,context,context,404,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:6,usability,support,support,6,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:258,usability,error,error,258,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1207:319,usability,error,error,319,"Readd support in ClassDef for classes with same name as data member.; For example:. class Rho: public TObject. {. public:. Float_t Rho; // rho energy density. Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1). };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name. So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1207
https://github.com/root-project/root/pull/1208:218,availability,down,downsides,218,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:339,deployability,Patch,Patch,339,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:41,energy efficiency,current,currently,41,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:187,interoperability,architectur,architectures,187,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:309,modifiability,variab,variables,309,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:206,performance,perform,performance,206,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:339,safety,Patch,Patch,339,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:339,security,Patch,Patch,339,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:110,testability,emul,emulated,110,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:123,usability,support,support,123,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:163,usability,support,support,163,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:206,usability,perform,performance,206,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:367,usability,help,help,367,"[cling] Fix TLS in the cling JIT; TLS is currently not suppored in the JIT. However, it's possible to. enable emulated TLS support in LLVM which means that we now support. TLS across all architectures. The performance downsides of this. should be neglectiable and can be easily worked around (by merging. TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1209:89,interoperability,platform,platforms,89,Fix compiler warnings and simplify function; Fix some minor compiler warnings on various platforms. Simplify the `TIOFeatures::Set` implementation as suggested by @pcanal . I do not believe any of these indicate real bugs. Just some code cleanliness.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1209
https://github.com/root-project/root/pull/1209:26,testability,simpl,simplify,26,Fix compiler warnings and simplify function; Fix some minor compiler warnings on various platforms. Simplify the `TIOFeatures::Set` implementation as suggested by @pcanal . I do not believe any of these indicate real bugs. Just some code cleanliness.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1209
https://github.com/root-project/root/pull/1209:100,testability,Simpl,Simplify,100,Fix compiler warnings and simplify function; Fix some minor compiler warnings on various platforms. Simplify the `TIOFeatures::Set` implementation as suggested by @pcanal . I do not believe any of these indicate real bugs. Just some code cleanliness.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1209
https://github.com/root-project/root/pull/1209:26,usability,simpl,simplify,26,Fix compiler warnings and simplify function; Fix some minor compiler warnings on various platforms. Simplify the `TIOFeatures::Set` implementation as suggested by @pcanal . I do not believe any of these indicate real bugs. Just some code cleanliness.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1209
https://github.com/root-project/root/pull/1209:100,usability,Simpl,Simplify,100,Fix compiler warnings and simplify function; Fix some minor compiler warnings on various platforms. Simplify the `TIOFeatures::Set` implementation as suggested by @pcanal . I do not believe any of these indicate real bugs. Just some code cleanliness.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1209
https://github.com/root-project/root/pull/1209:203,usability,indicat,indicate,203,Fix compiler warnings and simplify function; Fix some minor compiler warnings on various platforms. Simplify the `TIOFeatures::Set` implementation as suggested by @pcanal . I do not believe any of these indicate real bugs. Just some code cleanliness.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1209
https://github.com/root-project/root/pull/1210:53,deployability,version,version,53,Simplify the test for std::make_unique; The required version of Visual Studio already support make_unique. Thanks Enrico Guiraud for the suggestion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1210
https://github.com/root-project/root/pull/1210:53,integrability,version,version,53,Simplify the test for std::make_unique; The required version of Visual Studio already support make_unique. Thanks Enrico Guiraud for the suggestion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1210
https://github.com/root-project/root/pull/1210:53,modifiability,version,version,53,Simplify the test for std::make_unique; The required version of Visual Studio already support make_unique. Thanks Enrico Guiraud for the suggestion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1210
https://github.com/root-project/root/pull/1210:13,safety,test,test,13,Simplify the test for std::make_unique; The required version of Visual Studio already support make_unique. Thanks Enrico Guiraud for the suggestion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1210
https://github.com/root-project/root/pull/1210:0,testability,Simpl,Simplify,0,Simplify the test for std::make_unique; The required version of Visual Studio already support make_unique. Thanks Enrico Guiraud for the suggestion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1210
https://github.com/root-project/root/pull/1210:13,testability,test,test,13,Simplify the test for std::make_unique; The required version of Visual Studio already support make_unique. Thanks Enrico Guiraud for the suggestion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1210
https://github.com/root-project/root/pull/1210:0,usability,Simpl,Simplify,0,Simplify the test for std::make_unique; The required version of Visual Studio already support make_unique. Thanks Enrico Guiraud for the suggestion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1210
https://github.com/root-project/root/pull/1210:64,usability,Visual,Visual,64,Simplify the test for std::make_unique; The required version of Visual Studio already support make_unique. Thanks Enrico Guiraud for the suggestion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1210
https://github.com/root-project/root/pull/1210:86,usability,support,support,86,Simplify the test for std::make_unique; The required version of Visual Studio already support make_unique. Thanks Enrico Guiraud for the suggestion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1210
https://github.com/root-project/root/pull/1211:67,energy efficiency,optim,optimizes,67,Switch back to O0.; We have a suboptimal behavior in the way cling optimizes code in O2 mode. Disable it until the issue is understood and fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:30,integrability,sub,suboptimal,30,Switch back to O0.; We have a suboptimal behavior in the way cling optimizes code in O2 mode. Disable it until the issue is understood and fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:67,performance,optimiz,optimizes,67,Switch back to O0.; We have a suboptimal behavior in the way cling optimizes code in O2 mode. Disable it until the issue is understood and fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:41,usability,behavi,behavior,41,Switch back to O0.; We have a suboptimal behavior in the way cling optimizes code in O2 mode. Disable it until the issue is understood and fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1212:89,reliability,doe,does,89,Fix \cond without \endcond warnings; This change fixes the. warning: Conditional section does not have a corresponding \endcond command within this file. warnings that appear during doxygen generation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1212
https://github.com/root-project/root/pull/1212:128,usability,command,command,128,Fix \cond without \endcond warnings; This change fixes the. warning: Conditional section does not have a corresponding \endcond command within this file. warnings that appear during doxygen generation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1212
https://github.com/root-project/root/pull/1216:270,availability,error,error,270,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:234,integrability,interfac,interface,234,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:234,interoperability,interfac,interface,234,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:193,modifiability,refact,refactoring,193,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:234,modifiability,interfac,interface,234,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:193,performance,refactor,refactoring,193,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:270,performance,error,error,270,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:270,safety,error,error,270,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:186,testability,simpl,simple,186,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:186,usability,simpl,simple,186,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:229,usability,user,user,229,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1216:270,usability,error,error,270,"[TDF] Add `DefineSlotEntry`; The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1217:137,security,access,access,137,"Add support for experimental IO features in hadd; This PR adds a support for passing along the IO feature flags in the merger and allows access from the command-line for `hadd`. Additionally, makes the `TIOFeatures` a serialized member of `TTree` and `TBranch`, allowing them to behave as expected when cloned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:153,security,command-lin,command-line,153,"Add support for experimental IO features in hadd; This PR adds a support for passing along the IO feature flags in the merger and allows access from the command-line for `hadd`. Additionally, makes the `TIOFeatures` a serialized member of `TTree` and `TBranch`, allowing them to behave as expected when cloned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:4,usability,support,support,4,"Add support for experimental IO features in hadd; This PR adds a support for passing along the IO feature flags in the merger and allows access from the command-line for `hadd`. Additionally, makes the `TIOFeatures` a serialized member of `TTree` and `TBranch`, allowing them to behave as expected when cloned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:65,usability,support,support,65,"Add support for experimental IO features in hadd; This PR adds a support for passing along the IO feature flags in the merger and allows access from the command-line for `hadd`. Additionally, makes the `TIOFeatures` a serialized member of `TTree` and `TBranch`, allowing them to behave as expected when cloned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:153,usability,command,command-line,153,"Add support for experimental IO features in hadd; This PR adds a support for passing along the IO feature flags in the merger and allows access from the command-line for `hadd`. Additionally, makes the `TIOFeatures` a serialized member of `TTree` and `TBranch`, allowing them to behave as expected when cloned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1218:537,availability,failur,failures,537,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:727,availability,failur,failures,727,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:0,deployability,Updat,Update,0,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:15,deployability,releas,release,15,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:81,deployability,releas,release,81,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:90,deployability,Updat,Updating,90,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:200,deployability,releas,release,200,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:264,deployability,updat,update,264,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:315,deployability,patch,patches,315,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:439,deployability,patch,patches,439,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:537,deployability,fail,failures,537,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:581,deployability,build,building,581,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:644,deployability,stack,stack-corruption,644,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:727,deployability,fail,failures,727,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:423,energy efficiency,reduc,reduced,423,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:306,interoperability,specif,specific,306,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:537,performance,failur,failures,537,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:727,performance,failur,failures,727,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:279,reliability,pra,practically,279,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:537,reliability,fail,failures,537,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:727,reliability,fail,failures,727,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:0,safety,Updat,Update,0,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:90,safety,Updat,Updating,90,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:233,safety,test,tested,233,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:264,safety,updat,update,264,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:315,safety,patch,patches,315,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:439,safety,patch,patches,439,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:557,safety,test,testsuite,557,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:698,safety,except,exception,698,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:0,security,Updat,Update,0,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:90,security,Updat,Updating,90,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:264,security,updat,update,264,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:315,security,patch,patches,315,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:439,security,patch,patches,439,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:233,testability,test,tested,233,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:557,testability,test,testsuite,557,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1218:122,usability,support,support,122,"Update llvm to release 5.0; This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):. * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;. * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1219:1125,availability,operat,operations,1125,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:1267,availability,operat,operations,1267,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:12,deployability,upgrad,upgrade,12,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:589,energy efficiency,current,current,589,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:1206,energy efficiency,current,currently,1206,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:421,integrability,batch,batch,421,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:573,integrability,event,event-loop,573,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:799,integrability,event,event-loops,799,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:879,integrability,event,event-loop,879,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:1086,integrability,event,event-loop,1086,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:12,modifiability,upgrad,upgrade,12,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:421,performance,batch,batch,421,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:667,performance,time,time,667,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:1244,performance,perform,perform,1244,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:550,security,sign,signals,550,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:625,security,modif,modification,625,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:1244,usability,perform,perform,1244,"TDataSource upgrade; It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations. I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1220:92,deployability,build,build,92,"Xcode/clang 9.0 fixes for ROOT::TFile; Added some simple fixes to `ROOT::TFile`, to make it build with Xcode/Clang 9.0 on macOS High Sierra in C++14 mode. This is to fix the build problem described in https://sft.its.cern.ch/jira/browse/ROOT-9072. (I just thought that I might as well propose a fix, since I fixed it for my local installation anyway.). I imagine that cherry-picking the fix into the master branch would not be up to me anymore... (Should've read the contribution guidelines... 😛)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1220
https://github.com/root-project/root/pull/1220:174,deployability,build,build,174,"Xcode/clang 9.0 fixes for ROOT::TFile; Added some simple fixes to `ROOT::TFile`, to make it build with Xcode/Clang 9.0 on macOS High Sierra in C++14 mode. This is to fix the build problem described in https://sft.its.cern.ch/jira/browse/ROOT-9072. (I just thought that I might as well propose a fix, since I fixed it for my local installation anyway.). I imagine that cherry-picking the fix into the master branch would not be up to me anymore... (Should've read the contribution guidelines... 😛)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1220
https://github.com/root-project/root/pull/1220:330,deployability,instal,installation,330,"Xcode/clang 9.0 fixes for ROOT::TFile; Added some simple fixes to `ROOT::TFile`, to make it build with Xcode/Clang 9.0 on macOS High Sierra in C++14 mode. This is to fix the build problem described in https://sft.its.cern.ch/jira/browse/ROOT-9072. (I just thought that I might as well propose a fix, since I fixed it for my local installation anyway.). I imagine that cherry-picking the fix into the master branch would not be up to me anymore... (Should've read the contribution guidelines... 😛)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1220
https://github.com/root-project/root/pull/1220:50,testability,simpl,simple,50,"Xcode/clang 9.0 fixes for ROOT::TFile; Added some simple fixes to `ROOT::TFile`, to make it build with Xcode/Clang 9.0 on macOS High Sierra in C++14 mode. This is to fix the build problem described in https://sft.its.cern.ch/jira/browse/ROOT-9072. (I just thought that I might as well propose a fix, since I fixed it for my local installation anyway.). I imagine that cherry-picking the fix into the master branch would not be up to me anymore... (Should've read the contribution guidelines... 😛)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1220
https://github.com/root-project/root/pull/1220:50,usability,simpl,simple,50,"Xcode/clang 9.0 fixes for ROOT::TFile; Added some simple fixes to `ROOT::TFile`, to make it build with Xcode/Clang 9.0 on macOS High Sierra in C++14 mode. This is to fix the build problem described in https://sft.its.cern.ch/jira/browse/ROOT-9072. (I just thought that I might as well propose a fix, since I fixed it for my local installation anyway.). I imagine that cherry-picking the fix into the master branch would not be up to me anymore... (Should've read the contribution guidelines... 😛)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1220
https://github.com/root-project/root/pull/1220:480,usability,guid,guidelines,480,"Xcode/clang 9.0 fixes for ROOT::TFile; Added some simple fixes to `ROOT::TFile`, to make it build with Xcode/Clang 9.0 on macOS High Sierra in C++14 mode. This is to fix the build problem described in https://sft.its.cern.ch/jira/browse/ROOT-9072. (I just thought that I might as well propose a fix, since I fixed it for my local installation anyway.). I imagine that cherry-picking the fix into the master branch would not be up to me anymore... (Should've read the contribution guidelines... 😛)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1220
https://github.com/root-project/root/pull/1221:29,deployability,manag,manager,29,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:224,deployability,manag,manage,224,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:435,deployability,manag,managed,435,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:457,deployability,manag,manager,457,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:29,energy efficiency,manag,manager,29,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:224,energy efficiency,manag,manage,224,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:435,energy efficiency,manag,managed,435,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:457,energy efficiency,manag,manager,457,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:798,energy efficiency,draw,drawing,798,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:897,energy efficiency,draw,drawing,897,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:199,interoperability,specif,specific,199,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:993,interoperability,format,formatting,993,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:847,modifiability,concern,concerning,847,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:858,performance,I/O,I/O,858,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:29,safety,manag,manager,29,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:224,safety,manag,manage,224,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:435,safety,manag,managed,435,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:457,safety,manag,manager,457,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:1062,safety,compl,complete,1062,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:1062,security,compl,complete,1062,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:847,testability,concern,concerning,847,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:194,usability,user,user-specific,194,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:208,usability,UI,UIs,208,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:580,usability,support,supported,580,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:604,usability,custom,custom,604,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:616,usability,widget,widget,616,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:674,usability,custom,custom,674,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1221:681,usability,UI,UI,681,"webgui: introduce web window manager; This is central instance which will handle all kinds of displays, implemented with web. This will be TCanvas, TFitPanel, TBrowser, TGEditor and any kind of user-specific UIs. TWebWindow manage all kinds websocket-like connections and allow multiple connections for each window - means many clients can be opened for each existing canvas or browser (if allowed). Also all kind of web front-end are managed by the window manager - CEF3, Qt5 WebEngine or normal web browser. JSROOT provides special handle to communicate with web window via all supported channels. Any custom HTML widget can directly use such handle and create absolutely custom UI without use of openui5 or largest part of JSROOT itself. First implementation of v7 th1/th2 histograms and canvas drawing is provided. Several fixes in v7 classes concerning I/O, converting into v6 histograms for drawing is disabled, code can be removed later. @bellenot . Travis CI will be unhappy with code formatting - please keep it as is for the moment, one could reformat complete code later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1221
https://github.com/root-project/root/pull/1222:35,deployability,build,builds,35,[TDF] Do not run imt test on noimt builds;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1222
https://github.com/root-project/root/pull/1222:21,safety,test,test,21,[TDF] Do not run imt test on noimt builds;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1222
https://github.com/root-project/root/pull/1222:21,testability,test,test,21,[TDF] Do not run imt test on noimt builds;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1222
https://github.com/root-project/root/pull/1223:270,deployability,continu,continuous,270,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:382,deployability,patch,patch,382,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:1124,deployability,fail,fail,1124,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:12,energy efficiency,core,core,12,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:1030,energy efficiency,reduc,reduce,1030,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:1093,interoperability,format,format,1093,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:640,modifiability,pac,package,640,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:108,performance,content,contents,108,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:977,reliability,doe,does,977,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:1124,reliability,fail,fail,1124,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:382,safety,patch,patch,382,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:245,security,ident,identical,245,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:382,security,patch,patch,382,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:133,usability,custom,custom,133,"Cleanup the core/zip code.; In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions. - `Bits.h`: headers necessary to actually use the old compression functions. - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions. - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1224:107,availability,avail,available,107,[TDF] Remove clang warnings; Today I learned: returning a local variable calls the move-ctor by default if available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1224
https://github.com/root-project/root/pull/1224:64,modifiability,variab,variable,64,[TDF] Remove clang warnings; Today I learned: returning a local variable calls the move-ctor by default if available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1224
https://github.com/root-project/root/pull/1224:107,reliability,availab,available,107,[TDF] Remove clang warnings; Today I learned: returning a local variable calls the move-ctor by default if available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1224
https://github.com/root-project/root/pull/1224:107,safety,avail,available,107,[TDF] Remove clang warnings; Today I learned: returning a local variable calls the move-ctor by default if available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1224
https://github.com/root-project/root/pull/1224:107,security,availab,available,107,[TDF] Remove clang warnings; Today I learned: returning a local variable calls the move-ctor by default if available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1224
https://github.com/root-project/root/pull/1224:37,usability,learn,learned,37,[TDF] Remove clang warnings; Today I learned: returning a local variable calls the move-ctor by default if available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1224
https://github.com/root-project/root/pull/1225:29,deployability,build,building,29,ROOT-9071; Simplification of building builtin LZ4 and fixing ROOT-9071,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1225:11,testability,Simpl,Simplification,11,ROOT-9071; Simplification of building builtin LZ4 and fixing ROOT-9071,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1225:11,usability,Simpl,Simplification,11,ROOT-9071; Simplification of building builtin LZ4 and fixing ROOT-9071,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1226:91,availability,error,error,91,"For the HasConsistentHashMember shortcut, don't use Class_Name.; Use Class_Name leads to:. error: explicit specialization of 'Class_Name' after instantiation. when compiling with modules on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:179,deployability,modul,modules,179,"For the HasConsistentHashMember shortcut, don't use Class_Name.; Use Class_Name leads to:. error: explicit specialization of 'Class_Name' after instantiation. when compiling with modules on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:179,modifiability,modul,modules,179,"For the HasConsistentHashMember shortcut, don't use Class_Name.; Use Class_Name leads to:. error: explicit specialization of 'Class_Name' after instantiation. when compiling with modules on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:91,performance,error,error,91,"For the HasConsistentHashMember shortcut, don't use Class_Name.; Use Class_Name leads to:. error: explicit specialization of 'Class_Name' after instantiation. when compiling with modules on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:91,safety,error,error,91,"For the HasConsistentHashMember shortcut, don't use Class_Name.; Use Class_Name leads to:. error: explicit specialization of 'Class_Name' after instantiation. when compiling with modules on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:179,safety,modul,modules,179,"For the HasConsistentHashMember shortcut, don't use Class_Name.; Use Class_Name leads to:. error: explicit specialization of 'Class_Name' after instantiation. when compiling with modules on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:32,usability,shortcut,shortcut,32,"For the HasConsistentHashMember shortcut, don't use Class_Name.; Use Class_Name leads to:. error: explicit specialization of 'Class_Name' after instantiation. when compiling with modules on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:91,usability,error,error,91,"For the HasConsistentHashMember shortcut, don't use Class_Name.; Use Class_Name leads to:. error: explicit specialization of 'Class_Name' after instantiation. when compiling with modules on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1227:505,deployability,patch,patch,505,"New algorithm for autobinning; This implements a proof of concept of a new histogram auto binning mode designed to produced mergeable histograms when run in multi-threaded / multi-process mode. The algorithm chooses powers of 2 to chose the boundaries, ranges and number of bins. The idea is described in the following document: https://docs.google.com/document/d/1TEntRbVnRzZRLio8JhND51FTNqqTAvu0ngnhLGneahg/edit?usp=sharing. A method to adjust the final looking of the histogram is also included in the patch. Two multicore tutorials illustrate the usage: mt303_fillHistosAutobin.C and mt301_fillHistos.C .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1227
https://github.com/root-project/root/pull/1227:216,energy efficiency,power,powers,216,"New algorithm for autobinning; This implements a proof of concept of a new histogram auto binning mode designed to produced mergeable histograms when run in multi-threaded / multi-process mode. The algorithm chooses powers of 2 to chose the boundaries, ranges and number of bins. The idea is described in the following document: https://docs.google.com/document/d/1TEntRbVnRzZRLio8JhND51FTNqqTAvu0ngnhLGneahg/edit?usp=sharing. A method to adjust the final looking of the histogram is also included in the patch. Two multicore tutorials illustrate the usage: mt303_fillHistosAutobin.C and mt301_fillHistos.C .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1227
https://github.com/root-project/root/pull/1227:157,performance,multi-thread,multi-threaded,157,"New algorithm for autobinning; This implements a proof of concept of a new histogram auto binning mode designed to produced mergeable histograms when run in multi-threaded / multi-process mode. The algorithm chooses powers of 2 to chose the boundaries, ranges and number of bins. The idea is described in the following document: https://docs.google.com/document/d/1TEntRbVnRzZRLio8JhND51FTNqqTAvu0ngnhLGneahg/edit?usp=sharing. A method to adjust the final looking of the histogram is also included in the patch. Two multicore tutorials illustrate the usage: mt303_fillHistosAutobin.C and mt301_fillHistos.C .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1227
https://github.com/root-project/root/pull/1227:505,safety,patch,patch,505,"New algorithm for autobinning; This implements a proof of concept of a new histogram auto binning mode designed to produced mergeable histograms when run in multi-threaded / multi-process mode. The algorithm chooses powers of 2 to chose the boundaries, ranges and number of bins. The idea is described in the following document: https://docs.google.com/document/d/1TEntRbVnRzZRLio8JhND51FTNqqTAvu0ngnhLGneahg/edit?usp=sharing. A method to adjust the final looking of the histogram is also included in the patch. Two multicore tutorials illustrate the usage: mt303_fillHistosAutobin.C and mt301_fillHistos.C .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1227
https://github.com/root-project/root/pull/1227:505,security,patch,patch,505,"New algorithm for autobinning; This implements a proof of concept of a new histogram auto binning mode designed to produced mergeable histograms when run in multi-threaded / multi-process mode. The algorithm chooses powers of 2 to chose the boundaries, ranges and number of bins. The idea is described in the following document: https://docs.google.com/document/d/1TEntRbVnRzZRLio8JhND51FTNqqTAvu0ngnhLGneahg/edit?usp=sharing. A method to adjust the final looking of the histogram is also included in the patch. Two multicore tutorials illustrate the usage: mt303_fillHistosAutobin.C and mt301_fillHistos.C .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1227
https://github.com/root-project/root/pull/1227:319,usability,document,document,319,"New algorithm for autobinning; This implements a proof of concept of a new histogram auto binning mode designed to produced mergeable histograms when run in multi-threaded / multi-process mode. The algorithm chooses powers of 2 to chose the boundaries, ranges and number of bins. The idea is described in the following document: https://docs.google.com/document/d/1TEntRbVnRzZRLio8JhND51FTNqqTAvu0ngnhLGneahg/edit?usp=sharing. A method to adjust the final looking of the histogram is also included in the patch. Two multicore tutorials illustrate the usage: mt303_fillHistosAutobin.C and mt301_fillHistos.C .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1227
https://github.com/root-project/root/pull/1227:353,usability,document,document,353,"New algorithm for autobinning; This implements a proof of concept of a new histogram auto binning mode designed to produced mergeable histograms when run in multi-threaded / multi-process mode. The algorithm chooses powers of 2 to chose the boundaries, ranges and number of bins. The idea is described in the following document: https://docs.google.com/document/d/1TEntRbVnRzZRLio8JhND51FTNqqTAvu0ngnhLGneahg/edit?usp=sharing. A method to adjust the final looking of the histogram is also included in the patch. Two multicore tutorials illustrate the usage: mt303_fillHistosAutobin.C and mt301_fillHistos.C .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1227
https://github.com/root-project/root/pull/1228:12,deployability,modul,modules,12,Fix tdf for modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1228
https://github.com/root-project/root/pull/1228:12,modifiability,modul,modules,12,Fix tdf for modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1228
https://github.com/root-project/root/pull/1228:12,safety,modul,modules,12,Fix tdf for modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1228
https://github.com/root-project/root/pull/1229:264,availability,error,errors,264,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:288,availability,error,error,288,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:53,deployability,build,building,53,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:193,deployability,modul,modules,193,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:380,deployability,patch,patch,380,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:70,energy efficiency,optim,optimized,70,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:350,energy efficiency,current,currently,350,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:193,modifiability,modul,modules,193,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:70,performance,optimiz,optimized,70,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:264,performance,error,errors,264,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:288,performance,error,error,288,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:193,safety,modul,modules,193,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:264,safety,error,errors,264,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:288,safety,error,error,288,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:380,safety,patch,patch,380,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:380,security,patch,patch,380,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:264,usability,error,errors,264,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:288,usability,error,error,288,"[cxxmodules] Set fastmath for rootcling_stage1; When building ROOT in optimized mode, we enable fast math which then. disables errno on math functions. But this only happens in TCling,. so all modules built by rootcling_stage1 are suddenly out of sync. and we get errors like this:. ```. error: errno in math functions was enabled in PCH file but is currently disabled. ```. This patch just applies the same setting in _stage1. In theory we. should make a central place where we have these extra flags, but. that's out of scope for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1230:40,availability,operat,operators,40,"cppcheck: fix some ""Prefer prefix ++/-- operators for non-primitive;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1230
https://github.com/root-project/root/pull/1230:20,usability,Prefer,Prefer,20,"cppcheck: fix some ""Prefer prefix ++/-- operators for non-primitive;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1230
https://github.com/root-project/root/pull/1231:67,availability,error,error,67,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1019,availability,error,error,1019,"b.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1946,availability,error,error,1946,"ing/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:2700,availability,error,error,2700,"b/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:34,deployability,modul,modulemap,34,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:213,deployability,modul,module,213,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:242,deployability,depend,dependency,242,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:280,deployability,modul,modules,280,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:339,deployability,modul,module,339,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:462,deployability,build,build,462,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:560,deployability,build,build,560,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:645,deployability,build,build,645,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:733,deployability,build,build,733,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:755,deployability,Stack,StackAllocator,755,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:937,deployability,build,build,937,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1388,deployability,build,build,1388,"from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1486,deployability,build,build,1486,"FunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/M",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1571,deployability,build,build,1571,"Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/includ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1659,deployability,build,build,1659,"uit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1681,deployability,Stack,StackAllocator,1681," file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstd",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1863,deployability,build,build,1863,"/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:2291,deployability,build,build,2291,"b/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:2389,deployability,build,build,2389,"b/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:2474,deployability,build,build,2474,"b/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:2562,deployability,build,build,2562,"b/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:2584,deployability,Stack,StackAllocator,2584,"b/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:49,energy efficiency,current,currently,49,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:242,integrability,depend,dependency,242,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:34,modifiability,modul,modulemap,34,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:213,modifiability,modul,module,213,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:242,modifiability,depend,dependency,242,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:280,modifiability,modul,modules,280,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:339,modifiability,modul,module,339,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:67,performance,error,error,67,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1019,performance,error,error,1019,"b.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1946,performance,error,error,1946,"ing/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:2700,performance,error,error,2700,"b/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:34,safety,modul,modulemap,34,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:67,safety,error,error,67,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:213,safety,modul,module,213,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:242,safety,depend,dependency,242,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:280,safety,modul,modules,280,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:339,safety,modul,module,339,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1019,safety,error,error,1019,"b.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1946,safety,error,error,1946,"ing/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:2700,safety,error,error,2700,"b/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:242,testability,depend,dependency,242,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:67,usability,error,error,67,"[cxxmodules] Add stdlib.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1019,usability,error,error,1019,"b.h to libc modulemap.; We currently get the error below from stdlib.h as we have problems merging. these special declarations with GCC annotations. We can't add stdlib.h to. the normal libc module as this would cause a dependency cycle between the. builtin modules of clang and libc, but having this as a standalone module. seems to work for me. ```. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:1946,usability,error,error,1946,"ing/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:2700,usability,error,error,2700,"b/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:8: error: reference to 'lldiv_t' is ambiguous. extern lldiv_t lldiv (long long int __numer,. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:75:. In file included from /home/teemperor/root/dbg-build/etc/cling/lib/clang/5.0.0/include/stdlib.h:8:. /usr/include/stdlib.h:742:16: error: functions that differ only in their return type cannot be overloaded. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. /usr/include/stdlib.h:742:16: note: previous declaration is here. extern lldiv_t lldiv (long long int __numer,. ~~~~~~~ ^. In file included from input_line_12:18:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/BasicFunctionGradient.h:13:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/MnMatrix.h:31:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/LASymMatrix.h:24:. In file included from /home/teemperor/root/dbg-build/include/Minuit2/StackAllocator.h:28:. /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../include/c++/7.2.0/cstdlib:194:11: error: reference to 'lldiv_t' is ambiguous. using ::lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. /usr/include/stdlib.h:81:5: note: candidate found by name lookup is 'lldiv_t'. } lldiv_t;. ^. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1232:222,deployability,build,build,222,webgui: Introduce web-based fitpanel; Web-based FitPanel can work without canvas. At the same time one can embed FitPanel inside existing canvas. Both modes shown in tutorials/v7/fitpanel.cxx macro. Also try to solve ROOT build problem.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1232
https://github.com/root-project/root/pull/1232:94,performance,time,time,94,webgui: Introduce web-based fitpanel; Web-based FitPanel can work without canvas. At the same time one can embed FitPanel inside existing canvas. Both modes shown in tutorials/v7/fitpanel.cxx macro. Also try to solve ROOT build problem.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1232
https://github.com/root-project/root/pull/1233:169,interoperability,architectur,architecture,169,Mater tmva classification; - Code to support book multiple ml methods in the envelope class. - A new class Classification to perform two class classification in the new architecture of TMVA.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1233
https://github.com/root-project/root/pull/1233:125,performance,perform,perform,125,Mater tmva classification; - Code to support book multiple ml methods in the envelope class. - A new class Classification to perform two class classification in the new architecture of TMVA.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1233
https://github.com/root-project/root/pull/1233:37,usability,support,support,37,Mater tmva classification; - Code to support book multiple ml methods in the envelope class. - A new class Classification to perform two class classification in the new architecture of TMVA.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1233
https://github.com/root-project/root/pull/1233:125,usability,perform,perform,125,Mater tmva classification; - Code to support book multiple ml methods in the envelope class. - A new class Classification to perform two class classification in the new architecture of TMVA.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1233
https://github.com/root-project/root/pull/1235:350,deployability,depend,dependency,350,"webgui: Introduce TText class; Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1235
https://github.com/root-project/root/pull/1235:418,deployability,contain,container,418,"webgui: Introduce TText class; Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1235
https://github.com/root-project/root/pull/1235:480,deployability,Updat,Update,480,"webgui: Introduce TText class; Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1235
https://github.com/root-project/root/pull/1235:402,energy efficiency,draw,draw,402,"webgui: Introduce TText class; Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1235
https://github.com/root-project/root/pull/1235:350,integrability,depend,dependency,350,"webgui: Introduce TText class; Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1235
https://github.com/root-project/root/pull/1235:350,modifiability,depend,dependency,350,"webgui: Introduce TText class; Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1235
https://github.com/root-project/root/pull/1235:350,safety,depend,dependency,350,"webgui: Introduce TText class; Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1235
https://github.com/root-project/root/pull/1235:480,safety,Updat,Update,480,"webgui: Introduce TText class; Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1235
https://github.com/root-project/root/pull/1235:480,security,Updat,Update,480,"webgui: Introduce TText class; Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1235
https://github.com/root-project/root/pull/1235:350,testability,depend,dependency,350,"webgui: Introduce TText class; Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1235
https://github.com/root-project/root/pull/1236:24,availability,failur,failure,24,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:24,deployability,fail,failure,24,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:79,deployability,modul,module,79,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:840,deployability,Integr,IntegralCast,840,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1656,deployability,Integr,IntegralCast,1656," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1957,deployability,modul,module,1957," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2052,deployability,modul,module,2052," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2127,deployability,modul,modules,2127," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2428,deployability,modul,module,2428," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2501,deployability,patch,patch,2501," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2569,deployability,modul,module,2569," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1890,energy efficiency,current,current,1890," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2314,energy efficiency,load,loaded,2314," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2549,energy efficiency,current,currently,2549," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2614,energy efficiency,load,loaded,2614," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:551,integrability,pub,public,551,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:840,integrability,Integr,IntegralCast,840,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1656,integrability,Integr,IntegralCast,1656," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1871,integrability,sub,submodules,1871," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1898,integrability,translat,translation,1898," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2370,integrability,sub,submodules,2370," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:840,interoperability,Integr,IntegralCast,840,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1656,interoperability,Integr,IntegralCast,1656," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1898,interoperability,translat,translation,1898," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:79,modifiability,modul,module,79,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:840,modifiability,Integr,IntegralCast,840,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1656,modifiability,Integr,IntegralCast,1656," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1957,modifiability,modul,module,1957," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2052,modifiability,modul,module,2052," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2127,modifiability,modul,modules,2127," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2428,modifiability,modul,module,2428," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2569,modifiability,modul,module,2569," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:24,performance,failur,failure,24,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2314,performance,load,loaded,2314," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2435,performance,content,content,2435," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2614,performance,load,loaded,2614," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:24,reliability,fail,failure,24,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:840,reliability,Integr,IntegralCast,840,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1656,reliability,Integr,IntegralCast,1656," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:79,safety,modul,module,79,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1957,safety,modul,module,1957," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2052,safety,modul,module,2052," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2127,safety,modul,modules,2127," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2428,safety,modul,module,2428," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2501,safety,patch,patch,2501," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2569,safety,modul,module,2569," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:480,security,Access,AccessSpecDecl,480,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:840,security,Integr,IntegralCast,840,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1656,security,Integr,IntegralCast,1656," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2501,security,patch,patch,2501," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:17,testability,assert,assert,17,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:111,testability,assert,assertions,111,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:138,testability,assert,assertions,138,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:840,testability,Integr,IntegralCast,840,"[cxxmodules] Fix assert failure with duplicate decls.; When generating the GQt module in rootcling, we hit the assertions. in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```. CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition. |-also in GQt.TQtClientWidget.h. |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo. |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public. |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:1656,testability,Integr,IntegralCast,1656," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2080,testability,assert,assert,2080," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:2226,testability,assert,assert,2226," hidden Sizes. | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'. | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>. | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'. | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'. | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'. | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3. `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian. |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'. |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'. `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'. `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>. `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'. ```. The reason for this is that we have QSysInfo both in the TQtClientWidget. and TGQt submodules and our current translation (which is supposed to. parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a module, the code. fires the assert even though duplictes are expected with modules. The reason why we don't recognize it as a declaration form an ASTFile. which disables the assert is that FromASTFile for the decls is. not set. This is because they haven't been loaded by the ASTFileReader. but are directly parsed as submodules in our special case where we. directly parse a module content from rootcling to generate it. We just workaround in this patch by checking that if the decl is from. the currently generated module, we are pretending it's as if it was. loaded from an AST file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1238:122,deployability,updat,updated,122,PyROOT: Added 'signed char*' and 'unsigned char*' executors; This fixes ROOT-9068 issue. Tests in roottest have also been updated.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1238
https://github.com/root-project/root/pull/1238:89,safety,Test,Tests,89,PyROOT: Added 'signed char*' and 'unsigned char*' executors; This fixes ROOT-9068 issue. Tests in roottest have also been updated.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1238
https://github.com/root-project/root/pull/1238:122,safety,updat,updated,122,PyROOT: Added 'signed char*' and 'unsigned char*' executors; This fixes ROOT-9068 issue. Tests in roottest have also been updated.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1238
https://github.com/root-project/root/pull/1238:15,security,sign,signed,15,PyROOT: Added 'signed char*' and 'unsigned char*' executors; This fixes ROOT-9068 issue. Tests in roottest have also been updated.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1238
https://github.com/root-project/root/pull/1238:122,security,updat,updated,122,PyROOT: Added 'signed char*' and 'unsigned char*' executors; This fixes ROOT-9068 issue. Tests in roottest have also been updated.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1238
https://github.com/root-project/root/pull/1238:89,testability,Test,Tests,89,PyROOT: Added 'signed char*' and 'unsigned char*' executors; This fixes ROOT-9068 issue. Tests in roottest have also been updated.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1238
https://github.com/root-project/root/pull/1239:194,availability,error,error,194,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:263,availability,error,error,263,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:331,availability,error,error,331,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:351,availability,sli,sliceVal,351,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:401,availability,error,error,401,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:421,availability,sli,sliceValRef,421,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:474,availability,error,error,474,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:494,availability,sli,sliceValsUp,494,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:547,availability,error,error,547,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:567,availability,sli,sliceValsLow,567,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:621,availability,error,error,621,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:641,availability,sli,sliceValsUpRef,641,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:697,availability,error,error,697,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:717,availability,sli,sliceValsLowRef,717,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:774,availability,error,error,774,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1289,availability,error,error,1289,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1350,availability,error,error,1350,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1411,availability,error,error,1411,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1698,availability,error,error,1698,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1791,availability,operat,operators,1791,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:794,integrability,sub,subarr,794,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:194,performance,error,error,194,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:201,performance,Memor,Memory,201,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:263,performance,error,error,263,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:270,performance,Memor,Memory,270,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:331,performance,error,error,331,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:338,performance,Memor,Memory,338,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:401,performance,error,error,401,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:408,performance,Memor,Memory,408,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:474,performance,error,error,474,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:481,performance,Memor,Memory,481,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:547,performance,error,error,547,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:554,performance,Memor,Memory,554,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:621,performance,error,error,621,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:628,performance,Memor,Memory,628,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:697,performance,error,error,697,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:704,performance,Memor,Memory,704,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:774,performance,error,error,774,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:781,performance,Memor,Memory,781,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1289,performance,error,error,1289,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1296,performance,Memor,Memory,1296,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1350,performance,error,error,1350,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1357,performance,Memor,Memory,1357,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1411,performance,error,error,1411,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1418,performance,Memor,Memory,1418,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1698,performance,error,error,1698,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:351,reliability,sli,sliceVal,351,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:421,reliability,sli,sliceValRef,421,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:494,reliability,sli,sliceValsUp,494,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:567,reliability,sli,sliceValsLow,567,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:641,reliability,sli,sliceValsUpRef,641,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:717,reliability,sli,sliceValsLowRef,717,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:194,safety,error,error,194,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:263,safety,error,error,263,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:331,safety,error,error,331,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:401,safety,error,error,401,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:474,safety,error,error,474,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:547,safety,error,error,547,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:621,safety,error,error,621,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:697,safety,error,error,697,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:774,safety,error,error,774,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1289,safety,error,error,1289,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1350,safety,error,error,1350,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1411,safety,error,error,1411,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1698,safety,error,error,1698,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:194,usability,error,error,194,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:201,usability,Memor,Memory,201,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:263,usability,error,error,263,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:270,usability,Memor,Memory,270,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:331,usability,error,error,331,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:338,usability,Memor,Memory,338,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:401,usability,error,error,401,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:408,usability,Memor,Memory,408,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:474,usability,error,error,474,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:481,usability,Memor,Memory,481,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:547,usability,error,error,547,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:554,usability,Memor,Memory,554,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:621,usability,error,error,621,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:628,usability,Memor,Memory,628,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:697,usability,error,error,697,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:704,usability,Memor,Memory,704,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:774,usability,error,error,774,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:781,usability,Memor,Memory,781,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1289,usability,error,error,1289,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1296,usability,Memor,Memory,1296,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1350,usability,error,error,1350,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1357,usability,Memor,Memory,1357,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1411,usability,error,error,1411,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1418,usability,Memor,Memory,1418,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1661,usability,tool,tools,1661,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1676,usability,Tool,ToolRunner,1676,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1698,usability,error,error,1698,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1715,usability,Command,CommandLine,1715,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1735,usability,Command,CommandLine,1735,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1771,usability,Prefer,Prefer,1771,"cppcheck: fix some reports; [graf2d/asimage/src/libAfterImage/afterbase.c:1282]: (style) Array index 'i' is used before limits check. [graf2d/asimage/src/libAfterImage/libungif/gifalloc.c:61]: (error) Memory leak: Object. [graf2d/win32gdk/src/TGWin32.cxx:4540]: (error) Memory leak: GIFarr. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceVal. [graf3d/eve/src/TEveCalo2DGL.cxx:169]: (error) Memory leak: sliceValRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUp. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLow. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsUpRef. [graf3d/eve/src/TEveCalo2DGL.cxx:369]: (error) Memory leak: sliceValsLowRef. [graf3d/eve/src/TEvePointSet.cxx:354]: (error) Memory leak: subarr. [graf3d/gl/src/gl2ps.cxx:1382] -> [graf3d/gl/src/gl2ps.cxx:1382]: (style) Same expression on both sides of '|'. see http://octave.org/doxygen/3.6/d3/d9c/gl2ps_8c_source.html#1343. [hist/hist/src/TFormula.cxx:1741]: (style) Array index 'i' is used before limits check. [hist/hist/src/TFormula.cxx:1810]: (style) Array index 'i' is used before limits check. [hist/hist/src/TGraphSmooth.cxx:173]: (style) Array index 'imin' is used before limits check. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hX. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hD. [hist/hist/src/TPrincipal.cxx:714]: (error) Memory leak: hP. [hist/histpainter/src/TGraph2DPainter.cxx:416]: (style) Array index 'js' is used before limits check. [hist/histpainter/src/TGraph2DPainter.cxx:455]: (style) Array index 'js' is used before limits check. [interpreter/llvm/src/tools/bugpoint/ToolRunner.cpp:386]: (error) When Pos==CommandLine.size(), CommandLine[Pos] is out of bounds. +Prefer prefix ++/-- operators for non-primitive types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1240:16,energy efficiency,model,model,16,"webgui: special model for FitPanel; Special model allows to set FitPanel openui5 elements directly. Also when ""Fit"" button pressed, draw dummy histogram in new canvas or in the bound canvas. Let open many windows with CEF (was not possible before)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1240
https://github.com/root-project/root/pull/1240:44,energy efficiency,model,model,44,"webgui: special model for FitPanel; Special model allows to set FitPanel openui5 elements directly. Also when ""Fit"" button pressed, draw dummy histogram in new canvas or in the bound canvas. Let open many windows with CEF (was not possible before)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1240
https://github.com/root-project/root/pull/1240:132,energy efficiency,draw,draw,132,"webgui: special model for FitPanel; Special model allows to set FitPanel openui5 elements directly. Also when ""Fit"" button pressed, draw dummy histogram in new canvas or in the bound canvas. Let open many windows with CEF (was not possible before)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1240
https://github.com/root-project/root/pull/1240:16,security,model,model,16,"webgui: special model for FitPanel; Special model allows to set FitPanel openui5 elements directly. Also when ""Fit"" button pressed, draw dummy histogram in new canvas or in the bound canvas. Let open many windows with CEF (was not possible before)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1240
https://github.com/root-project/root/pull/1240:44,security,model,model,44,"webgui: special model for FitPanel; Special model allows to set FitPanel openui5 elements directly. Also when ""Fit"" button pressed, draw dummy histogram in new canvas or in the bound canvas. Let open many windows with CEF (was not possible before)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1240
https://github.com/root-project/root/pull/1242:50,deployability,build,builds,50,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:315,deployability,build,builds,315,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:40,energy efficiency,Optim,Optimized,40,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:305,energy efficiency,Optim,Optimized,305,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:40,performance,Optimiz,Optimized,40,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:119,performance,time,times,119,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:179,performance,perform,performance,179,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:305,performance,Optimiz,Optimized,305,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:361,performance,perform,performance,361,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:94,reliability,doe,doesn,94,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:179,usability,perform,performance,179,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:328,usability,user,users,328,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:361,usability,perform,performance,361,"[cmake] Enable clang's ThinLTO mode for Optimized builds; Clang has a quite new LTO mode that doesn't blow up linking. times as much as with vanilla LTO but still brings similar. performance improvements. It's quite easy for us to migrate. to this new mode, so it would make sense to just activate. it in Optimized builds where users are obviously looking. for performance. More information: https://clang.llvm.org/docs/ThinLTO.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1243:225,modifiability,deco,decoration,225,webgui: introduce window geometry; In CEF and Qt5WebEngine set window size. Use for FitPanel 300x500 as initial size for demonstration. Also chrome browser allows to set window size and show HTML page without typical browser decoration. One can set shell variable WEBGUI_WHERE which allows to change default behavior .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1243
https://github.com/root-project/root/pull/1243:255,modifiability,variab,variable,255,webgui: introduce window geometry; In CEF and Qt5WebEngine set window size. Use for FitPanel 300x500 as initial size for demonstration. Also chrome browser allows to set window size and show HTML page without typical browser decoration. One can set shell variable WEBGUI_WHERE which allows to change default behavior .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1243
https://github.com/root-project/root/pull/1243:308,usability,behavi,behavior,308,webgui: introduce window geometry; In CEF and Qt5WebEngine set window size. Use for FitPanel 300x500 as initial size for demonstration. Also chrome browser allows to set window size and show HTML page without typical browser decoration. One can set shell variable WEBGUI_WHERE which allows to change default behavior .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1243
https://github.com/root-project/root/pull/1244:12,availability,error,error,12,Cut & paste error;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1244
https://github.com/root-project/root/pull/1244:12,performance,error,error,12,Cut & paste error;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1244
https://github.com/root-project/root/pull/1244:12,safety,error,error,12,Cut & paste error;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1244
https://github.com/root-project/root/pull/1244:12,usability,error,error,12,Cut & paste error;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1244
https://github.com/root-project/root/pull/1245:37,deployability,modul,module,37,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:97,deployability,modul,module,97,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:127,deployability,modul,modules,127,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:217,deployability,modul,module,217,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:275,deployability,modul,module,275,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:37,modifiability,modul,module,37,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:97,modifiability,modul,module,97,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:127,modifiability,modul,modules,127,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:217,modifiability,modul,module,217,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:275,modifiability,modul,module,275,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:37,safety,modul,module,37,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:97,safety,modul,module,97,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:127,safety,modul,modules,127,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:217,safety,modul,module,217,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:275,safety,modul,module,275,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1245:258,usability,user,user,258,"[cxxmodules] Don't always generate a module in CIFactory; Right now we always start generating a module in the CIFactory. when modules are enabled. However, we should only do that when. we actually want to generate a module according to the COpts. (e.g. the user has given a module that we should generate).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1246:19,deployability,build,build,19,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:34,deployability,modul,modules,34,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:69,deployability,modul,modules,69,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:98,deployability,build,build,98,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:134,deployability,build,building,134,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:154,deployability,modul,modules,154,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:127,energy efficiency,reduc,reduce,127,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:34,modifiability,modul,modules,34,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:69,modifiability,modul,modules,69,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:154,modifiability,modul,modules,154,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:143,performance,time,times,143,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:34,safety,modul,modules,34,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:69,safety,modul,modules,69,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:154,safety,modul,modules,154,"[cxxmodules] Don't build PCH with modules; We don't use the PCH with modules, so we don't need to build it. Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1247:25,deployability,depend,dependency,25,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:118,deployability,build,builds,118,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:193,deployability,build,build,193,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:202,deployability,fail,fail,202,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:233,deployability,depend,dependency,233,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:62,energy efficiency,Current,Currently,62,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:306,energy efficiency,core,core,306,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:25,integrability,depend,dependency,25,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:233,integrability,depend,dependency,233,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:254,interoperability,specif,specific,254,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:25,modifiability,depend,dependency,25,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:233,modifiability,depend,dependency,233,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:202,reliability,fail,fail,202,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:25,safety,depend,dependency,25,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:49,safety,compl,complexDict,49,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:131,safety,compl,complex,131,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:233,safety,depend,dependency,233,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:286,safety,compl,complex,286,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:49,security,compl,complexDict,49,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:131,security,compl,complex,131,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:286,security,compl,complex,286,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:25,testability,depend,dependency,25,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1247:233,testability,depend,dependency,233,"[cxxmodules] Add missing dependency rootcling -> complexDict; Currently there is a chance that rootcling includes and builds. the 'complex' dictionary before it is built, which will cause. the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is. `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1247
https://github.com/root-project/root/pull/1248:37,reliability,doe,does,37,webgui: fix assert condition; Assert does not work on Linux?,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1248
https://github.com/root-project/root/pull/1248:12,testability,assert,assert,12,webgui: fix assert condition; Assert does not work on Linux?,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1248
https://github.com/root-project/root/pull/1248:30,testability,Assert,Assert,30,webgui: fix assert condition; Assert does not work on Linux?,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1248
https://github.com/root-project/root/pull/1249:137,safety,prevent,preventing,137,"Add inRange check in RooRealVar constructor; Minor fix for the RooRealVar constructor with value, range and unit. There was no condition preventing values outside of range:. ```. root [0] RooRealVar x(""x"",""x"",-10,0,5). root [1] x.Print(). RooRealVar::x = -10 L(0 - 5). ```. Now an inRange check is added, so value is clipped into range: . ```. root [1] x.Print(). RooRealVar::x = 0 L(0 - 5). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1249
https://github.com/root-project/root/pull/1249:137,security,preven,preventing,137,"Add inRange check in RooRealVar constructor; Minor fix for the RooRealVar constructor with value, range and unit. There was no condition preventing values outside of range:. ```. root [0] RooRealVar x(""x"",""x"",-10,0,5). root [1] x.Print(). RooRealVar::x = -10 L(0 - 5). ```. Now an inRange check is added, so value is clipped into range: . ```. root [1] x.Print(). RooRealVar::x = 0 L(0 - 5). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1249
https://github.com/root-project/root/pull/1249:108,testability,unit,unit,108,"Add inRange check in RooRealVar constructor; Minor fix for the RooRealVar constructor with value, range and unit. There was no condition preventing values outside of range:. ```. root [0] RooRealVar x(""x"",""x"",-10,0,5). root [1] x.Print(). RooRealVar::x = -10 L(0 - 5). ```. Now an inRange check is added, so value is clipped into range: . ```. root [1] x.Print(). RooRealVar::x = 0 L(0 - 5). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1249
https://github.com/root-project/root/pull/1250:35,interoperability,bind,bind,35,wbgui: use lambdas instead of std::bind; Also small improvement in CEF handlers,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1250
https://github.com/root-project/root/pull/1250:35,modifiability,bind,bind,35,wbgui: use lambdas instead of std::bind; Also small improvement in CEF handlers,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1250
https://github.com/root-project/root/pull/1251:15,performance,lock,lock,15,WIP: Global RW lock;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:15,security,lock,lock,15,WIP: Global RW lock;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1252:16,availability,error,errors,16,Fix compilation errors of ROOT v7 on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1252
https://github.com/root-project/root/pull/1252:16,performance,error,errors,16,Fix compilation errors of ROOT v7 on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1252
https://github.com/root-project/root/pull/1252:16,safety,error,errors,16,Fix compilation errors of ROOT v7 on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1252
https://github.com/root-project/root/pull/1252:16,usability,error,errors,16,Fix compilation errors of ROOT v7 on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1252
https://github.com/root-project/root/pull/1253:88,availability,down,downloaded,88,[cmake] Use SHA256 instead of MD5 for external source verification; Also now verify all downloaded software before installing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1253
https://github.com/root-project/root/pull/1253:115,deployability,instal,installing,115,[cmake] Use SHA256 instead of MD5 for external source verification; Also now verify all downloaded software before installing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1253
https://github.com/root-project/root/pull/1253:54,testability,verif,verification,54,[cmake] Use SHA256 instead of MD5 for external source verification; Also now verify all downloaded software before installing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1253
https://github.com/root-project/root/pull/1253:77,testability,verif,verify,77,[cmake] Use SHA256 instead of MD5 for external source verification; Also now verify all downloaded software before installing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1253
https://github.com/root-project/root/pull/1254:0,deployability,Continu,Continued,0,"Continued cleanup of core/zip; This patch series should finish up the cleanup of `core/zip` (well, for now...). Beyond fixing up some variable names and compiler warnings, this separates out the implementation of reading the ROOT framing format (the magic 9 byte headers) from the inflate implementation for the old compression algorithm..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1254
https://github.com/root-project/root/pull/1254:36,deployability,patch,patch,36,"Continued cleanup of core/zip; This patch series should finish up the cleanup of `core/zip` (well, for now...). Beyond fixing up some variable names and compiler warnings, this separates out the implementation of reading the ROOT framing format (the magic 9 byte headers) from the inflate implementation for the old compression algorithm..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1254
https://github.com/root-project/root/pull/1254:21,energy efficiency,core,core,21,"Continued cleanup of core/zip; This patch series should finish up the cleanup of `core/zip` (well, for now...). Beyond fixing up some variable names and compiler warnings, this separates out the implementation of reading the ROOT framing format (the magic 9 byte headers) from the inflate implementation for the old compression algorithm..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1254
https://github.com/root-project/root/pull/1254:82,energy efficiency,core,core,82,"Continued cleanup of core/zip; This patch series should finish up the cleanup of `core/zip` (well, for now...). Beyond fixing up some variable names and compiler warnings, this separates out the implementation of reading the ROOT framing format (the magic 9 byte headers) from the inflate implementation for the old compression algorithm..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1254
https://github.com/root-project/root/pull/1254:238,interoperability,format,format,238,"Continued cleanup of core/zip; This patch series should finish up the cleanup of `core/zip` (well, for now...). Beyond fixing up some variable names and compiler warnings, this separates out the implementation of reading the ROOT framing format (the magic 9 byte headers) from the inflate implementation for the old compression algorithm..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1254
https://github.com/root-project/root/pull/1254:134,modifiability,variab,variable,134,"Continued cleanup of core/zip; This patch series should finish up the cleanup of `core/zip` (well, for now...). Beyond fixing up some variable names and compiler warnings, this separates out the implementation of reading the ROOT framing format (the magic 9 byte headers) from the inflate implementation for the old compression algorithm..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1254
https://github.com/root-project/root/pull/1254:36,safety,patch,patch,36,"Continued cleanup of core/zip; This patch series should finish up the cleanup of `core/zip` (well, for now...). Beyond fixing up some variable names and compiler warnings, this separates out the implementation of reading the ROOT framing format (the magic 9 byte headers) from the inflate implementation for the old compression algorithm..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1254
https://github.com/root-project/root/pull/1254:36,security,patch,patch,36,"Continued cleanup of core/zip; This patch series should finish up the cleanup of `core/zip` (well, for now...). Beyond fixing up some variable names and compiler warnings, this separates out the implementation of reading the ROOT framing format (the magic 9 byte headers) from the inflate implementation for the old compression algorithm..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1254
https://github.com/root-project/root/pull/1255:7,performance,Multiplex,Multiplex,7,[test] Multiplex ast source;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1255
https://github.com/root-project/root/pull/1255:1,safety,test,test,1,[test] Multiplex ast source;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1255
https://github.com/root-project/root/pull/1255:1,testability,test,test,1,[test] Multiplex ast source;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1255
https://github.com/root-project/root/pull/1256:165,availability,error,error,165,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:449,deployability,build,build,449,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:1146,deployability,manag,manage,1146,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:685,energy efficiency,alloc,allocator,685,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:857,energy efficiency,alloc,allocator,857,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:988,energy efficiency,alloc,allocator,988,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:1146,energy efficiency,manag,manage,1146,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:1109,integrability,sub,submit,1109,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:165,performance,error,error,165,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:165,safety,error,error,165,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:1146,safety,manag,manage,1146,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:1258,safety,hot,hot,1258,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:42,usability,help,help,42,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:165,usability,error,error,165,"Outline BDTEventWrapper::GetVarIndex() to help lld.; ldd has problems with linking tmva due to this function in the header. Outlining it fixes it. ```. /usr/bin/ld: error: can't create dynamic relocation R_X86_64_TLSLD against symbol: TMVA::BDTEventWrapper::GetVarIndex()::fVarIndex in readonly segment; recompile object files with -fPIC. >>> defined in CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o. >>> referenced by BDTEventWrapper.h:64 (/home/axel/build/root/branches/v6-10/cmake/include/TMVA/BDTEventWrapper.h:64). >>> CMakeFiles/TMVA.dir/src/DecisionTree.cxx.o:(void std::__introsort_loop<__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, __gnu_cxx::__normal_iterator<TMVA::BDTEventWrapper*, std::vector<TMVA::BDTEventWrapper, std::allocator<TMVA::BDTEventWrapper> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (.isra.194)). ```. While it'd be great to submit a reproducer to lld (I didn't manage to create one within the few minutes I invested), this change might be a cheap workaround. Unless it's a hot function where outlining is a real cost?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1257:100,integrability,messag,message,100,"[cxxmodules] Backport D39416; See https://reviews.llvm.org/D39416 for more details. Original commit message:. The MultiplexExternalSemaSource doesn't correctly overload the getModule function,. causing the multiplexer to not forward this call as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1257:100,interoperability,messag,message,100,"[cxxmodules] Backport D39416; See https://reviews.llvm.org/D39416 for more details. Original commit message:. The MultiplexExternalSemaSource doesn't correctly overload the getModule function,. causing the multiplexer to not forward this call as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1257:114,performance,Multiplex,MultiplexExternalSemaSource,114,"[cxxmodules] Backport D39416; See https://reviews.llvm.org/D39416 for more details. Original commit message:. The MultiplexExternalSemaSource doesn't correctly overload the getModule function,. causing the multiplexer to not forward this call as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1257:206,performance,multiplex,multiplexer,206,"[cxxmodules] Backport D39416; See https://reviews.llvm.org/D39416 for more details. Original commit message:. The MultiplexExternalSemaSource doesn't correctly overload the getModule function,. causing the multiplexer to not forward this call as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1257:142,reliability,doe,doesn,142,"[cxxmodules] Backport D39416; See https://reviews.llvm.org/D39416 for more details. Original commit message:. The MultiplexExternalSemaSource doesn't correctly overload the getModule function,. causing the multiplexer to not forward this call as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1257:42,safety,review,reviews,42,"[cxxmodules] Backport D39416; See https://reviews.llvm.org/D39416 for more details. Original commit message:. The MultiplexExternalSemaSource doesn't correctly overload the getModule function,. causing the multiplexer to not forward this call as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1257:42,testability,review,reviews,42,"[cxxmodules] Backport D39416; See https://reviews.llvm.org/D39416 for more details. Original commit message:. The MultiplexExternalSemaSource doesn't correctly overload the getModule function,. causing the multiplexer to not forward this call as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1258:0,availability,Error,Error,0,Error() on an invalid SetEntriesRange().;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1258
https://github.com/root-project/root/pull/1258:0,performance,Error,Error,0,Error() on an invalid SetEntriesRange().;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1258
https://github.com/root-project/root/pull/1258:0,safety,Error,Error,0,Error() on an invalid SetEntriesRange().;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1258
https://github.com/root-project/root/pull/1258:0,usability,Error,Error,0,Error() on an invalid SetEntriesRange().;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1258
https://github.com/root-project/root/pull/1259:40,security,access,access,40,Make TTreeReaderArray's iterator random access;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1260:20,deployability,modul,modules,20,[cxxmodules] Remove modules specific code in TClingCallbacks.; We don't need this code for now and just use the old way.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1260
https://github.com/root-project/root/pull/1260:28,interoperability,specif,specific,28,[cxxmodules] Remove modules specific code in TClingCallbacks.; We don't need this code for now and just use the old way.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1260
https://github.com/root-project/root/pull/1260:20,modifiability,modul,modules,20,[cxxmodules] Remove modules specific code in TClingCallbacks.; We don't need this code for now and just use the old way.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1260
https://github.com/root-project/root/pull/1260:20,safety,modul,modules,20,[cxxmodules] Remove modules specific code in TClingCallbacks.; We don't need this code for now and just use the old way.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1260
https://github.com/root-project/root/pull/1262:21,deployability,modul,modules,21,[cxxmodules] Prevent modules from overwriting our AST/Sema sources; See the two commits for more information.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1262
https://github.com/root-project/root/pull/1262:21,modifiability,modul,modules,21,[cxxmodules] Prevent modules from overwriting our AST/Sema sources; See the two commits for more information.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1262
https://github.com/root-project/root/pull/1262:13,safety,Prevent,Prevent,13,[cxxmodules] Prevent modules from overwriting our AST/Sema sources; See the two commits for more information.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1262
https://github.com/root-project/root/pull/1262:21,safety,modul,modules,21,[cxxmodules] Prevent modules from overwriting our AST/Sema sources; See the two commits for more information.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1262
https://github.com/root-project/root/pull/1262:13,security,Preven,Prevent,13,[cxxmodules] Prevent modules from overwriting our AST/Sema sources; See the two commits for more information.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1262
https://github.com/root-project/root/pull/1263:43,deployability,modul,modules,43,"[cxxmodules] Re-enable rootmap loading for modules.; We still need it to load the library before we get the headers and. initializie some class infos, so we can't just remove it like that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1263
https://github.com/root-project/root/pull/1263:31,energy efficiency,load,loading,31,"[cxxmodules] Re-enable rootmap loading for modules.; We still need it to load the library before we get the headers and. initializie some class infos, so we can't just remove it like that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1263
https://github.com/root-project/root/pull/1263:73,energy efficiency,load,load,73,"[cxxmodules] Re-enable rootmap loading for modules.; We still need it to load the library before we get the headers and. initializie some class infos, so we can't just remove it like that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1263
https://github.com/root-project/root/pull/1263:43,modifiability,modul,modules,43,"[cxxmodules] Re-enable rootmap loading for modules.; We still need it to load the library before we get the headers and. initializie some class infos, so we can't just remove it like that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1263
https://github.com/root-project/root/pull/1263:31,performance,load,loading,31,"[cxxmodules] Re-enable rootmap loading for modules.; We still need it to load the library before we get the headers and. initializie some class infos, so we can't just remove it like that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1263
https://github.com/root-project/root/pull/1263:73,performance,load,load,73,"[cxxmodules] Re-enable rootmap loading for modules.; We still need it to load the library before we get the headers and. initializie some class infos, so we can't just remove it like that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1263
https://github.com/root-project/root/pull/1263:43,safety,modul,modules,43,"[cxxmodules] Re-enable rootmap loading for modules.; We still need it to load the library before we get the headers and. initializie some class infos, so we can't just remove it like that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1263
https://github.com/root-project/root/pull/1264:29,deployability,modul,modules,29,"Revert ""[cxxmodules] Prevent modules from overwriting our AST/Sema sources""; Reverts root-project/root#1262",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1264
https://github.com/root-project/root/pull/1264:29,modifiability,modul,modules,29,"Revert ""[cxxmodules] Prevent modules from overwriting our AST/Sema sources""; Reverts root-project/root#1262",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1264
https://github.com/root-project/root/pull/1264:21,safety,Prevent,Prevent,21,"Revert ""[cxxmodules] Prevent modules from overwriting our AST/Sema sources""; Reverts root-project/root#1262",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1264
https://github.com/root-project/root/pull/1264:29,safety,modul,modules,29,"Revert ""[cxxmodules] Prevent modules from overwriting our AST/Sema sources""; Reverts root-project/root#1262",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1264
https://github.com/root-project/root/pull/1264:21,security,Preven,Prevent,21,"Revert ""[cxxmodules] Prevent modules from overwriting our AST/Sema sources""; Reverts root-project/root#1262",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1264
https://github.com/root-project/root/pull/1266:44,deployability,modul,modules,44,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:70,deployability,modul,modules,70,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:132,deployability,modul,module,132,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:261,deployability,modul,module,261,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:22,energy efficiency,load,load,22,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:44,modifiability,modul,modules,44,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:70,modifiability,modul,modules,70,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:132,modifiability,modul,module,132,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:261,modifiability,modul,module,261,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:22,performance,load,load,22,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:44,safety,modul,modules,44,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:70,safety,modul,modules,70,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:132,safety,modul,module,132,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:261,safety,modul,module,261,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1266:230,usability,user,user,230,[cxxmodules] Directly load all headers with modules enabled; With C++ modules we can just directly `#include` all headers. from the module payload and initialize the classes as we don't. actually parse the included headers as the user is supposed. to provide a module for those headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1266
https://github.com/root-project/root/pull/1267:253,deployability,modul,modules,253,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:299,deployability,modul,modules,299,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:111,energy efficiency,load,loading,111,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:188,energy efficiency,load,loading,188,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:203,interoperability,specif,specific,203,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:240,interoperability,specif,specific,240,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:253,modifiability,modul,modules,253,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:299,modifiability,modul,modules,299,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:111,performance,load,loading,111,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:188,performance,load,loading,188,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:253,safety,modul,modules,253,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:299,safety,modul,modules,299,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1267:141,security,ident,identifiers,141,"[cxxmodules] Enable interpreter callbacks again; We actually need those callbacks as they are responsible for. loading decls from unresolved identifiers, which then actually. triggers the loading of the specific header (or in our case. the specific C++ modules). For now we need this as long as the modules are based on the. rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1267
https://github.com/root-project/root/pull/1268:69,deployability,patch,patch,69,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:99,deployability,patch,patch,99,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:331,deployability,fail,failing,331,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:402,deployability,build,building,402,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:331,reliability,fail,failing,331,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:69,safety,patch,patch,69,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:99,safety,patch,patch,99,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:345,safety,test,test,345,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:69,security,patch,patch,69,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:99,security,patch,patch,99,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:345,testability,test,test,345,"[clang] Reimplement diag suppression for forward declarations.; This patch reimplements the broken patch in clang: ""Fix fwddecls of templates. with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt). temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which. is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1269:12,deployability,version,version,12,jsroot: dev version from 2/Nov/17 with many fixes from 5.3.1;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1269
https://github.com/root-project/root/pull/1269:12,integrability,version,version,12,jsroot: dev version from 2/Nov/17 with many fixes from 5.3.1;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1269
https://github.com/root-project/root/pull/1269:12,modifiability,version,version,12,jsroot: dev version from 2/Nov/17 with many fixes from 5.3.1;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1269
https://github.com/root-project/root/pull/1271:25,deployability,version,version,25,Reduce again the minimal version of cmake;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:0,energy efficiency,Reduc,Reduce,0,Reduce again the minimal version of cmake;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:25,integrability,version,version,25,Reduce again the minimal version of cmake;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:25,modifiability,version,version,25,Reduce again the minimal version of cmake;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:17,usability,minim,minimal,17,Reduce again the minimal version of cmake;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1272:12,deployability,build,building,12,[test] Test building modules PR;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1272
https://github.com/root-project/root/pull/1272:21,deployability,modul,modules,21,[test] Test building modules PR;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1272
https://github.com/root-project/root/pull/1272:21,modifiability,modul,modules,21,[test] Test building modules PR;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1272
https://github.com/root-project/root/pull/1272:1,safety,test,test,1,[test] Test building modules PR;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1272
https://github.com/root-project/root/pull/1272:7,safety,Test,Test,7,[test] Test building modules PR;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1272
https://github.com/root-project/root/pull/1272:21,safety,modul,modules,21,[test] Test building modules PR;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1272
https://github.com/root-project/root/pull/1272:1,testability,test,test,1,[test] Test building modules PR;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1272
https://github.com/root-project/root/pull/1272:7,testability,Test,Test,7,[test] Test building modules PR;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1272
https://github.com/root-project/root/pull/1273:33,deployability,patch,patch,33,"[cxxmodules] Revert broken cling patch again; We already reverted this patch, but the LLVM upgrade to 5.0 seems. to have ignored this reversion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1273
https://github.com/root-project/root/pull/1273:71,deployability,patch,patch,71,"[cxxmodules] Revert broken cling patch again; We already reverted this patch, but the LLVM upgrade to 5.0 seems. to have ignored this reversion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1273
https://github.com/root-project/root/pull/1273:91,deployability,upgrad,upgrade,91,"[cxxmodules] Revert broken cling patch again; We already reverted this patch, but the LLVM upgrade to 5.0 seems. to have ignored this reversion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1273
https://github.com/root-project/root/pull/1273:91,modifiability,upgrad,upgrade,91,"[cxxmodules] Revert broken cling patch again; We already reverted this patch, but the LLVM upgrade to 5.0 seems. to have ignored this reversion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1273
https://github.com/root-project/root/pull/1273:33,safety,patch,patch,33,"[cxxmodules] Revert broken cling patch again; We already reverted this patch, but the LLVM upgrade to 5.0 seems. to have ignored this reversion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1273
https://github.com/root-project/root/pull/1273:71,safety,patch,patch,71,"[cxxmodules] Revert broken cling patch again; We already reverted this patch, but the LLVM upgrade to 5.0 seems. to have ignored this reversion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1273
https://github.com/root-project/root/pull/1273:33,security,patch,patch,33,"[cxxmodules] Revert broken cling patch again; We already reverted this patch, but the LLVM upgrade to 5.0 seems. to have ignored this reversion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1273
https://github.com/root-project/root/pull/1273:71,security,patch,patch,71,"[cxxmodules] Revert broken cling patch again; We already reverted this patch, but the LLVM upgrade to 5.0 seems. to have ignored this reversion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1273
https://github.com/root-project/root/pull/1274:74,deployability,patch,patch,74,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:114,deployability,upgrad,upgrade,114,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:138,deployability,patch,patch,138,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:185,deployability,version,version,185,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:185,integrability,version,version,185,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:210,integrability,messag,message,210,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:210,interoperability,messag,message,210,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:114,modifiability,upgrad,upgrade,114,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:185,modifiability,version,version,185,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:74,safety,patch,patch,74,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:138,safety,patch,patch,138,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:74,security,patch,patch,74,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1274:138,security,patch,patch,138,"Backport D37416: Use the VFS from the CompilerInvocation by default; This patch hasn't landed in 5.0, so the LLVM upgrade overwrote this. patch without bringing in the upstreamed fixed version. Original commit message:. The default VFS for the FileManager should be created from the CompilerInvocation. instead of assuming there is none.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1274
https://github.com/root-project/root/pull/1275:170,availability,avail,available,170,"Arthur-tsang-Vectorized_Tformula; This PR enables the support to create Vectorized TFormula expression by adding a signature using . ROOT::Double_v. The functionality is available if ROOT has been compiled with VecCore support, . i.e. the macro R__HAS__VECCORE is defined",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1275
https://github.com/root-project/root/pull/1275:170,reliability,availab,available,170,"Arthur-tsang-Vectorized_Tformula; This PR enables the support to create Vectorized TFormula expression by adding a signature using . ROOT::Double_v. The functionality is available if ROOT has been compiled with VecCore support, . i.e. the macro R__HAS__VECCORE is defined",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1275
https://github.com/root-project/root/pull/1275:170,safety,avail,available,170,"Arthur-tsang-Vectorized_Tformula; This PR enables the support to create Vectorized TFormula expression by adding a signature using . ROOT::Double_v. The functionality is available if ROOT has been compiled with VecCore support, . i.e. the macro R__HAS__VECCORE is defined",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1275
https://github.com/root-project/root/pull/1275:115,security,sign,signature,115,"Arthur-tsang-Vectorized_Tformula; This PR enables the support to create Vectorized TFormula expression by adding a signature using . ROOT::Double_v. The functionality is available if ROOT has been compiled with VecCore support, . i.e. the macro R__HAS__VECCORE is defined",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1275
https://github.com/root-project/root/pull/1275:170,security,availab,available,170,"Arthur-tsang-Vectorized_Tformula; This PR enables the support to create Vectorized TFormula expression by adding a signature using . ROOT::Double_v. The functionality is available if ROOT has been compiled with VecCore support, . i.e. the macro R__HAS__VECCORE is defined",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1275
https://github.com/root-project/root/pull/1275:54,usability,support,support,54,"Arthur-tsang-Vectorized_Tformula; This PR enables the support to create Vectorized TFormula expression by adding a signature using . ROOT::Double_v. The functionality is available if ROOT has been compiled with VecCore support, . i.e. the macro R__HAS__VECCORE is defined",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1275
https://github.com/root-project/root/pull/1275:219,usability,support,support,219,"Arthur-tsang-Vectorized_Tformula; This PR enables the support to create Vectorized TFormula expression by adding a signature using . ROOT::Double_v. The functionality is available if ROOT has been compiled with VecCore support, . i.e. the macro R__HAS__VECCORE is defined",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1275
https://github.com/root-project/root/pull/1277:11,safety,test,test,11,Fix google test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1277
https://github.com/root-project/root/pull/1277:11,testability,test,test,11,Fix google test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1277
https://github.com/root-project/root/pull/1280:75,deployability,build,builds,75,[llvm] ELFRelocs moved under BinaryFormat.; This should fix our cxxmodules builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1280
https://github.com/root-project/root/pull/1281:32,integrability,batch,batch,32,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:90,integrability,batch,batch,90,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:232,integrability,batch,batch-mode,232,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:243,integrability,compon,components,243,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:353,integrability,batch,batch,353,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:163,interoperability,specif,specifies,163,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:243,interoperability,compon,components,243,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:243,modifiability,compon,components,243,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:32,performance,batch,batch,32,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:90,performance,batch,batch,90,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:232,performance,batch,batch-mode,232,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:353,performance,batch,batch,353,"webgui: run tutorials macros in batch mode, fix compiler warnings; Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in **cef** or **chromium**, . batch-mode components will be started. For the cef still X11 functionality required, . chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards. Also resolve compiler warnings, reported by @pcanal .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1282:27,deployability,modul,modules,27,[cxxmodules] Load core C++ modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1282
https://github.com/root-project/root/pull/1282:13,energy efficiency,Load,Load,13,[cxxmodules] Load core C++ modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1282
https://github.com/root-project/root/pull/1282:18,energy efficiency,core,core,18,[cxxmodules] Load core C++ modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1282
https://github.com/root-project/root/pull/1282:27,modifiability,modul,modules,27,[cxxmodules] Load core C++ modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1282
https://github.com/root-project/root/pull/1282:13,performance,Load,Load,13,[cxxmodules] Load core C++ modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1282
https://github.com/root-project/root/pull/1282:27,safety,modul,modules,27,[cxxmodules] Load core C++ modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1282
https://github.com/root-project/root/pull/1284:255,deployability,modul,modules,255,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:269,deployability,patch,patch,269,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:306,deployability,contain,contains,306,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:246,energy efficiency,load,load,246,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:255,modifiability,modul,modules,255,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:13,performance,Multiplex,Multiplex,13,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:246,performance,load,load,246,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:289,performance,multiplex,multiplexer,289,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:195,reliability,doe,doesn,195,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:255,safety,modul,modules,255,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:269,safety,patch,patch,269,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:269,security,patch,patch,269,[cxxmodules] Multiplex the ExternalASTSource in cling; We need to respect the existing ExternalASTSource when setting up the. interpreter. Otherwise the ASTReader (which is the existing source). doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new. ASTSource and the existing one if it's necessary. We also. no longer attach the existing sema source which seemingly. was only a workaround that only works for the special case. were the external sema source and the external AST source. are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1285:60,safety,avoid,avoid,60,Set CMake policy CMP0068 to NEW for LLVM; This change is to avoid warnings from CMake 3.9.3 and newer on macOS. See `cmake --help-policy CMP0068` for more information. Fixes [ROOT-9031](https://sft.its.cern.ch/jira/browse/ROOT-9031).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:10,security,polic,policy,10,Set CMake policy CMP0068 to NEW for LLVM; This change is to avoid warnings from CMake 3.9.3 and newer on macOS. See `cmake --help-policy CMP0068` for more information. Fixes [ROOT-9031](https://sft.its.cern.ch/jira/browse/ROOT-9031).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:130,security,polic,policy,130,Set CMake policy CMP0068 to NEW for LLVM; This change is to avoid warnings from CMake 3.9.3 and newer on macOS. See `cmake --help-policy CMP0068` for more information. Fixes [ROOT-9031](https://sft.its.cern.ch/jira/browse/ROOT-9031).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:125,usability,help,help-policy,125,Set CMake policy CMP0068 to NEW for LLVM; This change is to avoid warnings from CMake 3.9.3 and newer on macOS. See `cmake --help-policy CMP0068` for more information. Fixes [ROOT-9031](https://sft.its.cern.ch/jira/browse/ROOT-9031).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1287:194,deployability,version,versioning,194,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:914,deployability,patch,patch,914,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:1230,deployability,Patch,Patch,1230,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:305,energy efficiency,current,current,305,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:476,energy efficiency,current,current,476,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:1184,energy efficiency,current,currently,1184,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:194,integrability,version,versioning,194,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:851,interoperability,conflict,conflicting,851,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:13,modifiability,Refact,Refactor,13,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:194,modifiability,version,versioning,194,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:13,performance,Refactor,Refactor,13,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:914,safety,patch,patch,914,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:1230,safety,Patch,Patch,1230,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:1271,safety,review,review,1271,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:914,security,patch,patch,914,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:1230,security,Patch,Patch,1230,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:1271,testability,review,review,1271,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:186,usability,UI,UID,186,"[cxxmodules] Refactor generation counter in LLVM; Right now the ExternalASTSources in LLVM have an awkward way. of implementing their generation counters, which provide an. incrementing UID for versioning the AST when it is changed. lazily by the ExternalASTSource (for example when more decls. are). The current implementation is based on having an counter in. each ExternalASTSource, but each ExternalASTSource actually. only refers to the top most ExternalASTSource of the current. ASTContext, which means that the counter suddenly resets. when we add any kind of new ExternalASTSource (and we have. no way to work around this). Also, some ExternalASTSources. like the ASTReader make assumptions that they are the top. most ExternalASTSource which means that as soon as we. overwrite the ASTReader, we suddenly have two counters. running providing conflicting information to anyone. querying the counters. This patch merges all these counters into one counter. which is in the ASTContext. This should get rid of. any more counter desyncronization problems when we. attach our own external sources or when parts of the. code make invalid assumptions about which external. source is currently the top most one in the ASTContext. Patch is upstreamed via LLVM phabricator review D39714.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1289:33,availability,error,errors,33,Fix CompressionTests compilation errors on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1289
https://github.com/root-project/root/pull/1289:33,performance,error,errors,33,Fix CompressionTests compilation errors on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1289
https://github.com/root-project/root/pull/1289:33,safety,error,errors,33,Fix CompressionTests compilation errors on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1289
https://github.com/root-project/root/pull/1289:33,usability,error,errors,33,Fix CompressionTests compilation errors on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1289
https://github.com/root-project/root/pull/1290:49,deployability,version,version,49,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:76,deployability,version,version,76,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:8,integrability,batch,batch,8,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:49,integrability,version,version,49,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:76,integrability,version,version,76,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:126,integrability,batch,batch,126,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:184,integrability,batch,batch,184,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:317,integrability,batch,batch-mode,317,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:328,integrability,compon,components,328,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:437,integrability,batch,batch,437,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:257,interoperability,specif,specifies,257,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:328,interoperability,compon,components,328,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:49,modifiability,version,version,49,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:76,modifiability,version,version,76,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:328,modifiability,compon,components,328,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:8,performance,batch,batch,8,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:126,performance,batch,batch,126,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:184,performance,batch,batch,184,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:317,performance,batch,batch-mode,317,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:437,performance,batch,batch,437,"webgui: batch mode and compiler warings (rebased version of #1281); Rebased version of #1281. webgui: run tutorials macros in batch mode, fix compiler warnings. Now macros, running in batch mode and using v7 TCanvas, will do nothing. Only if one explicitly specifies, that canvas should be shown in cef or chromium,. batch-mode components will be started. For the cef still X11 functionality required,. chromium is able to run in ""pure"" batch, but has problem with shutdown afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1291:277,deployability,manag,manager,277,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:331,deployability,automat,automatically,331,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:683,deployability,upgrad,upgrade,683,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:277,energy efficiency,manag,manager,277,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:637,interoperability,socket,socket,637,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:683,modifiability,upgrad,upgrade,683,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:607,reliability,doe,does,607,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:277,safety,manag,manager,277,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:637,security,soc,socket,637,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:331,testability,automat,automatically,331,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:35,usability,document,documentation,35,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:320,usability,widget,widget,320,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:364,usability,widget,widget,364,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:454,usability,document,documentation,454,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1291:626,usability,close,closes,626,webgui: cleaner ownership and more documentation; 1. Use unique_ptr for owned objects. It is:. - THttpServer instance in TWebWindowManager. - TWebWindowWSHandler in TWebWindow. - move default constructors into source files. 2. Remove list of shared_ptr<TWebWindow> from window manager. Window owned by the correspondent widget and automatically destroyed with the widget. 3. Use object references in method arguments where object must exists. 4. Provide documentation for all methods in TWebWindow and TWebWindowManager. 5. Small workaround for the case of broken websocket in civetweb. Appears when client does not regularly closes the socket. More investigation will be done after upgrade of civetweb code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1291
https://github.com/root-project/root/pull/1292:51,interoperability,format,formatting,51,Cling test fixes; After .O0 and new floating point formatting.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1292
https://github.com/root-project/root/pull/1292:6,safety,test,test,6,Cling test fixes; After .O0 and new floating point formatting.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1292
https://github.com/root-project/root/pull/1292:6,testability,test,test,6,Cling test fixes; After .O0 and new floating point formatting.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1292
https://github.com/root-project/root/pull/1294:45,energy efficiency,profil,profile,45,Add support to custom bin edges to histo and profile models;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:53,energy efficiency,model,models,53,Add support to custom bin edges to histo and profile models;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:45,performance,profil,profile,45,Add support to custom bin edges to histo and profile models;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:53,security,model,models,53,Add support to custom bin edges to histo and profile models;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:4,usability,support,support,4,Add support to custom bin edges to histo and profile models;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:15,usability,custom,custom,15,Add support to custom bin edges to histo and profile models;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1295:71,usability,Visual,VisualStudio,71,Work around a MVSC++ bug; Reported here: https://connect.microsoft.com/VisualStudio/feedback/details/3143729,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1295
https://github.com/root-project/root/pull/1295:84,usability,feedback,feedback,84,Work around a MVSC++ bug; Reported here: https://connect.microsoft.com/VisualStudio/feedback/details/3143729,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1295
https://github.com/root-project/root/pull/1296:25,availability,redund,redundant,25,Clean up all accumulated redundant files over the llvm upgrades.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1296
https://github.com/root-project/root/pull/1296:25,deployability,redundan,redundant,25,Clean up all accumulated redundant files over the llvm upgrades.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1296
https://github.com/root-project/root/pull/1296:55,deployability,upgrad,upgrades,55,Clean up all accumulated redundant files over the llvm upgrades.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1296
https://github.com/root-project/root/pull/1296:55,modifiability,upgrad,upgrades,55,Clean up all accumulated redundant files over the llvm upgrades.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1296
https://github.com/root-project/root/pull/1296:25,reliability,redundan,redundant,25,Clean up all accumulated redundant files over the llvm upgrades.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1296
https://github.com/root-project/root/pull/1296:25,safety,redund,redundant,25,Clean up all accumulated redundant files over the llvm upgrades.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1296
https://github.com/root-project/root/pull/1297:34,integrability,messag,message,34,"Backport r313269; Original commit message:. ""[tblgen] Remove uses of std::ptr_fun, it's removed in C++17."". @davidlt, does that fix ROOT-9085?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1297
https://github.com/root-project/root/pull/1297:34,interoperability,messag,message,34,"Backport r313269; Original commit message:. ""[tblgen] Remove uses of std::ptr_fun, it's removed in C++17."". @davidlt, does that fix ROOT-9085?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1297
https://github.com/root-project/root/pull/1297:118,reliability,doe,does,118,"Backport r313269; Original commit message:. ""[tblgen] Remove uses of std::ptr_fun, it's removed in C++17."". @davidlt, does that fix ROOT-9085?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1297
https://github.com/root-project/root/pull/1298:1,deployability,modul,modules,1,[modules] Protect possible deserialization.; When querying decls for information we can start a deserialization. This fixes 4 tests for runtime cxxmodules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1298
https://github.com/root-project/root/pull/1298:1,modifiability,modul,modules,1,[modules] Protect possible deserialization.; When querying decls for information we can start a deserialization. This fixes 4 tests for runtime cxxmodules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1298
https://github.com/root-project/root/pull/1298:1,safety,modul,modules,1,[modules] Protect possible deserialization.; When querying decls for information we can start a deserialization. This fixes 4 tests for runtime cxxmodules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1298
https://github.com/root-project/root/pull/1298:126,safety,test,tests,126,[modules] Protect possible deserialization.; When querying decls for information we can start a deserialization. This fixes 4 tests for runtime cxxmodules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1298
https://github.com/root-project/root/pull/1298:126,testability,test,tests,126,[modules] Protect possible deserialization.; When querying decls for information we can start a deserialization. This fixes 4 tests for runtime cxxmodules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1298
https://github.com/root-project/root/pull/1299:394,availability,consist,consisted,394,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:407,availability,operat,operating,407,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:828,availability,operat,operate,828,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:924,modifiability,exten,extended,924,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:602,safety,prevent,prevented,602,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:975,safety,test,test,975,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:602,security,preven,prevented,602,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:975,testability,test,test,975,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:0,usability,Support,Support,0,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:101,usability,support,support,101,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:278,usability,support,support,278,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:394,usability,consist,consisted,394,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1299:616,usability,support,support,616,"Support tree/chain friends in TTreeProcessorMT.; This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1299
https://github.com/root-project/root/pull/1300:16,availability,error,errors,16,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:23,integrability,messag,message,23,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:96,integrability,Translat,Translation,96,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:23,interoperability,messag,message,23,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:96,interoperability,Translat,Translation,96,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:16,performance,error,errors,16,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:686,performance,memor,memory,686,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:693,reliability,growth,growth,693,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:0,safety,Avoid,Avoid,0,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:16,safety,error,errors,16,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:344,safety,valid,valid,344,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:444,safety,test,test,444,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:108,testability,Unit,Unit,108,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:444,testability,test,test,444,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:16,usability,error,errors,16,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1300:686,usability,memor,memory,686,"Avoid spurrious errors message about iteration not set in ClassInfo.; In some circumstance, the Translation Unit can devoid of any decl. useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the. rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo. to use as the 'first' iterator and thus the existing invariant test,. 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the. TClingClassInfo was setup for iteration (rather than deducing from. the value of the iterator pointee) and void memory growth by. using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1300
https://github.com/root-project/root/pull/1301:70,usability,support,support,70,TMVA: added protection in case dont compile it with imt; Small fix to support compilation without imt in class TMVA::Config. O.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1301
https://github.com/root-project/root/pull/1302:53,performance,synch,synchonizing,53,Petricm g4formulas; Contribution of Marko Petric for synchonizing TGeo material properties with Geant4 ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1302
https://github.com/root-project/root/pull/1303:370,integrability,interfac,interface,370,[TDF] Use TArrayBranch instead of array_view; Until now we let users use `array_view` columns to signal that they were reading c-style-array branches from a root file (and therefore we needed a `TTreeReaderArray` as a reader). We now use our own `TArrayBranch` class for that purpose instead of embedding `array_view` with a meaning it does not have. This is a breaking interface change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1303
https://github.com/root-project/root/pull/1303:370,interoperability,interfac,interface,370,[TDF] Use TArrayBranch instead of array_view; Until now we let users use `array_view` columns to signal that they were reading c-style-array branches from a root file (and therefore we needed a `TTreeReaderArray` as a reader). We now use our own `TArrayBranch` class for that purpose instead of embedding `array_view` with a meaning it does not have. This is a breaking interface change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1303
https://github.com/root-project/root/pull/1303:370,modifiability,interfac,interface,370,[TDF] Use TArrayBranch instead of array_view; Until now we let users use `array_view` columns to signal that they were reading c-style-array branches from a root file (and therefore we needed a `TTreeReaderArray` as a reader). We now use our own `TArrayBranch` class for that purpose instead of embedding `array_view` with a meaning it does not have. This is a breaking interface change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1303
https://github.com/root-project/root/pull/1303:336,reliability,doe,does,336,[TDF] Use TArrayBranch instead of array_view; Until now we let users use `array_view` columns to signal that they were reading c-style-array branches from a root file (and therefore we needed a `TTreeReaderArray` as a reader). We now use our own `TArrayBranch` class for that purpose instead of embedding `array_view` with a meaning it does not have. This is a breaking interface change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1303
https://github.com/root-project/root/pull/1303:97,security,sign,signal,97,[TDF] Use TArrayBranch instead of array_view; Until now we let users use `array_view` columns to signal that they were reading c-style-array branches from a root file (and therefore we needed a `TTreeReaderArray` as a reader). We now use our own `TArrayBranch` class for that purpose instead of embedding `array_view` with a meaning it does not have. This is a breaking interface change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1303
https://github.com/root-project/root/pull/1303:63,usability,user,users,63,[TDF] Use TArrayBranch instead of array_view; Until now we let users use `array_view` columns to signal that they were reading c-style-array branches from a root file (and therefore we needed a `TTreeReaderArray` as a reader). We now use our own `TArrayBranch` class for that purpose instead of embedding `array_view` with a meaning it does not have. This is a breaking interface change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1303
https://github.com/root-project/root/pull/1304:161,integrability,configur,configure-RelWithDebInfo,161,Quote variable to avoid CMake syntax warning; This should fix the warning below:. ```. CMake Warning (dev) at. googletest-prefix/src/googletest-stamp/googletest-configure-RelWithDebInfo.cmake:3:. Syntax Warning in cmake code at column 471. Argument not separated from preceding token by whitespace. This warning is for project developers. Use -Wno-dev to suppress it. ```. Warning introduced by f892e5e99c0e92326fd54eab059fc5a801762210.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1304
https://github.com/root-project/root/pull/1304:6,modifiability,variab,variable,6,Quote variable to avoid CMake syntax warning; This should fix the warning below:. ```. CMake Warning (dev) at. googletest-prefix/src/googletest-stamp/googletest-configure-RelWithDebInfo.cmake:3:. Syntax Warning in cmake code at column 471. Argument not separated from preceding token by whitespace. This warning is for project developers. Use -Wno-dev to suppress it. ```. Warning introduced by f892e5e99c0e92326fd54eab059fc5a801762210.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1304
https://github.com/root-project/root/pull/1304:161,modifiability,configur,configure-RelWithDebInfo,161,Quote variable to avoid CMake syntax warning; This should fix the warning below:. ```. CMake Warning (dev) at. googletest-prefix/src/googletest-stamp/googletest-configure-RelWithDebInfo.cmake:3:. Syntax Warning in cmake code at column 471. Argument not separated from preceding token by whitespace. This warning is for project developers. Use -Wno-dev to suppress it. ```. Warning introduced by f892e5e99c0e92326fd54eab059fc5a801762210.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1304
https://github.com/root-project/root/pull/1304:18,safety,avoid,avoid,18,Quote variable to avoid CMake syntax warning; This should fix the warning below:. ```. CMake Warning (dev) at. googletest-prefix/src/googletest-stamp/googletest-configure-RelWithDebInfo.cmake:3:. Syntax Warning in cmake code at column 471. Argument not separated from preceding token by whitespace. This warning is for project developers. Use -Wno-dev to suppress it. ```. Warning introduced by f892e5e99c0e92326fd54eab059fc5a801762210.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1304
https://github.com/root-project/root/pull/1304:161,security,configur,configure-RelWithDebInfo,161,Quote variable to avoid CMake syntax warning; This should fix the warning below:. ```. CMake Warning (dev) at. googletest-prefix/src/googletest-stamp/googletest-configure-RelWithDebInfo.cmake:3:. Syntax Warning in cmake code at column 471. Argument not separated from preceding token by whitespace. This warning is for project developers. Use -Wno-dev to suppress it. ```. Warning introduced by f892e5e99c0e92326fd54eab059fc5a801762210.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1304
https://github.com/root-project/root/pull/1304:278,security,token,token,278,Quote variable to avoid CMake syntax warning; This should fix the warning below:. ```. CMake Warning (dev) at. googletest-prefix/src/googletest-stamp/googletest-configure-RelWithDebInfo.cmake:3:. Syntax Warning in cmake code at column 471. Argument not separated from preceding token by whitespace. This warning is for project developers. Use -Wno-dev to suppress it. ```. Warning introduced by f892e5e99c0e92326fd54eab059fc5a801762210.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1304
https://github.com/root-project/root/pull/1305:217,availability,failur,failure,217,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:318,availability,avail,available,318,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:68,deployability,version,version,68,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:217,deployability,fail,failure,217,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:263,deployability,updat,update,263,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:296,deployability,patch,patch,296,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:68,integrability,version,version,68,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:345,interoperability,format,format,345,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:68,modifiability,version,version,68,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:217,performance,failur,failure,217,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:369,performance,time,time,369,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:217,reliability,fail,failure,217,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:318,reliability,availab,available,318,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:212,safety,test,test,212,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:263,safety,updat,update,263,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:296,safety,patch,patch,296,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:318,safety,avail,available,318,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:263,security,updat,update,263,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:296,security,patch,patch,296,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:318,security,availab,available,318,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:212,testability,test,test,212,New algorithm for autobinning: revised and cleaned; This is revised version of #1227. Main change is the addition of an auto adjust mode that removes the need of a final adjust. Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref . A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1308:52,integrability,Filter,Filter,52,[TDF] Support friend columns in jitted Define's and Filter's; The tests for this pr are in PR1148 (test driven development!),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1308
https://github.com/root-project/root/pull/1308:66,safety,test,tests,66,[TDF] Support friend columns in jitted Define's and Filter's; The tests for this pr are in PR1148 (test driven development!),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1308
https://github.com/root-project/root/pull/1308:99,safety,test,test,99,[TDF] Support friend columns in jitted Define's and Filter's; The tests for this pr are in PR1148 (test driven development!),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1308
https://github.com/root-project/root/pull/1308:66,testability,test,tests,66,[TDF] Support friend columns in jitted Define's and Filter's; The tests for this pr are in PR1148 (test driven development!),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1308
https://github.com/root-project/root/pull/1308:99,testability,test,test,99,[TDF] Support friend columns in jitted Define's and Filter's; The tests for this pr are in PR1148 (test driven development!),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1308
https://github.com/root-project/root/pull/1308:6,usability,Support,Support,6,[TDF] Support friend columns in jitted Define's and Filter's; The tests for this pr are in PR1148 (test driven development!),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1308
https://github.com/root-project/root/pull/1309:106,availability,error,error,106,[TDF] Fix dataframe_friends test after array_view->TArrayBranch change; Thanks @etejedor for noticing the error messages I missed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1309
https://github.com/root-project/root/pull/1309:112,integrability,messag,messages,112,[TDF] Fix dataframe_friends test after array_view->TArrayBranch change; Thanks @etejedor for noticing the error messages I missed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1309
https://github.com/root-project/root/pull/1309:112,interoperability,messag,messages,112,[TDF] Fix dataframe_friends test after array_view->TArrayBranch change; Thanks @etejedor for noticing the error messages I missed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1309
https://github.com/root-project/root/pull/1309:106,performance,error,error,106,[TDF] Fix dataframe_friends test after array_view->TArrayBranch change; Thanks @etejedor for noticing the error messages I missed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1309
https://github.com/root-project/root/pull/1309:28,safety,test,test,28,[TDF] Fix dataframe_friends test after array_view->TArrayBranch change; Thanks @etejedor for noticing the error messages I missed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1309
https://github.com/root-project/root/pull/1309:106,safety,error,error,106,[TDF] Fix dataframe_friends test after array_view->TArrayBranch change; Thanks @etejedor for noticing the error messages I missed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1309
https://github.com/root-project/root/pull/1309:28,testability,test,test,28,[TDF] Fix dataframe_friends test after array_view->TArrayBranch change; Thanks @etejedor for noticing the error messages I missed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1309
https://github.com/root-project/root/pull/1309:106,usability,error,error,106,[TDF] Fix dataframe_friends test after array_view->TArrayBranch change; Thanks @etejedor for noticing the error messages I missed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1309
https://github.com/root-project/root/pull/1310:6,modifiability,Exten,Extend,6,[TDF] Extend gtest for friends in MT; Introduce MT testing for the TDataFrame with friends scenario.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1310
https://github.com/root-project/root/pull/1310:91,modifiability,scenario,scenario,91,[TDF] Extend gtest for friends in MT; Introduce MT testing for the TDataFrame with friends scenario.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1310
https://github.com/root-project/root/pull/1310:51,safety,test,testing,51,[TDF] Extend gtest for friends in MT; Introduce MT testing for the TDataFrame with friends scenario.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1310
https://github.com/root-project/root/pull/1310:51,testability,test,testing,51,[TDF] Extend gtest for friends in MT; Introduce MT testing for the TDataFrame with friends scenario.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1310
https://github.com/root-project/root/pull/1312:2826,availability,state,statements,2826,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:599,energy efficiency,current,currently,599,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:1815,energy efficiency,reduc,reductionFunction,1815,"torBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2017,energy efficiency,reduc,reductionFunction,2017,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2560,energy efficiency,model,model,2560,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2763,energy efficiency,Adapt,Adapt,2763,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:300,integrability,interfac,interface,300,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2297,integrability,interfac,interface,2297,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2763,integrability,Adapt,Adapt,2763,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2826,integrability,state,statements,2826,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:300,interoperability,interfac,interface,300,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:331,interoperability,specif,specific,331,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:931,interoperability,compatib,compatibility,931,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:988,interoperability,compatib,compatibility,988,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:1140,interoperability,compatib,compatibility,1140," comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2297,interoperability,interfac,interface,2297,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2361,interoperability,specif,specified,2361,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2763,interoperability,Adapt,Adapt,2763,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:300,modifiability,interfac,interface,300,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:464,modifiability,paramet,parameter,464,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:877,modifiability,reu,reuse,877,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2297,modifiability,interfac,interface,2297,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2393,modifiability,paramet,parameter,2393,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2763,modifiability,Adapt,Adapt,2763,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2551,performance,executor model,executor model,2551,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2840,safety,test,test,2840,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:443,security,polic,policy,443,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:678,security,polic,policy,678,"Add new general and sequential executors.; Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:1614,security,expos,exposing,1614,"n several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finish",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2386,security,polic,policy,2386,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2560,security,model,model,2560,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2729,security,Polic,Policies,2729,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2840,testability,test,test,2840,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:1274,usability,user,user,1274," a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:1353,usability,user,user,1353,"dExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:1633,usability,user,user,1633," instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm openi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:2073,usability,behavi,behaviour,2073,"ry strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp . ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);. auto mapFunction = [](unsigned i){return 1u;};. auto reductionFunction = [](const std::vector<unsigned> &v) {. return std::accumulate(v.begin(), v.end(), 0u);. };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);. ```. **TLDR;** This PR changes the behaviour of existing executors and introduces. new ones:. * TExecutor: changes its functionality to be a general Executor, while. TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor. now acts as a general interface to the executors. The executor it will. resolve to is specified by a execution policy parameter in its. constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the. executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:. - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1313:155,energy efficiency,current,currently,155,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:453,energy efficiency,reduc,reduces,453,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:495,energy efficiency,Current,Current,495,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:140,integrability,Filter,Filter,140,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:915,interoperability,format,formation,915,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:854,modifiability,refact,refactoring,854,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:19,performance,memor,memory-consuming,19,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:193,performance,memor,memory,193,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:300,performance,overhead,overhead,300,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:473,performance,memor,memory,473,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:854,performance,refactor,refactoring,854,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:288,security,sign,significant,288,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:19,usability,memor,memory-consuming,19,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:193,usability,memor,memory,193,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:473,usability,memor,memory,473,"[WIP] Faster, less memory-consuming jitting of Define calls in TDF; Just opening the PR to discuss the problem:. Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**. in code such as. ```c++. d.Define(""x"", ""42"").Min(""x""). ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring. EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1315:129,performance,perform,perform,129,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:217,performance,parallel,parallel,217,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:182,safety,Test,Test,182,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:303,safety,Test,Test,303,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:320,safety,Test,Tests,320,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:182,testability,Test,Test,182,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:303,testability,Test,Test,303,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:320,testability,Test,Tests,320,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:129,usability,perform,perform,129,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:165,usability,Support,Support,165,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:273,usability,Document,Documentation,273,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1316:129,performance,perform,perform,129,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:217,performance,parallel,parallel,217,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:182,safety,Test,Test,182,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:303,safety,Test,Test,303,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:320,safety,Test,Tests,320,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:182,testability,Test,Test,182,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:303,testability,Test,Test,303,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:320,testability,Test,Tests,320,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:129,usability,perform,perform,129,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:165,usability,Support,Support,165,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:273,usability,Document,Documentation,273,"TMVA class Classification; TMVA new developments. * improvements for class TMVA::Envelope. * Added class TMVA::Classification to perform two class Classification. * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate. * Documentation with Doxygen. * Test with Google Tests. * Example in Tutorials. Cheers,. O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1317:42,deployability,modul,module,42,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:58,deployability,modul,modules,58,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:97,deployability,automat,automatically,97,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:451,deployability,modul,modules,451,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:746,deployability,modul,modules,746,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:758,deployability,automat,automatically,758,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:18,energy efficiency,load,load,18,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:37,energy efficiency,core,core,37,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:772,energy efficiency,load,load,772,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:42,modifiability,modul,module,42,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:58,modifiability,modul,modules,58,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:451,modifiability,modul,modules,451,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:746,modifiability,modul,modules,746,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:18,performance,load,load,18,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:772,performance,load,load,772,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:42,safety,modul,module,42,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:58,safety,modul,modules,58,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:451,safety,modul,modules,451,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:746,safety,modul,modules,746,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:97,testability,automat,automatically,97,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:390,testability,assert,assert,390,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:411,testability,assert,assert,411,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:567,testability,assert,assert,567,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:718,testability,simul,simulate,718,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:758,testability,automat,automatically,758,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:310,usability,user,user,310,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:732,usability,behavi,behavior,732,"[cxxmodules] Also load STL/libc as a core module; Without modules, many STL and libc headers are automatically. provided by ROOT via the attached ROOT PCH. This means that. we don't need to have autloading or explicit includes for STL. or libc headers when running with the PCH attached. This leads. to making user code like this working in ROOT:. ```C++. // no includes here that provides assert. int foo() {. assert(false);. }. ```. However, as the modules don't come with this big PCH, we. are now suddenly in the situation where we can't resolve. things such as `assert`. We also can't rely on the. normal autoloading of ROOT as those declarations were. actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load. those headers that we expect to have in the ROOT PCH. (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1318:48,deployability,modul,modules-aware,48,[cxxmodules] Do not look for an overlay file on modules-aware systems.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1318
https://github.com/root-project/root/pull/1318:48,modifiability,modul,modules-aware,48,[cxxmodules] Do not look for an overlay file on modules-aware systems.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1318
https://github.com/root-project/root/pull/1318:48,safety,modul,modules-aware,48,[cxxmodules] Do not look for an overlay file on modules-aware systems.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1318
https://github.com/root-project/root/pull/1319:160,deployability,fail,fail,160,"[OpenBSD] Remove ProcFS references; OpenBSD no longer supports ProcFS and already removed all. references to this feature, which causes the ROOT compilation to fail on. this no longer existing constant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1319
https://github.com/root-project/root/pull/1319:160,reliability,fail,fail,160,"[OpenBSD] Remove ProcFS references; OpenBSD no longer supports ProcFS and already removed all. references to this feature, which causes the ROOT compilation to fail on. this no longer existing constant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1319
https://github.com/root-project/root/pull/1319:54,usability,support,supports,54,"[OpenBSD] Remove ProcFS references; OpenBSD no longer supports ProcFS and already removed all. references to this feature, which causes the ROOT compilation to fail on. this no longer existing constant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1319
https://github.com/root-project/root/pull/1320:82,availability,error,errors,82,[OpenBSD] Don't assume fileno is a function.; This otherwise leads to compilation errors when we do `::fileno`. as OpenBSD implemented fileno as a macro (which seems to be allowed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:82,performance,error,errors,82,[OpenBSD] Don't assume fileno is a function.; This otherwise leads to compilation errors when we do `::fileno`. as OpenBSD implemented fileno as a macro (which seems to be allowed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:82,safety,error,errors,82,[OpenBSD] Don't assume fileno is a function.; This otherwise leads to compilation errors when we do `::fileno`. as OpenBSD implemented fileno as a macro (which seems to be allowed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:82,usability,error,errors,82,[OpenBSD] Don't assume fileno is a function.; This otherwise leads to compilation errors when we do `::fileno`. as OpenBSD implemented fileno as a macro (which seems to be allowed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1321:208,deployability,modul,modules,208,"[cmake][cxxmodules] Fix header globbing in core/cont; This CMake globbing expression didn't look for .hxx files, which. caused that some headers weren't part of the dictionary payload. This causes in the C++ modules build that ROOT couldn't find the. ROOT::TSeqI declarations as it wasn't officially part of the. Core module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:216,deployability,build,build,216,"[cmake][cxxmodules] Fix header globbing in core/cont; This CMake globbing expression didn't look for .hxx files, which. caused that some headers weren't part of the dictionary payload. This causes in the C++ modules build that ROOT couldn't find the. ROOT::TSeqI declarations as it wasn't officially part of the. Core module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:318,deployability,modul,module,318,"[cmake][cxxmodules] Fix header globbing in core/cont; This CMake globbing expression didn't look for .hxx files, which. caused that some headers weren't part of the dictionary payload. This causes in the C++ modules build that ROOT couldn't find the. ROOT::TSeqI declarations as it wasn't officially part of the. Core module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:43,energy efficiency,core,core,43,"[cmake][cxxmodules] Fix header globbing in core/cont; This CMake globbing expression didn't look for .hxx files, which. caused that some headers weren't part of the dictionary payload. This causes in the C++ modules build that ROOT couldn't find the. ROOT::TSeqI declarations as it wasn't officially part of the. Core module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:313,energy efficiency,Core,Core,313,"[cmake][cxxmodules] Fix header globbing in core/cont; This CMake globbing expression didn't look for .hxx files, which. caused that some headers weren't part of the dictionary payload. This causes in the C++ modules build that ROOT couldn't find the. ROOT::TSeqI declarations as it wasn't officially part of the. Core module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:208,modifiability,modul,modules,208,"[cmake][cxxmodules] Fix header globbing in core/cont; This CMake globbing expression didn't look for .hxx files, which. caused that some headers weren't part of the dictionary payload. This causes in the C++ modules build that ROOT couldn't find the. ROOT::TSeqI declarations as it wasn't officially part of the. Core module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:318,modifiability,modul,module,318,"[cmake][cxxmodules] Fix header globbing in core/cont; This CMake globbing expression didn't look for .hxx files, which. caused that some headers weren't part of the dictionary payload. This causes in the C++ modules build that ROOT couldn't find the. ROOT::TSeqI declarations as it wasn't officially part of the. Core module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:208,safety,modul,modules,208,"[cmake][cxxmodules] Fix header globbing in core/cont; This CMake globbing expression didn't look for .hxx files, which. caused that some headers weren't part of the dictionary payload. This causes in the C++ modules build that ROOT couldn't find the. ROOT::TSeqI declarations as it wasn't officially part of the. Core module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:318,safety,modul,module,318,"[cmake][cxxmodules] Fix header globbing in core/cont; This CMake globbing expression didn't look for .hxx files, which. caused that some headers weren't part of the dictionary payload. This causes in the C++ modules build that ROOT couldn't find the. ROOT::TSeqI declarations as it wasn't officially part of the. Core module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1322:0,safety,Test,Test,0,Test commit;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1322
https://github.com/root-project/root/pull/1322:0,testability,Test,Test,0,Test commit;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1322
https://github.com/root-project/root/pull/1323:6,deployability,Updat,Update,6,[DOC] Update TDF release notes; Please check that none of your contributions was forgotten!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1323
https://github.com/root-project/root/pull/1323:17,deployability,releas,release,17,[DOC] Update TDF release notes; Please check that none of your contributions was forgotten!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1323
https://github.com/root-project/root/pull/1323:6,safety,Updat,Update,6,[DOC] Update TDF release notes; Please check that none of your contributions was forgotten!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1323
https://github.com/root-project/root/pull/1323:6,security,Updat,Update,6,[DOC] Update TDF release notes; Please check that none of your contributions was forgotten!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1323
https://github.com/root-project/root/pull/1326:54,availability,slo,slots,54,[TDF] Do not expect to always run `DefineSlot` on all slots; This assumption caused a breakage in datasource_csv.cxx ([here](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=424155)) and it's the same that caused breakages in datasource_root.cxx (fixed by commit feab873bacc8476dc931d60b41a125bb7d4c6fa2).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1326
https://github.com/root-project/root/pull/1326:170,deployability,build,buildid,170,[TDF] Do not expect to always run `DefineSlot` on all slots; This assumption caused a breakage in datasource_csv.cxx ([here](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=424155)) and it's the same that caused breakages in datasource_root.cxx (fixed by commit feab873bacc8476dc931d60b41a125bb7d4c6fa2).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1326
https://github.com/root-project/root/pull/1326:54,reliability,slo,slots,54,[TDF] Do not expect to always run `DefineSlot` on all slots; This assumption caused a breakage in datasource_csv.cxx ([here](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=424155)) and it's the same that caused breakages in datasource_root.cxx (fixed by commit feab873bacc8476dc931d60b41a125bb7d4c6fa2).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1326
https://github.com/root-project/root/pull/1327:136,availability,Markov,Markov,136,RooMCMC class added; I added the RooMCMC class into roofitcore. It is used as the RooMinuit class except that it is using a Monte Carlo Markov Chain as a minimizer. I also added a Tutorial to the roofit section where a basic comparison with Minuit can be performed. This is my first contribution to ROOT so I except that some thing will not be right. But I compiled ROOT on my computer exactly with the changes I am committing here and everything went fine.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:255,performance,perform,performed,255,RooMCMC class added; I added the RooMCMC class into roofitcore. It is used as the RooMinuit class except that it is using a Monte Carlo Markov Chain as a minimizer. I also added a Tutorial to the roofit section where a basic comparison with Minuit can be performed. This is my first contribution to ROOT so I except that some thing will not be right. But I compiled ROOT on my computer exactly with the changes I am committing here and everything went fine.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:136,reliability,Markov,Markov,136,RooMCMC class added; I added the RooMCMC class into roofitcore. It is used as the RooMinuit class except that it is using a Monte Carlo Markov Chain as a minimizer. I also added a Tutorial to the roofit section where a basic comparison with Minuit can be performed. This is my first contribution to ROOT so I except that some thing will not be right. But I compiled ROOT on my computer exactly with the changes I am committing here and everything went fine.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:98,safety,except,except,98,RooMCMC class added; I added the RooMCMC class into roofitcore. It is used as the RooMinuit class except that it is using a Monte Carlo Markov Chain as a minimizer. I also added a Tutorial to the roofit section where a basic comparison with Minuit can be performed. This is my first contribution to ROOT so I except that some thing will not be right. But I compiled ROOT on my computer exactly with the changes I am committing here and everything went fine.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:309,safety,except,except,309,RooMCMC class added; I added the RooMCMC class into roofitcore. It is used as the RooMinuit class except that it is using a Monte Carlo Markov Chain as a minimizer. I also added a Tutorial to the roofit section where a basic comparison with Minuit can be performed. This is my first contribution to ROOT so I except that some thing will not be right. But I compiled ROOT on my computer exactly with the changes I am committing here and everything went fine.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:154,usability,minim,minimizer,154,RooMCMC class added; I added the RooMCMC class into roofitcore. It is used as the RooMinuit class except that it is using a Monte Carlo Markov Chain as a minimizer. I also added a Tutorial to the roofit section where a basic comparison with Minuit can be performed. This is my first contribution to ROOT so I except that some thing will not be right. But I compiled ROOT on my computer exactly with the changes I am committing here and everything went fine.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:255,usability,perform,performed,255,RooMCMC class added; I added the RooMCMC class into roofitcore. It is used as the RooMinuit class except that it is using a Monte Carlo Markov Chain as a minimizer. I also added a Tutorial to the roofit section where a basic comparison with Minuit can be performed. This is my first contribution to ROOT so I except that some thing will not be right. But I compiled ROOT on my computer exactly with the changes I am committing here and everything went fine.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1328:366,availability,restor,restore,366,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:60,deployability,Depend,Depends,60,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:117,deployability,automat,automatically,117,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:281,deployability,contain,contains,281,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:350,deployability,modul,modules,350,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:397,deployability,modul,modules,397,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:18,energy efficiency,load,load,18,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:131,energy efficiency,load,loading,131,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:60,integrability,Depend,Depends,60,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:60,modifiability,Depend,Depends,60,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:350,modifiability,modul,modules,350,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:397,modifiability,modul,modules,397,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:18,performance,load,load,18,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:131,performance,load,loading,131,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:366,reliability,restor,restore,366,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:52,safety,test,tests,52,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:60,safety,Depend,Depends,60,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:350,safety,modul,modules,350,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:397,safety,modul,modules,397,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:340,security,hack,hack,340,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:52,testability,test,tests,52,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:60,testability,Depend,Depends,60,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:117,testability,automat,automatically,117,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1328:383,usability,behavi,behavior,383,"[cxxmodules] Also load TreePlayer to fix TDataFrame tests.; Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used. without the appropriate include never worked. This was previously. fixed by just adding TreePlayer (which contains TDF) to the PCH. . As always, let's recreate this hack with modules to make restore. the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1328
https://github.com/root-project/root/pull/1330:12,energy efficiency,reduc,reduced,12,PR1239 with reduced clang-format; ...and squashing some reverts. Supersedes PR #1239,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1330
https://github.com/root-project/root/pull/1330:26,interoperability,format,format,26,PR1239 with reduced clang-format; ...and squashing some reverts. Supersedes PR #1239,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1330
https://github.com/root-project/root/pull/1331:11,interoperability,format,format,11,"Make clang-format always succeed, but keep it running.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1331
https://github.com/root-project/root/pull/1332:66,modifiability,extens,extensions,66,"Improved header file name check in TCling.; There are more header extensions than "".h"" out there. Just a one-second drive-by PR, this doesn't really fix anything for me, but maybe it will help someone else.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1332
https://github.com/root-project/root/pull/1332:134,reliability,doe,doesn,134,"Improved header file name check in TCling.; There are more header extensions than "".h"" out there. Just a one-second drive-by PR, this doesn't really fix anything for me, but maybe it will help someone else.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1332
https://github.com/root-project/root/pull/1332:188,usability,help,help,188,"Improved header file name check in TCling.; There are more header extensions than "".h"" out there. Just a one-second drive-by PR, this doesn't really fix anything for me, but maybe it will help someone else.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1332
https://github.com/root-project/root/pull/1333:22,deployability,fail,fail,22,Allow clang-format to fail;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1333
https://github.com/root-project/root/pull/1333:12,interoperability,format,format,12,Allow clang-format to fail;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1333
https://github.com/root-project/root/pull/1333:22,reliability,fail,fail,22,Allow clang-format to fail;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1333
https://github.com/root-project/root/pull/1334:34,modifiability,paramet,parameters,34,[TDS] Let doxygen pick up default parameters of MakeCsvDataFrame;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1334
https://github.com/root-project/root/pull/1335:124,availability,error,errors,124,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:80,deployability,fail,failing,80,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:93,deployability,modul,modules,93,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:179,deployability,build,build,179,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:258,deployability,modul,module,258,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:288,deployability,modul,module,288,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:366,deployability,modul,module,366,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:410,deployability,modul,module,410,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:502,deployability,patch,patch,502,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:609,deployability,modul,module,609,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:405,energy efficiency,Core,Core,405,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:93,modifiability,modul,modules,93,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:258,modifiability,modul,module,258,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:288,modifiability,modul,module,288,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:366,modifiability,modul,module,366,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:410,modifiability,modul,module,410,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:609,modifiability,modul,module,609,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:124,performance,error,errors,124,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:80,reliability,fail,failing,80,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:70,safety,test,tests,70,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:93,safety,modul,modules,93,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:124,safety,error,errors,124,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:258,safety,modul,module,258,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:288,safety,modul,module,288,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:298,safety,compl,complete,298,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:366,safety,modul,module,366,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:410,safety,modul,module,410,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:502,safety,patch,patch,502,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:609,safety,modul,module,609,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:617,safety,compl,complete,617,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:298,security,compl,complete,298,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:502,security,patch,patch,502,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:617,security,compl,complete,617,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:70,testability,test,tests,70,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:124,usability,error,errors,124,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1335:521,usability,behavi,behavior,521,"[cxxmodules] Don't include existing headers again in rootcling.; Some tests are failing with modules such with redefinition errors. (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form. the C++ module again to make sure the module is complete (some. rootcling invocations don't have all headers of the module as. arguments, most notably the Core module). The first inclusion. of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the. *missing* headers that are necessary to make the C++ module. complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1335
https://github.com/root-project/root/pull/1336:79,availability,error,error,79,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:123,availability,reliab,reliable,123,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:159,availability,error,error,159,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:36,deployability,build,build,36,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:241,deployability,build,build,241,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:249,deployability,modul,module,249,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:85,integrability,messag,message,85,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:85,interoperability,messag,message,85,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:249,modifiability,modul,module,249,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:79,performance,error,error,79,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:159,performance,error,error,159,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:123,reliability,reliab,reliable,123,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:79,safety,error,error,79,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:159,safety,error,error,159,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:249,safety,modul,module,249,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:79,usability,error,error,79,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1336:159,usability,error,error,159,[cxxmodules] Always enable -Rmodule-build; This will be replaced with a proper error message in the future. once we have a reliable way of implmenting such an error. For. now it's already an improvement if we always print a warning. when we build a module on demand.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1336
https://github.com/root-project/root/pull/1337:1335,deployability,modul,modules,1335,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:467,energy efficiency,reduc,reduces,467,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:633,energy efficiency,load,loads,633,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:865,energy efficiency,reduc,reduced,865,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:958,energy efficiency,load,loading,958,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:1306,interoperability,standard,standard,1306,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:1429,interoperability,standard,standard,1429,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:1335,modifiability,modul,modules,1335,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:77,performance,content,contents,77,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:633,performance,load,loads,633,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:765,performance,memor,memory,765,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:958,performance,load,loading,958,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:1264,performance,memor,memory,1264,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:407,reliability,doe,does,407,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:902,safety,review,reviews,902,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:1035,safety,test,tests,1035,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:1335,safety,modul,modules,1335,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:325,testability,context,context,325,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:902,testability,review,reviews,902,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:1035,testability,test,tests,1035,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:765,usability,memor,memory,765,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:1047,usability,behavi,behavior,1047,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:1264,usability,memor,memory,1264,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1337:1372,usability,clear,clear,1372,"[cxxmodules] Fix autoloading of nested namespaces.; When we want to autoload contents from namespaces we end up in. Sema::LookupQualifiedName; then we issue a callback to. FindExternallyVisibleName which forwards to LookupObject. Lookup object. takes a DeclContext as an argument. This argument is always the primary. lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because. this reduces the amount of autoloads. Such autoloads can happen when. resolving template specializations when computing a decl's linkage by. clang's CodeGen. This in turn loads unexpected libraries such as RooFit. when trying to resolve all template specializations of __to_raw_pointer. (located in &lt;memory&gt;), including the one taking a HistFactory::Data*. The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird. banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information. about possible redeclarations which can affect the linkage computation or. other checks in codegen. If we fix the bug we will probably explode. ROOT's memory footprint and make the gap between standard ROOT and ROOT. with modules even bigger. Since it is not clear how much work and issue resolving is required for. standard ROOT, we can probably only live with the workaround of the missing. concept: moving entities in namespaces whose autoloading requires declarations. to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1337
https://github.com/root-project/root/pull/1338:4,testability,assert,asserts,4,Fix asserts for vectorization with padding;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1338
https://github.com/root-project/root/pull/1339:109,availability,failur,failure,109,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1339
https://github.com/root-project/root/pull/1339:109,deployability,fail,failure,109,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1339
https://github.com/root-project/root/pull/1339:212,deployability,build,build,212,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1339
https://github.com/root-project/root/pull/1339:96,modifiability,interm,intermittent,96,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1339
https://github.com/root-project/root/pull/1339:109,performance,failur,failure,109,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1339
https://github.com/root-project/root/pull/1339:109,reliability,fail,failure,109,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1339
https://github.com/root-project/root/pull/1339:47,safety,safe,safe,47,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1339
https://github.com/root-project/root/pull/1339:224,safety,test,testReport,224,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1339
https://github.com/root-project/root/pull/1339:224,testability,test,testReport,224,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1339
https://github.com/root-project/root/pull/1340:0,deployability,Modul,Modules,0,Modules test pr;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1340
https://github.com/root-project/root/pull/1340:0,modifiability,Modul,Modules,0,Modules test pr;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1340
https://github.com/root-project/root/pull/1340:0,safety,Modul,Modules,0,Modules test pr;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1340
https://github.com/root-project/root/pull/1340:8,safety,test,test,8,Modules test pr;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1340
https://github.com/root-project/root/pull/1340:8,testability,test,test,8,Modules test pr;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1340
https://github.com/root-project/root/pull/1341:149,deployability,version,version-,149,TMultiGraph::GetHistogram ; works even is the multigraph is not drawn. As requested here: https://root-forum.cern.ch/t/tmultigraph-getxaxis-settitle-version-4-01/3928/5,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1341
https://github.com/root-project/root/pull/1341:64,energy efficiency,draw,drawn,64,TMultiGraph::GetHistogram ; works even is the multigraph is not drawn. As requested here: https://root-forum.cern.ch/t/tmultigraph-getxaxis-settitle-version-4-01/3928/5,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1341
https://github.com/root-project/root/pull/1341:149,integrability,version,version-,149,TMultiGraph::GetHistogram ; works even is the multigraph is not drawn. As requested here: https://root-forum.cern.ch/t/tmultigraph-getxaxis-settitle-version-4-01/3928/5,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1341
https://github.com/root-project/root/pull/1341:149,modifiability,version,version-,149,TMultiGraph::GetHistogram ; works even is the multigraph is not drawn. As requested here: https://root-forum.cern.ch/t/tmultigraph-getxaxis-settitle-version-4-01/3928/5,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1341
https://github.com/root-project/root/pull/1342:20,performance,Cach,Cache,20,"Fix ROOT-9118 ""TDF: Cache and Snapshot do not trigger column definitions"";",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1342
https://github.com/root-project/root/pull/1343:119,availability,error,error,119,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:283,availability,error,error,283,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:800,availability,Redund,Redundant,800,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1474,availability,State,Statements,1474,". [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1611,availability,State,Statements,1611,"|'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1735,availability,error,error,1735," both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1810,availability,error,error,1810,"dition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1865,availability,error,error,1865,"s true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1928,availability,error,error,1928,"FileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1997,availability,error,error,1997,"mber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2061,availability,error,error,2061,"h.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2138,availability,Redund,Redundant,2138,"e/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3712,availability,sli,slist,3712,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3766,availability,operat,operators,3766,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:800,deployability,Redundan,Redundant,800,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1510,deployability,continu,continue,1510,"r.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (perf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1647,deployability,continu,continue,1647,"zer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possibl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1742,deployability,Resourc,Resource,1742,"des of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2138,deployability,Redundan,Redundant,2138,"e/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2164,deployability,contain,container,2164,"le) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' empti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1427,energy efficiency,core,core,1427,"69]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1742,energy efficiency,Resourc,Resource,1742,"des of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2213,energy efficiency,core,core,2213,"ck. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2331,energy efficiency,core,core,2331,"t/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3255,energy efficiency,current,currentType,3255,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1474,integrability,State,Statements,1474,". [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1611,integrability,State,Statements,1611,"|'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:119,performance,error,error,119,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:283,performance,error,error,283,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1735,performance,error,error,1735," both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1742,performance,Resourc,Resource,1742,"des of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1810,performance,error,error,1810,"dition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1817,performance,Memor,Memory,1817," If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1865,performance,error,error,1865,"s true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1872,performance,Memor,Memory,1872," [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (perfo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1928,performance,error,error,1928,"FileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1935,performance,Memor,Memory,1935,"r.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1997,performance,error,error,1997,"mber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2004,performance,Memor,Memory,2004,"second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Pos",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2061,performance,error,error,2061,"h.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2068,performance,Memor,Memory,2068,"26]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2256,performance,perform,performance,2256,"e) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'current",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2375,performance,perform,performance,2375,"ndex 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2510,performance,perform,performance,2510,"ue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2631,performance,perform,performance,2631,"n, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2749,performance,perform,performance,2749,: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer pr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2870,performance,perform,performance,2870,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2991,performance,perform,performance,2991,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3109,performance,perform,performance,3109,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3207,performance,perform,performance,3207,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3325,performance,perform,performance,3325,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3437,performance,perform,performance,3437,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3551,performance,perform,performance,3551,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3664,performance,perform,performance,3664,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:800,reliability,Redundan,Redundant,800,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2138,reliability,Redundan,Redundant,2138,"e/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3712,reliability,sli,slist,3712,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:119,safety,error,error,119,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:283,safety,error,error,283,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:800,safety,Redund,Redundant,800,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1735,safety,error,error,1735," both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1742,safety,Resourc,Resource,1742,"des of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1810,safety,error,error,1810,"dition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1865,safety,error,error,1865,"s true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1928,safety,error,error,1928,"FileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1997,safety,error,error,1997,"mber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2061,safety,error,error,2061,"h.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2138,safety,Redund,Redundant,2138,"e/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:960,security,Ident,Identical,960,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1700,security,auth,auth,1700,"cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1742,testability,Resourc,Resource,1742,"des of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:119,usability,error,error,119,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:283,usability,error,error,283,"cppcheck: fix some reports; [net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased. [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'. [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (err",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1735,usability,error,error,1735," both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1810,usability,error,error,1810,"dition: If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1817,usability,Memor,Memory,1817," If 'flag >= 80', the comparison 'flag' is always true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1865,usability,error,error,1865,"s true. [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1872,usability,Memor,Memory,1872," [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (perfo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1928,usability,error,error,1928,"FileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1935,usability,Memor,Memory,1935,"r.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:1997,usability,error,error,1997,"mber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2004,usability,Memor,Memory,2004,"second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Pos",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2061,usability,error,error,2061,"h.cxx:826]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2068,usability,Memor,Memory,2068,"26]: (style) Array index 'ia' is used before limits check. [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check. [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2256,usability,perform,performance,2256,"e) Array index 'aspectindex' is used before limits check. [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'current",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2375,usability,perform,performance,2375,"ndex 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2510,usability,perform,performance,2510,"ue, goto or throw will never be executed. [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2631,usability,perform,performance,2631,"n, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2749,usability,perform,performance,2749,: fd. [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer pr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2870,usability,perform,performance,2870,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:2991,usability,perform,performance,2991,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3109,usability,perform,performance,3109,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3207,usability,perform,performance,3207,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3325,usability,perform,performance,3325,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3437,usability,perform,performance,3437,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3551,usability,perform,performance,3551,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3664,usability,perform,performance,3664,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1343:3746,usability,Prefer,Prefer,3746,xx:1880]: (error) Memory leak: s. [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname. [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS. [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness. [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness. [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fCmds' emptiness. [html/src/TDocParser.cxx:684]: (performance) Possible inefficient checking for 'currentType' emptiness. [proof/proofd/src/XrdProofdManager.cxx:804]: (performance) Possible inefficient checking for 'uwrks' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:467]: (performance) Possible inefficient checking for 'staglst' emptiness. [proof/proofd/src/XrdProofdSandbox.cxx:571]: (performance) Possible inefficient checking for 'actln' emptiness. [roofit/roofitcore/src/RooSimWSTool.cxx:574]: (performance) Possible inefficient checking for 'slist' emptiness. all the reports Prefer prefix ++/-- operators for non-primitive types,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1343
https://github.com/root-project/root/pull/1344:21,deployability,API,API,21,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:50,deployability,modul,modules,50,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:101,deployability,modul,modules,101,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:175,deployability,modul,module,175,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:28,energy efficiency,load,load,28,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:92,energy efficiency,load,load,92,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:21,integrability,API,API,21,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:21,interoperability,API,API,21,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:50,modifiability,modul,modules,50,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:101,modifiability,modul,modules,101,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:175,modifiability,modul,module,175,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:28,performance,load,load,28,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:92,performance,load,load,92,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:50,safety,modul,modules,50,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:101,safety,modul,modules,101,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:143,safety,avoid,avoid,143,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:175,safety,modul,module,175,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1344:189,usability,help,helpful,189,[cxxmodules] Use the API to load top level system modules.; This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1344
https://github.com/root-project/root/pull/1345:21,deployability,modul,module,21,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:240,deployability,modul,module,240,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:491,deployability,modul,modules-aware,491,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:523,deployability,patch,patch,523,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:208,integrability,buffer,buffers,208,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:21,modifiability,modul,module,21,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:240,modifiability,modul,module,240,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:491,modifiability,modul,modules-aware,491,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:653,modifiability,refact,refactor,653,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:224,performance,content,contents,224,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:653,performance,refactor,refactor,653,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:21,safety,modul,module,21,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:33,safety,valid,validation,33,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:69,safety,valid,validation,69,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:240,safety,modul,module,240,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:272,safety,valid,validation,272,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:491,safety,modul,modules-aware,491,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:523,safety,patch,patch,523,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:33,security,validat,validation,33,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:69,security,validat,validation,69,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:272,security,validat,validation,272,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1345:523,security,patch,patch,523,"[cxxmodules] Disable module file validation.; We need to disable the validation of PCM files because rootcling. serializes what it sees. For instance, we even serialize in the PCM. file some temporary lookup buffers and the contents of the module maps. We disable the PCH validation but that is not sufficient for PCM. The. TCling code `fInterpreter->getCI()->getPreprocessorOpts().DisablePCHValidation = true`. is not enough because we rely more on the clang driver to setup correctly. our modules-aware interpreter. This patch just uses the correct flag when setting up cling. A proper fix to this issue is thoroughly described in RE-0003 (rootcling. refactor proposal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1345
https://github.com/root-project/root/pull/1346:85,usability,document,documentation,85,"Added a missing space; Added a missing space in a comment, which propagates into the documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1346
https://github.com/root-project/root/pull/1348:1,deployability,modul,modules,1,[modules][cxxmodules] Switch back to umbrella.; …modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1348
https://github.com/root-project/root/pull/1348:49,deployability,modul,modules,49,[modules][cxxmodules] Switch back to umbrella.; …modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1348
https://github.com/root-project/root/pull/1348:1,modifiability,modul,modules,1,[modules][cxxmodules] Switch back to umbrella.; …modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1348
https://github.com/root-project/root/pull/1348:49,modifiability,modul,modules,49,[modules][cxxmodules] Switch back to umbrella.; …modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1348
https://github.com/root-project/root/pull/1348:1,safety,modul,modules,1,[modules][cxxmodules] Switch back to umbrella.; …modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1348
https://github.com/root-project/root/pull/1348:49,safety,modul,modules,49,[modules][cxxmodules] Switch back to umbrella.; …modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1348
https://github.com/root-project/root/pull/1349:35,deployability,modul,modules,35,[testing] assert on fwd delcs with modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1349
https://github.com/root-project/root/pull/1349:35,modifiability,modul,modules,35,[testing] assert on fwd delcs with modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1349
https://github.com/root-project/root/pull/1349:1,safety,test,testing,1,[testing] assert on fwd delcs with modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1349
https://github.com/root-project/root/pull/1349:35,safety,modul,modules,35,[testing] assert on fwd delcs with modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1349
https://github.com/root-project/root/pull/1349:1,testability,test,testing,1,[testing] assert on fwd delcs with modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1349
https://github.com/root-project/root/pull/1349:10,testability,assert,assert,10,[testing] assert on fwd delcs with modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1349
https://github.com/root-project/root/pull/1350:25,deployability,modul,modules,25,[cxxmodules] Preload all modules.; This does not seem to affect the startup performance of ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1350
https://github.com/root-project/root/pull/1350:25,modifiability,modul,modules,25,[cxxmodules] Preload all modules.; This does not seem to affect the startup performance of ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1350
https://github.com/root-project/root/pull/1350:76,performance,perform,performance,76,[cxxmodules] Preload all modules.; This does not seem to affect the startup performance of ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1350
https://github.com/root-project/root/pull/1350:40,reliability,doe,does,40,[cxxmodules] Preload all modules.; This does not seem to affect the startup performance of ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1350
https://github.com/root-project/root/pull/1350:25,safety,modul,modules,25,[cxxmodules] Preload all modules.; This does not seem to affect the startup performance of ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1350
https://github.com/root-project/root/pull/1350:76,usability,perform,performance,76,[cxxmodules] Preload all modules.; This does not seem to affect the startup performance of ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1350
https://github.com/root-project/root/pull/1351:178,performance,lock,lock,178,"Make THashList::RecursiveRemove loop over the list element thread-aware.; Prior to this change, the tranversal might be cut short if one of the RecursiveRemove request the write lock and. thus let another thread modify the list; if this happens some of the node might now have a nullptr payload and. the previous would cut short the traversal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1351
https://github.com/root-project/root/pull/1351:178,security,lock,lock,178,"Make THashList::RecursiveRemove loop over the list element thread-aware.; Prior to this change, the tranversal might be cut short if one of the RecursiveRemove request the write lock and. thus let another thread modify the list; if this happens some of the node might now have a nullptr payload and. the previous would cut short the traversal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1351
https://github.com/root-project/root/pull/1351:212,security,modif,modify,212,"Make THashList::RecursiveRemove loop over the list element thread-aware.; Prior to this change, the tranversal might be cut short if one of the RecursiveRemove request the write lock and. thus let another thread modify the list; if this happens some of the node might now have a nullptr payload and. the previous would cut short the traversal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1351
https://github.com/root-project/root/pull/1352:63,deployability,patch,patch,63,"TDavixFile: add support for cross-protocol metalinks; Original patch by Georgios Bitzes, manual rebase onto master. Compiles and works correctly against upstream/master on CC7. See here for more information: https://tmaier.web.cern.ch/tmaier/ROOTDavixRedirection/davix-root-fix.html. Please also backport this patch to 6-08 and 6-10. Thanks! Mario",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1352
https://github.com/root-project/root/pull/1352:310,deployability,patch,patch,310,"TDavixFile: add support for cross-protocol metalinks; Original patch by Georgios Bitzes, manual rebase onto master. Compiles and works correctly against upstream/master on CC7. See here for more information: https://tmaier.web.cern.ch/tmaier/ROOTDavixRedirection/davix-root-fix.html. Please also backport this patch to 6-08 and 6-10. Thanks! Mario",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1352
https://github.com/root-project/root/pull/1352:34,integrability,protocol,protocol,34,"TDavixFile: add support for cross-protocol metalinks; Original patch by Georgios Bitzes, manual rebase onto master. Compiles and works correctly against upstream/master on CC7. See here for more information: https://tmaier.web.cern.ch/tmaier/ROOTDavixRedirection/davix-root-fix.html. Please also backport this patch to 6-08 and 6-10. Thanks! Mario",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1352
https://github.com/root-project/root/pull/1352:34,interoperability,protocol,protocol,34,"TDavixFile: add support for cross-protocol metalinks; Original patch by Georgios Bitzes, manual rebase onto master. Compiles and works correctly against upstream/master on CC7. See here for more information: https://tmaier.web.cern.ch/tmaier/ROOTDavixRedirection/davix-root-fix.html. Please also backport this patch to 6-08 and 6-10. Thanks! Mario",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1352
https://github.com/root-project/root/pull/1352:63,safety,patch,patch,63,"TDavixFile: add support for cross-protocol metalinks; Original patch by Georgios Bitzes, manual rebase onto master. Compiles and works correctly against upstream/master on CC7. See here for more information: https://tmaier.web.cern.ch/tmaier/ROOTDavixRedirection/davix-root-fix.html. Please also backport this patch to 6-08 and 6-10. Thanks! Mario",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1352
https://github.com/root-project/root/pull/1352:310,safety,patch,patch,310,"TDavixFile: add support for cross-protocol metalinks; Original patch by Georgios Bitzes, manual rebase onto master. Compiles and works correctly against upstream/master on CC7. See here for more information: https://tmaier.web.cern.ch/tmaier/ROOTDavixRedirection/davix-root-fix.html. Please also backport this patch to 6-08 and 6-10. Thanks! Mario",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1352
https://github.com/root-project/root/pull/1352:63,security,patch,patch,63,"TDavixFile: add support for cross-protocol metalinks; Original patch by Georgios Bitzes, manual rebase onto master. Compiles and works correctly against upstream/master on CC7. See here for more information: https://tmaier.web.cern.ch/tmaier/ROOTDavixRedirection/davix-root-fix.html. Please also backport this patch to 6-08 and 6-10. Thanks! Mario",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1352
https://github.com/root-project/root/pull/1352:310,security,patch,patch,310,"TDavixFile: add support for cross-protocol metalinks; Original patch by Georgios Bitzes, manual rebase onto master. Compiles and works correctly against upstream/master on CC7. See here for more information: https://tmaier.web.cern.ch/tmaier/ROOTDavixRedirection/davix-root-fix.html. Please also backport this patch to 6-08 and 6-10. Thanks! Mario",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1352
https://github.com/root-project/root/pull/1352:16,usability,support,support,16,"TDavixFile: add support for cross-protocol metalinks; Original patch by Georgios Bitzes, manual rebase onto master. Compiles and works correctly against upstream/master on CC7. See here for more information: https://tmaier.web.cern.ch/tmaier/ROOTDavixRedirection/davix-root-fix.html. Please also backport this patch to 6-08 and 6-10. Thanks! Mario",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1352
https://github.com/root-project/root/pull/1353:118,availability,error,errors,118,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:95,deployability,build,build,95,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:221,deployability,instal,install,221,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:237,deployability,upgrad,upgrade,237,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:257,deployability,instal,install,257,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:278,deployability,upgrad,upgrade,278,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:405,deployability,log,logs,405,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:482,deployability,log,logdir,482,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:491,deployability,log,logs,491,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:668,deployability,API,API,668,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:668,integrability,API,API,668,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:638,interoperability,compatib,compatible,638,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:668,interoperability,API,API,668,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:739,interoperability,specif,specific,739,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:237,modifiability,upgrad,upgrade,237,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:278,modifiability,upgrad,upgrade,278,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:118,performance,error,errors,118,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:561,performance,network,network,561,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:118,safety,error,errors,118,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:405,safety,log,logs,405,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:482,safety,log,logdir,482,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:491,safety,log,logs,491,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:761,safety,test,testing,761,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:961,safety,review,reviewing,961,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:405,security,log,logs,405,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:482,security,log,logdir,482,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:491,security,log,logs,491,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:561,security,network,network,561,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:890,security,auth,author,890,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:405,testability,log,logs,405,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:482,testability,log,logdir,482,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:491,testability,log,logs,491,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:761,testability,test,testing,761,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:961,testability,review,reviewing,961,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:118,usability,error,errors,118,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1353:547,usability,visual,visualize,547,"New pymva keras callback: TensorBoard; This PR adds a new callback to the PyKeras method. I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:. `sudo pip install keras --upgrade`. `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'. Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`. Now you can open the link from your terminal and visualize the network and training. . The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1353
https://github.com/root-project/root/pull/1354:9,deployability,modul,modules,9,Load all modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1354
https://github.com/root-project/root/pull/1354:0,energy efficiency,Load,Load,0,Load all modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1354
https://github.com/root-project/root/pull/1354:9,modifiability,modul,modules,9,Load all modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1354
https://github.com/root-project/root/pull/1354:0,performance,Load,Load,0,Load all modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1354
https://github.com/root-project/root/pull/1354:9,safety,modul,modules,9,Load all modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1354
https://github.com/root-project/root/pull/1355:317,deployability,fail,failing,317,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1355:374,deployability,modul,modules,374,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1355:123,energy efficiency,load,loading,123,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1355:204,integrability,inject,injected,204,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1355:374,modifiability,modul,modules,374,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1355:123,performance,load,loading,123,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1355:317,reliability,fail,failing,317,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1355:325,safety,test,tests,325,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1355:374,safety,modul,modules,374,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1355:204,security,inject,injected,204,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1355:325,testability,test,tests,325,"[cxxmodules] Also preload TMVA/TreePlayer; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload TMVA/TreePlayer. to fix all failing tests that are related to this feature/bug with. modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1355
https://github.com/root-project/root/pull/1356:60,deployability,modul,module,60,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:276,deployability,infrastructur,infrastructure,276,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:353,deployability,modul,modules,353,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:397,deployability,patch,patch,397,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:440,deployability,stage,stage,440,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:487,deployability,modul,modules,487,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:86,energy efficiency,load,load,86,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:204,energy efficiency,load,load,204,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:60,modifiability,modul,module,60,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:353,modifiability,modul,modules,353,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:487,modifiability,modul,modules,487,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:86,performance,load,load,86,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:204,performance,load,load,204,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:60,safety,modul,module,60,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:353,safety,modul,modules,353,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:397,safety,patch,patch,397,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:487,safety,modul,modules,487,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:397,security,patch,patch,397,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1356:268,usability,minim,minimal,268,"[cxxmodules] Teach TCling::RegisterModule to work with real module fi…; …les. When we load a library, during its static intialization it calls. TCling::RegisterModule to make ROOT's runtime aware of that load. Regular. ROOT also will do some header parsing to add the minimal infrastructure. in place for cling to be able to call into that library. C++ modules define away the need to parse. This patch intends to skip all. parsing at this stage and fix recursive parsing issues for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1356
https://github.com/root-project/root/pull/1357:12,deployability,build,build,12,Fix classic build; @Axel-Naumann what to do about zlib in LLVM? Please let me know what you think of my solution. See my comment at the bottom of this page for the cause: https://reviews.llvm.org/D21478.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1357
https://github.com/root-project/root/pull/1357:179,safety,review,reviews,179,Fix classic build; @Axel-Naumann what to do about zlib in LLVM? Please let me know what you think of my solution. See my comment at the bottom of this page for the cause: https://reviews.llvm.org/D21478.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1357
https://github.com/root-project/root/pull/1357:179,testability,review,reviews,179,Fix classic build; @Axel-Naumann what to do about zlib in LLVM? Please let me know what you think of my solution. See my comment at the bottom of this page for the cause: https://reviews.llvm.org/D21478.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1357
https://github.com/root-project/root/pull/1358:164,deployability,patch,patch,164,"Make TEnv::GetValue functions const; Requires that TEnv:: Getvalue, Lookup are const as well. Also mark Defined const. Local compilation of ROOT succeeds after the patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1358
https://github.com/root-project/root/pull/1358:164,safety,patch,patch,164,"Make TEnv::GetValue functions const; Requires that TEnv:: Getvalue, Lookup are const as well. Also mark Defined const. Local compilation of ROOT succeeds after the patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1358
https://github.com/root-project/root/pull/1358:164,security,patch,patch,164,"Make TEnv::GetValue functions const; Requires that TEnv:: Getvalue, Lookup are const as well. Also mark Defined const. Local compilation of ROOT succeeds after the patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1358
https://github.com/root-project/root/pull/1360:20,availability,failur,failure,20,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:20,deployability,fail,failure,20,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:102,deployability,Integr,Integrity,102,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:256,deployability,version,versions,256,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:13,energy efficiency,Load,Load,13,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:337,energy efficiency,Load,Load,337,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:361,energy efficiency,load,loading,361,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:518,energy efficiency,load,load,518,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:635,energy efficiency,Load,Load,635,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:729,energy efficiency,load,load,729,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:102,integrability,Integr,Integrity,102,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:256,integrability,version,versions,256,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:102,interoperability,Integr,Integrity,102,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:102,modifiability,Integr,Integrity,102,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:166,modifiability,variab,variables,166,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:256,modifiability,version,versions,256,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:395,modifiability,variab,variable,395,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:13,performance,Load,Load,13,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:20,performance,failur,failure,20,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:337,performance,Load,Load,337,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:361,performance,load,loading,361,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:518,performance,load,load,518,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:635,performance,Load,Load,635,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:729,performance,load,load,729,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:20,reliability,fail,failure,20,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:102,reliability,Integr,Integrity,102,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:129,safety,prevent,prevents,129,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:102,security,Integr,Integrity,102,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:129,security,preven,prevents,129,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:456,security,modif,modifications,456,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:721,security,control,control,721,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:102,testability,Integr,Integrity,102,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1360:721,testability,control,control,721,Fix gSystem->Load() failure caused by recent macOS default; macOS has introduced feature named System Integrity Protection which prevents DYLD_* and LD_* environment variables to be propageted to a ROOT process. We must disable the feature to use multiple versions of ROOT with AliBuild. There are two solution for this:. - Fix gSystem->Load() to allow dynamic loading using another environment variable. Pros: It just works (possibly) without out of tree modifications. Easy to relocate. Cons: It's dirty. Unexpected load paths may be used even if they they have low priority. - Change all macros ever made so that they call gSystem->Load() with the full path or call AddDynamicPath in advance. Pros: It's neat. One can control load path precisely. Cons: Too many macros to fix. We should fix the macros after relocation of libraries. This commit implements the former solution.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1360
https://github.com/root-project/root/pull/1361:9,deployability,modul,module,9,Register module load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1361
https://github.com/root-project/root/pull/1361:21,deployability,modul,module,21,Register module load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1361
https://github.com/root-project/root/pull/1361:16,energy efficiency,load,load,16,Register module load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1361
https://github.com/root-project/root/pull/1361:9,modifiability,modul,module,9,Register module load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1361
https://github.com/root-project/root/pull/1361:21,modifiability,modul,module,21,Register module load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1361
https://github.com/root-project/root/pull/1361:16,performance,load,load,16,Register module load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1361
https://github.com/root-project/root/pull/1361:9,safety,modul,module,9,Register module load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1361
https://github.com/root-project/root/pull/1361:21,safety,modul,module,21,Register module load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1361
https://github.com/root-project/root/pull/1362:22,deployability,modul,modules,22,[cxxmodules] Load the modules using the new LoadModule interface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1362
https://github.com/root-project/root/pull/1362:13,energy efficiency,Load,Load,13,[cxxmodules] Load the modules using the new LoadModule interface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1362
https://github.com/root-project/root/pull/1362:44,energy efficiency,Load,LoadModule,44,[cxxmodules] Load the modules using the new LoadModule interface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1362
https://github.com/root-project/root/pull/1362:55,integrability,interfac,interface,55,[cxxmodules] Load the modules using the new LoadModule interface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1362
https://github.com/root-project/root/pull/1362:55,interoperability,interfac,interface,55,[cxxmodules] Load the modules using the new LoadModule interface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1362
https://github.com/root-project/root/pull/1362:22,modifiability,modul,modules,22,[cxxmodules] Load the modules using the new LoadModule interface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1362
https://github.com/root-project/root/pull/1362:55,modifiability,interfac,interface,55,[cxxmodules] Load the modules using the new LoadModule interface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1362
https://github.com/root-project/root/pull/1362:13,performance,Load,Load,13,[cxxmodules] Load the modules using the new LoadModule interface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1362
https://github.com/root-project/root/pull/1362:44,performance,Load,LoadModule,44,[cxxmodules] Load the modules using the new LoadModule interface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1362
https://github.com/root-project/root/pull/1362:22,safety,modul,modules,22,[cxxmodules] Load the modules using the new LoadModule interface.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1362
https://github.com/root-project/root/pull/1363:157,integrability,event,event,157,"http: correctly handle websocket close; Solves two problem with websockets handling, especially when exiting ROOT interactive session. At that moment normal event loop is no longer running, but closing websocket issues one more event, which requires to be proceed. . Appears in new webgui, when widgets (canvas or fitpanel) runs in normal web browser, connecting via websocket.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1363
https://github.com/root-project/root/pull/1363:228,integrability,event,event,228,"http: correctly handle websocket close; Solves two problem with websockets handling, especially when exiting ROOT interactive session. At that moment normal event loop is no longer running, but closing websocket issues one more event, which requires to be proceed. . Appears in new webgui, when widgets (canvas or fitpanel) runs in normal web browser, connecting via websocket.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1363
https://github.com/root-project/root/pull/1363:126,security,session,session,126,"http: correctly handle websocket close; Solves two problem with websockets handling, especially when exiting ROOT interactive session. At that moment normal event loop is no longer running, but closing websocket issues one more event, which requires to be proceed. . Appears in new webgui, when widgets (canvas or fitpanel) runs in normal web browser, connecting via websocket.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1363
https://github.com/root-project/root/pull/1363:33,usability,close,close,33,"http: correctly handle websocket close; Solves two problem with websockets handling, especially when exiting ROOT interactive session. At that moment normal event loop is no longer running, but closing websocket issues one more event, which requires to be proceed. . Appears in new webgui, when widgets (canvas or fitpanel) runs in normal web browser, connecting via websocket.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1363
https://github.com/root-project/root/pull/1363:114,usability,interact,interactive,114,"http: correctly handle websocket close; Solves two problem with websockets handling, especially when exiting ROOT interactive session. At that moment normal event loop is no longer running, but closing websocket issues one more event, which requires to be proceed. . Appears in new webgui, when widgets (canvas or fitpanel) runs in normal web browser, connecting via websocket.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1363
https://github.com/root-project/root/pull/1363:295,usability,widget,widgets,295,"http: correctly handle websocket close; Solves two problem with websockets handling, especially when exiting ROOT interactive session. At that moment normal event loop is no longer running, but closing websocket issues one more event, which requires to be proceed. . Appears in new webgui, when widgets (canvas or fitpanel) runs in normal web browser, connecting via websocket.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1363
https://github.com/root-project/root/pull/1364:0,integrability,Translat,Translate,0,"Translate tutorial principal from CROOT to PyROOT; I add a tutorial to Principal components using as base the existing one in Cint, I rewrite in PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1364
https://github.com/root-project/root/pull/1364:81,integrability,compon,components,81,"Translate tutorial principal from CROOT to PyROOT; I add a tutorial to Principal components using as base the existing one in Cint, I rewrite in PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1364
https://github.com/root-project/root/pull/1364:0,interoperability,Translat,Translate,0,"Translate tutorial principal from CROOT to PyROOT; I add a tutorial to Principal components using as base the existing one in Cint, I rewrite in PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1364
https://github.com/root-project/root/pull/1364:81,interoperability,compon,components,81,"Translate tutorial principal from CROOT to PyROOT; I add a tutorial to Principal components using as base the existing one in Cint, I rewrite in PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1364
https://github.com/root-project/root/pull/1364:81,modifiability,compon,components,81,"Translate tutorial principal from CROOT to PyROOT; I add a tutorial to Principal components using as base the existing one in Cint, I rewrite in PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1364
https://github.com/root-project/root/pull/1366:29,interoperability,share,sharedLibraryPathName,29,[cxxmodules] Move the set of sharedLibraryPathName before its first use.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1366
https://github.com/root-project/root/pull/1367:42,deployability,modul,module,42,[cxxmodules] Bail out early if we found a module.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1367
https://github.com/root-project/root/pull/1367:42,modifiability,modul,module,42,[cxxmodules] Bail out early if we found a module.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1367
https://github.com/root-project/root/pull/1367:42,safety,modul,module,42,[cxxmodules] Bail out early if we found a module.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1367
https://github.com/root-project/root/pull/1368:75,deployability,build,builds,75,"Cherry picks of fixes from master to 6.12, including fixes for the classic builds;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1368
https://github.com/root-project/root/pull/1370:27,deployability,modul,module,27,[testing][cxxmodules] Load module in payload instead;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1370
https://github.com/root-project/root/pull/1370:22,energy efficiency,Load,Load,22,[testing][cxxmodules] Load module in payload instead;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1370
https://github.com/root-project/root/pull/1370:27,modifiability,modul,module,27,[testing][cxxmodules] Load module in payload instead;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1370
https://github.com/root-project/root/pull/1370:22,performance,Load,Load,22,[testing][cxxmodules] Load module in payload instead;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1370
https://github.com/root-project/root/pull/1370:1,safety,test,testing,1,[testing][cxxmodules] Load module in payload instead;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1370
https://github.com/root-project/root/pull/1370:27,safety,modul,module,27,[testing][cxxmodules] Load module in payload instead;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1370
https://github.com/root-project/root/pull/1370:1,testability,test,testing,1,[testing][cxxmodules] Load module in payload instead;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1370
https://github.com/root-project/root/pull/1371:170,availability,reliab,reliability,170,Upgrade Civetweb to v1.10; Also provide improved solution for THttpServer shutdown - handling of websocket close done async and does not block civetweb threads. Improves reliability of cleanup process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1371
https://github.com/root-project/root/pull/1371:0,deployability,Upgrad,Upgrade,0,Upgrade Civetweb to v1.10; Also provide improved solution for THttpServer shutdown - handling of websocket close done async and does not block civetweb threads. Improves reliability of cleanup process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1371
https://github.com/root-project/root/pull/1371:0,modifiability,Upgrad,Upgrade,0,Upgrade Civetweb to v1.10; Also provide improved solution for THttpServer shutdown - handling of websocket close done async and does not block civetweb threads. Improves reliability of cleanup process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1371
https://github.com/root-project/root/pull/1371:128,reliability,doe,does,128,Upgrade Civetweb to v1.10; Also provide improved solution for THttpServer shutdown - handling of websocket close done async and does not block civetweb threads. Improves reliability of cleanup process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1371
https://github.com/root-project/root/pull/1371:170,reliability,reliab,reliability,170,Upgrade Civetweb to v1.10; Also provide improved solution for THttpServer shutdown - handling of websocket close done async and does not block civetweb threads. Improves reliability of cleanup process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1371
https://github.com/root-project/root/pull/1371:170,safety,reliabil,reliability,170,Upgrade Civetweb to v1.10; Also provide improved solution for THttpServer shutdown - handling of websocket close done async and does not block civetweb threads. Improves reliability of cleanup process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1371
https://github.com/root-project/root/pull/1371:107,usability,close,close,107,Upgrade Civetweb to v1.10; Also provide improved solution for THttpServer shutdown - handling of websocket close done async and does not block civetweb threads. Improves reliability of cleanup process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1371
https://github.com/root-project/root/pull/1372:197,integrability,wrap,wrapping,197,"Workaround compilation problem with Intel Compiler.; Intel Compiler cannot compile this piece of code:. static constexpr unsigned attrIdxToArrayIdx(unsigned Index) {. // MSVC warns about '~0U + 1' wrapping around when this is called on. // FunctionIndex, so cast to int first. return static_cast<int>(Index) + 1;. }. int main(int, char**) {. static_assert(attrIdxToArrayIdx(~0U) == 0U, ""FOO"");. return 0;. }. The problem can be worked around by including the uncessary cast in an #ifdef. for MSVC, which is the only compiler that needs it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1372
https://github.com/root-project/root/pull/1373:52,integrability,messag,message,52,"[llvm][backport] Backport r319037.; Original commit message:. ""Constify. NFC.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1373
https://github.com/root-project/root/pull/1373:52,interoperability,messag,message,52,"[llvm][backport] Backport r319037.; Original commit message:. ""Constify. NFC.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1373
https://github.com/root-project/root/pull/1374:32,deployability,depend,dependencies,32,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:53,deployability,modul,module,53,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:74,deployability,depend,dependency,74,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:48,energy efficiency,Core,Core,48,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:32,integrability,depend,dependencies,32,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:74,integrability,depend,dependency,74,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:32,modifiability,depend,dependencies,32,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:53,modifiability,modul,module,53,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:74,modifiability,depend,dependency,74,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:32,safety,depend,dependencies,32,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:53,safety,modul,module,53,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:74,safety,depend,dependency,74,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:32,testability,depend,dependencies,32,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1374:74,testability,depend,dependency,74,"Add numbered LinkDef headers to dependencies of Core module; Without this dependency, a change to one of `LinkDef{1,2,3}.h` will. not trigger the regeneration of the `G__Core.cxx` dictionary, since. only the main `LinkDef.h` header was explicily listed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1374
https://github.com/root-project/root/pull/1376:87,deployability,stack,stackoverflow,87,[NFC] Change CRLF with LF in civetweb/file_ops.inl; see e.g. [this discussion](https://stackoverflow.com/questions/1967370/git-replacing-lf-with-crlf) for some examples of the issues that might arise when mixing the two different styles of newline in git.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1376
https://github.com/root-project/root/pull/1377:416,deployability,log,logic,416,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:32,integrability,Filter,Filters,32,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:63,integrability,event,event,63,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:96,integrability,event,event,96,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:159,integrability,filter,filter,159,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:228,integrability,event,event-loop,228,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:286,integrability,filter,filter,286,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:328,integrability,event,event-loop,328,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:450,integrability,filter,filters,450,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:512,integrability,filter,filters,512,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:643,modifiability,scenario,scenario,643,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:356,performance,perform,performed,356,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:416,safety,log,logic,416,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:629,safety,test,test,629,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:416,security,log,logic,416,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:416,testability,log,logic,416,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:629,testability,test,test,629,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:243,usability,user,users,243,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1377:356,usability,perform,performed,356,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; We now reset `fMustRunEventLoop` when a new named filter is added. This fixes ROOT-9117: TDF now correctly re-runs the event-loop if. users ask for a cutflow report for a named filter that has been. added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that. only the new named filters (and possibly new actions) are executed,. but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1377
https://github.com/root-project/root/pull/1378:21,modifiability,Reu,Reuse,21,[testing][cxxmodules]Reuse def loc;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1378
https://github.com/root-project/root/pull/1378:1,safety,test,testing,1,[testing][cxxmodules]Reuse def loc;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1378
https://github.com/root-project/root/pull/1378:1,testability,test,testing,1,[testing][cxxmodules]Reuse def loc;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1378
https://github.com/root-project/root/pull/1379:13,modifiability,variab,variable,13,Fix misnamed variable in RooRandomizeParamMCSModule; `RooRandomizeParamMCSModule::sampleGaussian` results in a segfault as the corresponding `_gen` parameter is never set up. This PR is untested so there may be additional issues.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1379
https://github.com/root-project/root/pull/1379:148,modifiability,paramet,parameter,148,Fix misnamed variable in RooRandomizeParamMCSModule; `RooRandomizeParamMCSModule::sampleGaussian` results in a segfault as the corresponding `_gen` parameter is never set up. This PR is untested so there may be additional issues.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1379
https://github.com/root-project/root/pull/1380:0,integrability,Translat,Translate,0,Translate example on math principal.C to principal.py.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1380
https://github.com/root-project/root/pull/1380:0,interoperability,Translat,Translate,0,Translate example on math principal.C to principal.py.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1380
https://github.com/root-project/root/pull/1381:32,deployability,modul,modules,32,[cxxmodules] Export macros from modules; This PR fixes the issue that we don't export macros from the loaded modules. See the specific commits for more.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1381
https://github.com/root-project/root/pull/1381:109,deployability,modul,modules,109,[cxxmodules] Export macros from modules; This PR fixes the issue that we don't export macros from the loaded modules. See the specific commits for more.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1381
https://github.com/root-project/root/pull/1381:102,energy efficiency,load,loaded,102,[cxxmodules] Export macros from modules; This PR fixes the issue that we don't export macros from the loaded modules. See the specific commits for more.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1381
https://github.com/root-project/root/pull/1381:126,interoperability,specif,specific,126,[cxxmodules] Export macros from modules; This PR fixes the issue that we don't export macros from the loaded modules. See the specific commits for more.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1381
https://github.com/root-project/root/pull/1381:32,modifiability,modul,modules,32,[cxxmodules] Export macros from modules; This PR fixes the issue that we don't export macros from the loaded modules. See the specific commits for more.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1381
https://github.com/root-project/root/pull/1381:109,modifiability,modul,modules,109,[cxxmodules] Export macros from modules; This PR fixes the issue that we don't export macros from the loaded modules. See the specific commits for more.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1381
https://github.com/root-project/root/pull/1381:102,performance,load,loaded,102,[cxxmodules] Export macros from modules; This PR fixes the issue that we don't export macros from the loaded modules. See the specific commits for more.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1381
https://github.com/root-project/root/pull/1381:32,safety,modul,modules,32,[cxxmodules] Export macros from modules; This PR fixes the issue that we don't export macros from the loaded modules. See the specific commits for more.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1381
https://github.com/root-project/root/pull/1381:109,safety,modul,modules,109,[cxxmodules] Export macros from modules; This PR fixes the issue that we don't export macros from the loaded modules. See the specific commits for more.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1381
https://github.com/root-project/root/pull/1382:32,integrability,Filter,Filters,32,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; Backport of #1377",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1382
https://github.com/root-project/root/pull/1382:63,integrability,event,event,63,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; Backport of #1377",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1382
https://github.com/root-project/root/pull/1382:96,integrability,event,event,96,"Fix ROOT-9117: ""TDF: Reports on Filters booked after the first event loop do not re-trigger the event loop""; Backport of #1377",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1382
https://github.com/root-project/root/pull/1385:26,energy efficiency,Load,LoadCoreModules,26,[cxxmodules] Fix typos in LoadCoreModules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1385
https://github.com/root-project/root/pull/1385:26,performance,Load,LoadCoreModules,26,[cxxmodules] Fix typos in LoadCoreModules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1385
https://github.com/root-project/root/pull/1386:53,deployability,continu,continuous,53,"Re-enable sub-directory support in TXMLFile; Through continuous changes in TFile/TDirectoryFile functionality,. sub-directory support in TXMLFile was lost. Now reintroduced again. Make similar changes for TSQLFile (only for historical reasons, seems to be nobody using it). Reformat source code with clang format",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1386
https://github.com/root-project/root/pull/1386:10,integrability,sub,sub-directory,10,"Re-enable sub-directory support in TXMLFile; Through continuous changes in TFile/TDirectoryFile functionality,. sub-directory support in TXMLFile was lost. Now reintroduced again. Make similar changes for TSQLFile (only for historical reasons, seems to be nobody using it). Reformat source code with clang format",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1386
https://github.com/root-project/root/pull/1386:112,integrability,sub,sub-directory,112,"Re-enable sub-directory support in TXMLFile; Through continuous changes in TFile/TDirectoryFile functionality,. sub-directory support in TXMLFile was lost. Now reintroduced again. Make similar changes for TSQLFile (only for historical reasons, seems to be nobody using it). Reformat source code with clang format",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1386
https://github.com/root-project/root/pull/1386:306,interoperability,format,format,306,"Re-enable sub-directory support in TXMLFile; Through continuous changes in TFile/TDirectoryFile functionality,. sub-directory support in TXMLFile was lost. Now reintroduced again. Make similar changes for TSQLFile (only for historical reasons, seems to be nobody using it). Reformat source code with clang format",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1386
https://github.com/root-project/root/pull/1386:24,usability,support,support,24,"Re-enable sub-directory support in TXMLFile; Through continuous changes in TFile/TDirectoryFile functionality,. sub-directory support in TXMLFile was lost. Now reintroduced again. Make similar changes for TSQLFile (only for historical reasons, seems to be nobody using it). Reformat source code with clang format",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1386
https://github.com/root-project/root/pull/1386:126,usability,support,support,126,"Re-enable sub-directory support in TXMLFile; Through continuous changes in TFile/TDirectoryFile functionality,. sub-directory support in TXMLFile was lost. Now reintroduced again. Make similar changes for TSQLFile (only for historical reasons, seems to be nobody using it). Reformat source code with clang format",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1386
https://github.com/root-project/root/pull/1387:85,deployability,modul,module,85,[cxxmodules] Also include explicitly assert; Assert isn't included from the STL/libc module as it's a textual. header which needs to be textually parsed. Let's add it to the. TCling `declare` call to cheaply get assert with modules into. the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1387
